import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace appservices {
    class AppServiceLocationEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: AppServiceLocationEnum;
        static Constant: AppServiceLocationEnum;
        static Parameter: AppServiceLocationEnum;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `AppServices`.
     */
    interface IAppServiceAction extends internal.IElement {
        model: IModel;
        container: IConsumedAppService;
        load(): AppServiceAction;
        load(callback: (element: AppServiceAction) => void): any;
        name: string;
        parameters: internal.IList<IAppServiceActionParameter>;
    }
    class AppServiceAction extends internal.Element implements IAppServiceAction {
        model: IModel;
        static typeName: string;
        container: ConsumedAppService;
        private __name;
        name: string;
        private __caption;
        caption: string;
        private __description;
        description: string;
        private __parameters;
        parameters: internal.IList<AppServiceActionParameter>;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __returnType;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        returnType: string;
        private __returnTypeCanBeEmpty;
        returnTypeCanBeEmpty: boolean;
        private __image;
        image: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ConsumedAppService): AppServiceAction;
        static create(model: IModel): AppServiceAction;
        _initializeDefaultProperties(): void;
    }
    interface IAppServiceActionParameter extends internal.IElement {
        model: IModel;
        container: IAppServiceAction;
        load(): AppServiceActionParameter;
        load(callback: (element: AppServiceActionParameter) => void): any;
        name: string;
    }
    class AppServiceActionParameter extends internal.Element implements IAppServiceActionParameter {
        model: IModel;
        static typeName: string;
        container: AppServiceAction;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        private __canBeEmpty;
        canBeEmpty: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AppServiceAction): AppServiceActionParameter;
        static create(model: IModel): AppServiceActionParameter;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Consumed+App+Services relevant section in reference guide}
     */
    interface IConsumedAppService extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): ConsumedAppService;
        load(callback: (element: ConsumedAppService) => void): any;
        actions: internal.IList<IAppServiceAction>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Consumed+App+Services relevant section in reference guide}
     */
    class ConsumedAppService extends projects.Document implements IConsumedAppService {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __actions;
        actions: internal.IList<AppServiceAction>;
        private __msd;
        msd: Msd;
        private __fromAppStore;
        fromAppStore: boolean;
        private __appStoreGuid;
        appStoreGuid: string;
        private __appStoreVersionGuid;
        appStoreVersionGuid: string;
        private __appStoreVersion;
        appStoreVersion: string;
        private __appServiceLocation;
        appServiceLocation: AppServiceLocationEnum;
        private __locationConstant;
        locationConstant: constants.IConstant;
        locationConstantQualifiedName: string;
        private __useTimeOut;
        useTimeOut: boolean;
        private __timeOut;
        timeOut: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new ConsumedAppService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): ConsumedAppService;
        _initializeDefaultProperties(): void;
    }
    interface IMsd extends internal.IElement {
        model: IModel;
        container: IConsumedAppService;
        load(): Msd;
        load(callback: (element: Msd) => void): any;
    }
    class Msd extends internal.Element implements IMsd {
        model: IModel;
        static typeName: string;
        container: ConsumedAppService;
        private __version;
        version: MsdVersion;
        private __metadata;
        metadata: MsdMetadata;
        private __domainModel;
        domainModel: MsdDomainModel;
        private __enumerations;
        enumerations: MsdEnumerationContainer;
        private __wsdlDescription;
        wsdlDescription: webservices.WsdlDescription;
        private __wsdl;
        wsdl: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ConsumedAppService): Msd;
        static create(model: IModel): Msd;
        _initializeDefaultProperties(): void;
    }
    interface IMsdAssociation extends internal.IElement {
        model: IModel;
        load(): MsdAssociation;
        load(callback: (element: MsdAssociation) => void): any;
    }
    class MsdAssociation extends internal.Element implements IMsdAssociation {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        private __guid;
        guid: string;
        private __parentEntityName;
        parentEntityName: string;
        private __childEntityName;
        childEntityName: string;
        private __associationType;
        associationType: string;
        private __associationOwner;
        associationOwner: string;
        private __parentDeleteBehavior;
        parentDeleteBehavior: string;
        private __childDeleteBehavior;
        childDeleteBehavior: string;
        private __associationKind;
        associationKind: string;
        private __parentX;
        parentX: number;
        private __parentY;
        parentY: number;
        private __childX;
        childX: number;
        private __childY;
        childY: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MsdAssociation;
        _initializeDefaultProperties(): void;
    }
    interface IMsdAttribute extends internal.IElement {
        model: IModel;
        load(): MsdAttribute;
        load(callback: (element: MsdAttribute) => void): any;
    }
    class MsdAttribute extends internal.Element implements IMsdAttribute {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        private __guid;
        guid: string;
        private __attributeType;
        attributeType: string;
        private __enumerationName;
        enumerationName: string;
        private __defaultValue;
        defaultValue: string;
        private __length;
        length: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MsdAttribute;
        _initializeDefaultProperties(): void;
    }
    interface IMsdDomainModel extends internal.IElement {
        model: IModel;
        container: IMsd;
        load(): MsdDomainModel;
        load(callback: (element: MsdDomainModel) => void): any;
    }
    class MsdDomainModel extends internal.Element implements IMsdDomainModel {
        model: IModel;
        static typeName: string;
        container: Msd;
        private __entities;
        entities: internal.IList<MsdEntity>;
        private __associations;
        associations: internal.IList<MsdAssociation>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Msd): MsdDomainModel;
        static create(model: IModel): MsdDomainModel;
        _initializeDefaultProperties(): void;
    }
    interface IMsdEntity extends internal.IElement {
        model: IModel;
        container: IMsdDomainModel;
        load(): MsdEntity;
        load(callback: (element: MsdEntity) => void): any;
    }
    class MsdEntity extends internal.Element implements IMsdEntity {
        model: IModel;
        static typeName: string;
        container: MsdDomainModel;
        private __name;
        name: string;
        private __guid;
        guid: string;
        private __generalizationName;
        generalizationName: string;
        private __persistable;
        persistable: boolean;
        private __locationX;
        locationX: number;
        private __locationY;
        locationY: number;
        private __attributes;
        attributes: internal.IList<MsdAttribute>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MsdDomainModel): MsdEntity;
        static create(model: IModel): MsdEntity;
        _initializeDefaultProperties(): void;
    }
    interface IMsdEnumeration extends internal.IElement {
        model: IModel;
        container: IMsdEnumerationContainer;
        load(): MsdEnumeration;
        load(callback: (element: MsdEnumeration) => void): any;
    }
    class MsdEnumeration extends internal.Element implements IMsdEnumeration {
        model: IModel;
        static typeName: string;
        container: MsdEnumerationContainer;
        private __name;
        name: string;
        private __guid;
        guid: string;
        private __values;
        values: internal.IList<MsdEnumerationValue>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MsdEnumerationContainer): MsdEnumeration;
        static create(model: IModel): MsdEnumeration;
        _initializeDefaultProperties(): void;
    }
    interface IMsdEnumerationContainer extends internal.IElement {
        model: IModel;
        load(): MsdEnumerationContainer;
        load(callback: (element: MsdEnumerationContainer) => void): any;
    }
    class MsdEnumerationContainer extends internal.Element implements IMsdEnumerationContainer {
        model: IModel;
        static typeName: string;
        private __enumerations;
        enumerations: internal.IList<MsdEnumeration>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MsdEnumerationContainer;
        _initializeDefaultProperties(): void;
    }
    interface IMsdEnumerationValue extends internal.IElement {
        model: IModel;
        container: IMsdEnumeration;
        load(): MsdEnumerationValue;
        load(callback: (element: MsdEnumerationValue) => void): any;
    }
    class MsdEnumerationValue extends internal.Element implements IMsdEnumerationValue {
        model: IModel;
        static typeName: string;
        container: MsdEnumeration;
        private __name;
        name: string;
        private __guid;
        guid: string;
        private __translations;
        translations: internal.IList<MsdText>;
        private __image;
        image: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MsdEnumeration): MsdEnumerationValue;
        static create(model: IModel): MsdEnumerationValue;
        _initializeDefaultProperties(): void;
    }
    interface IMsdMetadata extends internal.IElement {
        model: IModel;
        container: IMsd;
        load(): MsdMetadata;
        load(callback: (element: MsdMetadata) => void): any;
    }
    class MsdMetadata extends internal.Element implements IMsdMetadata {
        model: IModel;
        static typeName: string;
        container: Msd;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __version;
        version: number;
        private __publishDateTime;
        publishDateTime: string;
        private __serviceGuid;
        serviceGuid: string;
        private __versionGuid;
        versionGuid: string;
        private __instanceGuid;
        instanceGuid: string;
        private __supportedProtocols;
        supportedProtocols: internal.IList<string>;
        private __headerAuthentication;
        headerAuthentication: string;
        private __microflows;
        microflows: internal.IList<MsdMicroflow>;
        private __caption;
        caption: string;
        private __image;
        image: string;
        private __description;
        description: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Msd): MsdMetadata;
        static create(model: IModel): MsdMetadata;
        _initializeDefaultProperties(): void;
    }
    interface IMsdMicroflow extends internal.IElement {
        model: IModel;
        container: IMsdMetadata;
        load(): MsdMicroflow;
        load(callback: (element: MsdMicroflow) => void): any;
    }
    class MsdMicroflow extends internal.Element implements IMsdMicroflow {
        model: IModel;
        static typeName: string;
        container: MsdMetadata;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __image;
        image: string;
        private __description;
        description: string;
        private __parameters;
        parameters: internal.IList<MsdMicroflowParameter>;
        private __returnType;
        returnType: string;
        private __systemEntityType;
        systemEntityType: string;
        private __returnTypeSpecification;
        returnTypeSpecification: string;
        private __returnTypeCanBeEmpty;
        returnTypeCanBeEmpty: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MsdMetadata): MsdMicroflow;
        static create(model: IModel): MsdMicroflow;
        _initializeDefaultProperties(): void;
    }
    interface IMsdMicroflowParameter extends internal.IElement {
        model: IModel;
        load(): MsdMicroflowParameter;
        load(callback: (element: MsdMicroflowParameter) => void): any;
    }
    class MsdMicroflowParameter extends internal.Element implements IMsdMicroflowParameter {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        private __type;
        type: string;
        private __typeSpecification;
        typeSpecification: string;
        private __systemEntityType;
        systemEntityType: string;
        private __canBeEmpty;
        canBeEmpty: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MsdMicroflowParameter;
        _initializeDefaultProperties(): void;
    }
    interface IMsdText extends internal.IElement {
        model: IModel;
        container: IMsdEnumerationValue;
        load(): MsdText;
        load(callback: (element: MsdText) => void): any;
    }
    class MsdText extends internal.Element implements IMsdText {
        model: IModel;
        static typeName: string;
        container: MsdEnumerationValue;
        private __languageCode;
        languageCode: string;
        private __caption;
        caption: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MsdEnumerationValue): MsdText;
        static create(model: IModel): MsdText;
        _initializeDefaultProperties(): void;
    }
    interface IMsdVersion extends internal.IElement {
        model: IModel;
        container: IMsd;
        load(): MsdVersion;
        load(callback: (element: MsdVersion) => void): any;
    }
    class MsdVersion extends internal.Element implements IMsdVersion {
        model: IModel;
        static typeName: string;
        container: Msd;
        private __version;
        version: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Msd): MsdVersion;
        static create(model: IModel): MsdVersion;
        _initializeDefaultProperties(): void;
    }
}
import { constants } from './constants';
import { microflows } from './microflows';
import { webservices } from './webservices';
import { IModel } from './base-model';
