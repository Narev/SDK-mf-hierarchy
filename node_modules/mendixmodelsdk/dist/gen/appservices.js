var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var appservices;
(function (appservices) {
    var AppServiceLocationEnum = (function (_super) {
        __extends(AppServiceLocationEnum, _super);
        function AppServiceLocationEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "appservices.AppServiceLocationEnum";
        }
        AppServiceLocationEnum.Default = new AppServiceLocationEnum("Default", {});
        AppServiceLocationEnum.Constant = new AppServiceLocationEnum("Constant", {});
        AppServiceLocationEnum.Parameter = new AppServiceLocationEnum("Parameter", {});
        return AppServiceLocationEnum;
    })(internal.IEnum);
    appservices.AppServiceLocationEnum = AppServiceLocationEnum;
    var AppServiceAction = (function (_super) {
        __extends(AppServiceAction, _super);
        function AppServiceAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(AppServiceAction, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PrimitiveProperty(AppServiceAction, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(AppServiceAction, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__parameters = new internal.PartListProperty(AppServiceAction, this, "parameters", []);
            this.__microflow = new internal.ByNameReferenceProperty(AppServiceAction, this, "microflow", null, "Microflows$Microflow");
            this.__returnType = new internal.PrimitiveProperty(AppServiceAction, this, "returnType", "", internal.PrimitiveTypeEnum.String);
            this.__returnTypeCanBeEmpty = new internal.PrimitiveProperty(AppServiceAction, this, "returnTypeCanBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
            this.__image = new internal.PrimitiveProperty(AppServiceAction, this, "image", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new AppServiceAction() cannot be invoked directly, please use 'model.appservices.createAppServiceAction()'");
            this._declaredAsNamespace = true;
        }
        Object.defineProperty(AppServiceAction.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "returnTypeCanBeEmpty", {
            get: function () { return this.__returnTypeCanBeEmpty.get(); },
            set: function (newValue) { this.__returnTypeCanBeEmpty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceAction.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AppServiceAction instance in the SDK and on the server.
         * The new AppServiceAction will be automatically stored in the 'actions' property of the parent ConsumedAppService element passed as argument.
         */
        AppServiceAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceAction, "actions", true);
        };
        /*
         * Creates and returns a new AppServiceAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceAction.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceAction);
        };
        AppServiceAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.returnType = "Unknown";
        };
        AppServiceAction.typeName = "AppServices$AppServiceAction";
        AppServiceAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "parameters": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AppServiceAction;
    })(internal.Element);
    appservices.AppServiceAction = AppServiceAction;
    var AppServiceActionParameter = (function (_super) {
        __extends(AppServiceActionParameter, _super);
        function AppServiceActionParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(AppServiceActionParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(AppServiceActionParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
            this.__canBeEmpty = new internal.PrimitiveProperty(AppServiceActionParameter, this, "canBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new AppServiceActionParameter() cannot be invoked directly, please use 'model.appservices.createAppServiceActionParameter()'");
        }
        Object.defineProperty(AppServiceActionParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceActionParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceActionParameter.prototype, "canBeEmpty", {
            get: function () { return this.__canBeEmpty.get(); },
            set: function (newValue) { this.__canBeEmpty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
         * The new AppServiceActionParameter will be automatically stored in the 'parameters' property of the parent AppServiceAction element passed as argument.
         */
        AppServiceActionParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceActionParameter, "parameters", true);
        };
        /*
         * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceActionParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceActionParameter);
        };
        AppServiceActionParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
        };
        AppServiceActionParameter.typeName = "AppServices$AppServiceActionParameter";
        AppServiceActionParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AppServiceActionParameter;
    })(internal.Element);
    appservices.AppServiceActionParameter = AppServiceActionParameter;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Consumed+App+Services relevant section in reference guide}
     */
    var ConsumedAppService = (function (_super) {
        __extends(ConsumedAppService, _super);
        function ConsumedAppService(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__actions = new internal.PartListProperty(ConsumedAppService, this, "actions", []);
            this.__msd = new internal.PartProperty(ConsumedAppService, this, "msd", null, true);
            this.__fromAppStore = new internal.PrimitiveProperty(ConsumedAppService, this, "fromAppStore", false, internal.PrimitiveTypeEnum.Boolean);
            this.__appStoreGuid = new internal.PrimitiveProperty(ConsumedAppService, this, "appStoreGuid", "", internal.PrimitiveTypeEnum.String);
            this.__appStoreVersionGuid = new internal.PrimitiveProperty(ConsumedAppService, this, "appStoreVersionGuid", "", internal.PrimitiveTypeEnum.String);
            this.__appStoreVersion = new internal.PrimitiveProperty(ConsumedAppService, this, "appStoreVersion", "", internal.PrimitiveTypeEnum.String);
            this.__appServiceLocation = new internal.EnumProperty(ConsumedAppService, this, "appServiceLocation", AppServiceLocationEnum.Default, AppServiceLocationEnum);
            this.__locationConstant = new internal.ByNameReferenceProperty(ConsumedAppService, this, "locationConstant", null, "Constants$Constant");
            this.__useTimeOut = new internal.PrimitiveProperty(ConsumedAppService, this, "useTimeOut", false, internal.PrimitiveTypeEnum.Boolean);
            this.__timeOut = new internal.PrimitiveProperty(ConsumedAppService, this, "timeOut", 0, internal.PrimitiveTypeEnum.Integer);
            this._containmentName = "documents";
        }
        Object.defineProperty(ConsumedAppService.prototype, "actions", {
            get: function () { return this.__actions.get(); },
            set: function (newValue) { this.__actions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "msd", {
            get: function () { return this.__msd.get(); },
            set: function (newValue) { this.__msd.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "fromAppStore", {
            get: function () { return this.__fromAppStore.get(); },
            set: function (newValue) { this.__fromAppStore.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "appStoreGuid", {
            get: function () { return this.__appStoreGuid.get(); },
            set: function (newValue) { this.__appStoreGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "appStoreVersionGuid", {
            get: function () { return this.__appStoreVersionGuid.get(); },
            set: function (newValue) { this.__appStoreVersionGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "appStoreVersion", {
            get: function () { return this.__appStoreVersion.get(); },
            set: function (newValue) { this.__appStoreVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "appServiceLocation", {
            get: function () { return this.__appServiceLocation.get(); },
            set: function (newValue) { this.__appServiceLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "locationConstant", {
            get: function () { return this.__locationConstant.get(); },
            set: function (newValue) { this.__locationConstant.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "locationConstantQualifiedName", {
            get: function () { return this.__locationConstant.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "useTimeOut", {
            get: function () { return this.__useTimeOut.get(); },
            set: function (newValue) { this.__useTimeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConsumedAppService.prototype, "timeOut", {
            get: function () { return this.__timeOut.get(); },
            set: function (newValue) { this.__timeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ConsumedAppService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        ConsumedAppService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ConsumedAppService);
        };
        ConsumedAppService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.msd = Msd.create(this.model);
            this.appServiceLocation = AppServiceLocationEnum.Default;
            this.timeOut = 30;
        };
        ConsumedAppService.typeName = "AppServices$ConsumedAppService";
        ConsumedAppService.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "actions": {
                    "public": {
                        "currentValue": true
                    }
                },
                "msd": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return ConsumedAppService;
    })(projects_1.projects.Document);
    appservices.ConsumedAppService = ConsumedAppService;
    var Msd = (function (_super) {
        __extends(Msd, _super);
        function Msd(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__version = new internal.PartProperty(Msd, this, "version", null, true);
            this.__metadata = new internal.PartProperty(Msd, this, "metadata", null, true);
            this.__domainModel = new internal.PartProperty(Msd, this, "domainModel", null, true);
            this.__enumerations = new internal.PartProperty(Msd, this, "enumerations", null, true);
            this.__wsdlDescription = new internal.PartProperty(Msd, this, "wsdlDescription", null, true);
            this.__wsdl = new internal.PrimitiveProperty(Msd, this, "wsdl", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Msd() cannot be invoked directly, please use 'model.appservices.createMsd()'");
        }
        Object.defineProperty(Msd.prototype, "version", {
            get: function () { return this.__version.get(); },
            set: function (newValue) { this.__version.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Msd.prototype, "metadata", {
            get: function () { return this.__metadata.get(); },
            set: function (newValue) { this.__metadata.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Msd.prototype, "domainModel", {
            get: function () { return this.__domainModel.get(); },
            set: function (newValue) { this.__domainModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Msd.prototype, "enumerations", {
            get: function () { return this.__enumerations.get(); },
            set: function (newValue) { this.__enumerations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Msd.prototype, "wsdlDescription", {
            get: function () { return this.__wsdlDescription.get(); },
            set: function (newValue) { this.__wsdlDescription.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Msd.prototype, "wsdl", {
            get: function () { return this.__wsdl.get(); },
            set: function (newValue) { this.__wsdl.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Msd instance in the SDK and on the server.
         * The new Msd will be automatically stored in the 'msd' property of the parent ConsumedAppService element passed as argument.
         */
        Msd.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Msd, "msd", false);
        };
        /*
         * Creates and returns a new Msd instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Msd.create = function (model) {
            return internal.instancehelpers.createElement(model, Msd);
        };
        Msd.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.version = MsdVersion.create(this.model);
            this.metadata = MsdMetadata.create(this.model);
            this.domainModel = MsdDomainModel.create(this.model);
            this.enumerations = MsdEnumerationContainer.create(this.model);
            this.wsdlDescription = webservices_1.webservices.WsdlDescription.create(this.model);
        };
        Msd.typeName = "AppServices$Msd";
        Msd.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "version": {
                    "required": {
                        "currentValue": true
                    }
                },
                "metadata": {
                    "required": {
                        "currentValue": true
                    }
                },
                "domainModel": {
                    "required": {
                        "currentValue": true
                    }
                },
                "enumerations": {
                    "required": {
                        "currentValue": true
                    }
                },
                "wsdlDescription": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Msd;
    })(internal.Element);
    appservices.Msd = Msd;
    var MsdAssociation = (function (_super) {
        __extends(MsdAssociation, _super);
        function MsdAssociation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdAssociation, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__guid = new internal.PrimitiveProperty(MsdAssociation, this, "guid", "", internal.PrimitiveTypeEnum.String);
            this.__parentEntityName = new internal.PrimitiveProperty(MsdAssociation, this, "parentEntityName", "", internal.PrimitiveTypeEnum.String);
            this.__childEntityName = new internal.PrimitiveProperty(MsdAssociation, this, "childEntityName", "", internal.PrimitiveTypeEnum.String);
            this.__associationType = new internal.PrimitiveProperty(MsdAssociation, this, "associationType", "", internal.PrimitiveTypeEnum.String);
            this.__associationOwner = new internal.PrimitiveProperty(MsdAssociation, this, "associationOwner", "", internal.PrimitiveTypeEnum.String);
            this.__parentDeleteBehavior = new internal.PrimitiveProperty(MsdAssociation, this, "parentDeleteBehavior", "", internal.PrimitiveTypeEnum.String);
            this.__childDeleteBehavior = new internal.PrimitiveProperty(MsdAssociation, this, "childDeleteBehavior", "", internal.PrimitiveTypeEnum.String);
            this.__associationKind = new internal.PrimitiveProperty(MsdAssociation, this, "associationKind", "", internal.PrimitiveTypeEnum.String);
            this.__parentX = new internal.PrimitiveProperty(MsdAssociation, this, "parentX", 0, internal.PrimitiveTypeEnum.Integer);
            this.__parentY = new internal.PrimitiveProperty(MsdAssociation, this, "parentY", 0, internal.PrimitiveTypeEnum.Integer);
            this.__childX = new internal.PrimitiveProperty(MsdAssociation, this, "childX", 0, internal.PrimitiveTypeEnum.Integer);
            this.__childY = new internal.PrimitiveProperty(MsdAssociation, this, "childY", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new MsdAssociation() cannot be invoked directly, please use 'model.appservices.createMsdAssociation()'");
        }
        Object.defineProperty(MsdAssociation.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "guid", {
            get: function () { return this.__guid.get(); },
            set: function (newValue) { this.__guid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "parentEntityName", {
            get: function () { return this.__parentEntityName.get(); },
            set: function (newValue) { this.__parentEntityName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "childEntityName", {
            get: function () { return this.__childEntityName.get(); },
            set: function (newValue) { this.__childEntityName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "associationType", {
            get: function () { return this.__associationType.get(); },
            set: function (newValue) { this.__associationType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "associationOwner", {
            get: function () { return this.__associationOwner.get(); },
            set: function (newValue) { this.__associationOwner.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "parentDeleteBehavior", {
            get: function () { return this.__parentDeleteBehavior.get(); },
            set: function (newValue) { this.__parentDeleteBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "childDeleteBehavior", {
            get: function () { return this.__childDeleteBehavior.get(); },
            set: function (newValue) { this.__childDeleteBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "associationKind", {
            get: function () { return this.__associationKind.get(); },
            set: function (newValue) { this.__associationKind.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "parentX", {
            get: function () { return this.__parentX.get(); },
            set: function (newValue) { this.__parentX.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "parentY", {
            get: function () { return this.__parentY.get(); },
            set: function (newValue) { this.__parentY.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "childX", {
            get: function () { return this.__childX.get(); },
            set: function (newValue) { this.__childX.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAssociation.prototype, "childY", {
            get: function () { return this.__childY.get(); },
            set: function (newValue) { this.__childY.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdAssociation.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdAssociation);
        };
        MsdAssociation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdAssociation.typeName = "AppServices$MsdAssociation";
        MsdAssociation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdAssociation;
    })(internal.Element);
    appservices.MsdAssociation = MsdAssociation;
    var MsdAttribute = (function (_super) {
        __extends(MsdAttribute, _super);
        function MsdAttribute(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdAttribute, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__guid = new internal.PrimitiveProperty(MsdAttribute, this, "guid", "", internal.PrimitiveTypeEnum.String);
            this.__attributeType = new internal.PrimitiveProperty(MsdAttribute, this, "attributeType", "", internal.PrimitiveTypeEnum.String);
            this.__enumerationName = new internal.PrimitiveProperty(MsdAttribute, this, "enumerationName", "", internal.PrimitiveTypeEnum.String);
            this.__defaultValue = new internal.PrimitiveProperty(MsdAttribute, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            this.__length = new internal.PrimitiveProperty(MsdAttribute, this, "length", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new MsdAttribute() cannot be invoked directly, please use 'model.appservices.createMsdAttribute()'");
        }
        Object.defineProperty(MsdAttribute.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAttribute.prototype, "guid", {
            get: function () { return this.__guid.get(); },
            set: function (newValue) { this.__guid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAttribute.prototype, "attributeType", {
            get: function () { return this.__attributeType.get(); },
            set: function (newValue) { this.__attributeType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAttribute.prototype, "enumerationName", {
            get: function () { return this.__enumerationName.get(); },
            set: function (newValue) { this.__enumerationName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAttribute.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdAttribute.prototype, "length", {
            get: function () { return this.__length.get(); },
            set: function (newValue) { this.__length.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdAttribute.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdAttribute);
        };
        MsdAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdAttribute.typeName = "AppServices$MsdAttribute";
        MsdAttribute.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdAttribute;
    })(internal.Element);
    appservices.MsdAttribute = MsdAttribute;
    var MsdDomainModel = (function (_super) {
        __extends(MsdDomainModel, _super);
        function MsdDomainModel(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entities = new internal.PartListProperty(MsdDomainModel, this, "entities", []);
            this.__associations = new internal.PartListProperty(MsdDomainModel, this, "associations", []);
            if (arguments.length < 4)
                throw new Error("new MsdDomainModel() cannot be invoked directly, please use 'model.appservices.createMsdDomainModel()'");
        }
        Object.defineProperty(MsdDomainModel.prototype, "entities", {
            get: function () { return this.__entities.get(); },
            set: function (newValue) { this.__entities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdDomainModel.prototype, "associations", {
            get: function () { return this.__associations.get(); },
            set: function (newValue) { this.__associations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
         * The new MsdDomainModel will be automatically stored in the 'domainModel' property of the parent Msd element passed as argument.
         */
        MsdDomainModel.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdDomainModel, "domainModel", false);
        };
        /*
         * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdDomainModel.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdDomainModel);
        };
        MsdDomainModel.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdDomainModel.typeName = "AppServices$MsdDomainModel";
        MsdDomainModel.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdDomainModel;
    })(internal.Element);
    appservices.MsdDomainModel = MsdDomainModel;
    var MsdEntity = (function (_super) {
        __extends(MsdEntity, _super);
        function MsdEntity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdEntity, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__guid = new internal.PrimitiveProperty(MsdEntity, this, "guid", "", internal.PrimitiveTypeEnum.String);
            this.__generalizationName = new internal.PrimitiveProperty(MsdEntity, this, "generalizationName", "", internal.PrimitiveTypeEnum.String);
            this.__persistable = new internal.PrimitiveProperty(MsdEntity, this, "persistable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__locationX = new internal.PrimitiveProperty(MsdEntity, this, "locationX", 0, internal.PrimitiveTypeEnum.Integer);
            this.__locationY = new internal.PrimitiveProperty(MsdEntity, this, "locationY", 0, internal.PrimitiveTypeEnum.Integer);
            this.__attributes = new internal.PartListProperty(MsdEntity, this, "attributes", []);
            if (arguments.length < 4)
                throw new Error("new MsdEntity() cannot be invoked directly, please use 'model.appservices.createMsdEntity()'");
        }
        Object.defineProperty(MsdEntity.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "guid", {
            get: function () { return this.__guid.get(); },
            set: function (newValue) { this.__guid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "generalizationName", {
            get: function () { return this.__generalizationName.get(); },
            set: function (newValue) { this.__generalizationName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "persistable", {
            get: function () { return this.__persistable.get(); },
            set: function (newValue) { this.__persistable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "locationX", {
            get: function () { return this.__locationX.get(); },
            set: function (newValue) { this.__locationX.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "locationY", {
            get: function () { return this.__locationY.get(); },
            set: function (newValue) { this.__locationY.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEntity.prototype, "attributes", {
            get: function () { return this.__attributes.get(); },
            set: function (newValue) { this.__attributes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdEntity instance in the SDK and on the server.
         * The new MsdEntity will be automatically stored in the 'entities' property of the parent MsdDomainModel element passed as argument.
         */
        MsdEntity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdEntity, "entities", true);
        };
        /*
         * Creates and returns a new MsdEntity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdEntity.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdEntity);
        };
        MsdEntity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdEntity.typeName = "AppServices$MsdEntity";
        MsdEntity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdEntity;
    })(internal.Element);
    appservices.MsdEntity = MsdEntity;
    var MsdEnumeration = (function (_super) {
        __extends(MsdEnumeration, _super);
        function MsdEnumeration(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdEnumeration, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__guid = new internal.PrimitiveProperty(MsdEnumeration, this, "guid", "", internal.PrimitiveTypeEnum.String);
            this.__values = new internal.PartListProperty(MsdEnumeration, this, "values", []);
            if (arguments.length < 4)
                throw new Error("new MsdEnumeration() cannot be invoked directly, please use 'model.appservices.createMsdEnumeration()'");
        }
        Object.defineProperty(MsdEnumeration.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEnumeration.prototype, "guid", {
            get: function () { return this.__guid.get(); },
            set: function (newValue) { this.__guid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEnumeration.prototype, "values", {
            get: function () { return this.__values.get(); },
            set: function (newValue) { this.__values.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
         * The new MsdEnumeration will be automatically stored in the 'enumerations' property of the parent MsdEnumerationContainer element passed as argument.
         */
        MsdEnumeration.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdEnumeration, "enumerations", true);
        };
        /*
         * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdEnumeration.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdEnumeration);
        };
        MsdEnumeration.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdEnumeration.typeName = "AppServices$MsdEnumeration";
        MsdEnumeration.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdEnumeration;
    })(internal.Element);
    appservices.MsdEnumeration = MsdEnumeration;
    var MsdEnumerationContainer = (function (_super) {
        __extends(MsdEnumerationContainer, _super);
        function MsdEnumerationContainer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__enumerations = new internal.PartListProperty(MsdEnumerationContainer, this, "enumerations", []);
            if (arguments.length < 4)
                throw new Error("new MsdEnumerationContainer() cannot be invoked directly, please use 'model.appservices.createMsdEnumerationContainer()'");
        }
        Object.defineProperty(MsdEnumerationContainer.prototype, "enumerations", {
            get: function () { return this.__enumerations.get(); },
            set: function (newValue) { this.__enumerations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdEnumerationContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdEnumerationContainer);
        };
        MsdEnumerationContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdEnumerationContainer.typeName = "AppServices$MsdEnumerationContainer";
        MsdEnumerationContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdEnumerationContainer;
    })(internal.Element);
    appservices.MsdEnumerationContainer = MsdEnumerationContainer;
    var MsdEnumerationValue = (function (_super) {
        __extends(MsdEnumerationValue, _super);
        function MsdEnumerationValue(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdEnumerationValue, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__guid = new internal.PrimitiveProperty(MsdEnumerationValue, this, "guid", "", internal.PrimitiveTypeEnum.String);
            this.__translations = new internal.PartListProperty(MsdEnumerationValue, this, "translations", []);
            this.__image = new internal.PrimitiveProperty(MsdEnumerationValue, this, "image", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MsdEnumerationValue() cannot be invoked directly, please use 'model.appservices.createMsdEnumerationValue()'");
        }
        Object.defineProperty(MsdEnumerationValue.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEnumerationValue.prototype, "guid", {
            get: function () { return this.__guid.get(); },
            set: function (newValue) { this.__guid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEnumerationValue.prototype, "translations", {
            get: function () { return this.__translations.get(); },
            set: function (newValue) { this.__translations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdEnumerationValue.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
         * The new MsdEnumerationValue will be automatically stored in the 'values' property of the parent MsdEnumeration element passed as argument.
         */
        MsdEnumerationValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdEnumerationValue, "values", true);
        };
        /*
         * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdEnumerationValue.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdEnumerationValue);
        };
        MsdEnumerationValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdEnumerationValue.typeName = "AppServices$MsdEnumerationValue";
        MsdEnumerationValue.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdEnumerationValue;
    })(internal.Element);
    appservices.MsdEnumerationValue = MsdEnumerationValue;
    var MsdMetadata = (function (_super) {
        __extends(MsdMetadata, _super);
        function MsdMetadata(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdMetadata, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(MsdMetadata, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__version = new internal.PrimitiveProperty(MsdMetadata, this, "version", 0, internal.PrimitiveTypeEnum.Integer);
            this.__publishDateTime = new internal.PrimitiveProperty(MsdMetadata, this, "publishDateTime", "", internal.PrimitiveTypeEnum.String);
            this.__serviceGuid = new internal.PrimitiveProperty(MsdMetadata, this, "serviceGuid", "", internal.PrimitiveTypeEnum.String);
            this.__versionGuid = new internal.PrimitiveProperty(MsdMetadata, this, "versionGuid", "", internal.PrimitiveTypeEnum.String);
            this.__instanceGuid = new internal.PrimitiveProperty(MsdMetadata, this, "instanceGuid", "", internal.PrimitiveTypeEnum.String);
            this.__supportedProtocols = new internal.PrimitiveListProperty(MsdMetadata, this, "supportedProtocols", [], internal.PrimitiveTypeEnum.String);
            this.__headerAuthentication = new internal.PrimitiveProperty(MsdMetadata, this, "headerAuthentication", "", internal.PrimitiveTypeEnum.String);
            this.__microflows = new internal.PartListProperty(MsdMetadata, this, "microflows", []);
            this.__caption = new internal.PrimitiveProperty(MsdMetadata, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__image = new internal.PrimitiveProperty(MsdMetadata, this, "image", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(MsdMetadata, this, "description", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MsdMetadata() cannot be invoked directly, please use 'model.appservices.createMsdMetadata()'");
        }
        Object.defineProperty(MsdMetadata.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "version", {
            get: function () { return this.__version.get(); },
            set: function (newValue) { this.__version.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "publishDateTime", {
            get: function () { return this.__publishDateTime.get(); },
            set: function (newValue) { this.__publishDateTime.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "serviceGuid", {
            get: function () { return this.__serviceGuid.get(); },
            set: function (newValue) { this.__serviceGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "versionGuid", {
            get: function () { return this.__versionGuid.get(); },
            set: function (newValue) { this.__versionGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "instanceGuid", {
            get: function () { return this.__instanceGuid.get(); },
            set: function (newValue) { this.__instanceGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "supportedProtocols", {
            get: function () { return this.__supportedProtocols.get(); },
            set: function (newValue) { this.__supportedProtocols.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "headerAuthentication", {
            get: function () { return this.__headerAuthentication.get(); },
            set: function (newValue) { this.__headerAuthentication.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "microflows", {
            get: function () { return this.__microflows.get(); },
            set: function (newValue) { this.__microflows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMetadata.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdMetadata instance in the SDK and on the server.
         * The new MsdMetadata will be automatically stored in the 'metadata' property of the parent Msd element passed as argument.
         */
        MsdMetadata.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdMetadata, "metadata", false);
        };
        /*
         * Creates and returns a new MsdMetadata instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdMetadata.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdMetadata);
        };
        MsdMetadata.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdMetadata.typeName = "AppServices$MsdMetadata";
        MsdMetadata.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdMetadata;
    })(internal.Element);
    appservices.MsdMetadata = MsdMetadata;
    var MsdMicroflow = (function (_super) {
        __extends(MsdMicroflow, _super);
        function MsdMicroflow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdMicroflow, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(MsdMicroflow, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__image = new internal.PrimitiveProperty(MsdMicroflow, this, "image", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(MsdMicroflow, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__parameters = new internal.PartListProperty(MsdMicroflow, this, "parameters", []);
            this.__returnType = new internal.PrimitiveProperty(MsdMicroflow, this, "returnType", "", internal.PrimitiveTypeEnum.String);
            this.__systemEntityType = new internal.PrimitiveProperty(MsdMicroflow, this, "systemEntityType", "", internal.PrimitiveTypeEnum.String);
            this.__returnTypeSpecification = new internal.PrimitiveProperty(MsdMicroflow, this, "returnTypeSpecification", "", internal.PrimitiveTypeEnum.String);
            this.__returnTypeCanBeEmpty = new internal.PrimitiveProperty(MsdMicroflow, this, "returnTypeCanBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new MsdMicroflow() cannot be invoked directly, please use 'model.appservices.createMsdMicroflow()'");
        }
        Object.defineProperty(MsdMicroflow.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "returnType", {
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "systemEntityType", {
            get: function () { return this.__systemEntityType.get(); },
            set: function (newValue) { this.__systemEntityType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "returnTypeSpecification", {
            get: function () { return this.__returnTypeSpecification.get(); },
            set: function (newValue) { this.__returnTypeSpecification.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflow.prototype, "returnTypeCanBeEmpty", {
            get: function () { return this.__returnTypeCanBeEmpty.get(); },
            set: function (newValue) { this.__returnTypeCanBeEmpty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
         * The new MsdMicroflow will be automatically stored in the 'microflows' property of the parent MsdMetadata element passed as argument.
         */
        MsdMicroflow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdMicroflow, "microflows", true);
        };
        /*
         * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdMicroflow.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdMicroflow);
        };
        MsdMicroflow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdMicroflow.typeName = "AppServices$MsdMicroflow";
        MsdMicroflow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdMicroflow;
    })(internal.Element);
    appservices.MsdMicroflow = MsdMicroflow;
    var MsdMicroflowParameter = (function (_super) {
        __extends(MsdMicroflowParameter, _super);
        function MsdMicroflowParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MsdMicroflowParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(MsdMicroflowParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
            this.__typeSpecification = new internal.PrimitiveProperty(MsdMicroflowParameter, this, "typeSpecification", "", internal.PrimitiveTypeEnum.String);
            this.__systemEntityType = new internal.PrimitiveProperty(MsdMicroflowParameter, this, "systemEntityType", "", internal.PrimitiveTypeEnum.String);
            this.__canBeEmpty = new internal.PrimitiveProperty(MsdMicroflowParameter, this, "canBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new MsdMicroflowParameter() cannot be invoked directly, please use 'model.appservices.createMsdMicroflowParameter()'");
        }
        Object.defineProperty(MsdMicroflowParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflowParameter.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflowParameter.prototype, "typeSpecification", {
            get: function () { return this.__typeSpecification.get(); },
            set: function (newValue) { this.__typeSpecification.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflowParameter.prototype, "systemEntityType", {
            get: function () { return this.__systemEntityType.get(); },
            set: function (newValue) { this.__systemEntityType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdMicroflowParameter.prototype, "canBeEmpty", {
            get: function () { return this.__canBeEmpty.get(); },
            set: function (newValue) { this.__canBeEmpty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdMicroflowParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdMicroflowParameter);
        };
        MsdMicroflowParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdMicroflowParameter.typeName = "AppServices$MsdMicroflowParameter";
        MsdMicroflowParameter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdMicroflowParameter;
    })(internal.Element);
    appservices.MsdMicroflowParameter = MsdMicroflowParameter;
    var MsdText = (function (_super) {
        __extends(MsdText, _super);
        function MsdText(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__languageCode = new internal.PrimitiveProperty(MsdText, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PrimitiveProperty(MsdText, this, "caption", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MsdText() cannot be invoked directly, please use 'model.appservices.createMsdText()'");
        }
        Object.defineProperty(MsdText.prototype, "languageCode", {
            get: function () { return this.__languageCode.get(); },
            set: function (newValue) { this.__languageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MsdText.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdText instance in the SDK and on the server.
         * The new MsdText will be automatically stored in the 'translations' property of the parent MsdEnumerationValue element passed as argument.
         */
        MsdText.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdText, "translations", true);
        };
        /*
         * Creates and returns a new MsdText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdText.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdText);
        };
        MsdText.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdText.typeName = "AppServices$MsdText";
        MsdText.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdText;
    })(internal.Element);
    appservices.MsdText = MsdText;
    var MsdVersion = (function (_super) {
        __extends(MsdVersion, _super);
        function MsdVersion(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__version = new internal.PrimitiveProperty(MsdVersion, this, "version", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new MsdVersion() cannot be invoked directly, please use 'model.appservices.createMsdVersion()'");
        }
        Object.defineProperty(MsdVersion.prototype, "version", {
            get: function () { return this.__version.get(); },
            set: function (newValue) { this.__version.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MsdVersion instance in the SDK and on the server.
         * The new MsdVersion will be automatically stored in the 'version' property of the parent Msd element passed as argument.
         */
        MsdVersion.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MsdVersion, "version", false);
        };
        /*
         * Creates and returns a new MsdVersion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MsdVersion.create = function (model) {
            return internal.instancehelpers.createElement(model, MsdVersion);
        };
        MsdVersion.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MsdVersion.typeName = "AppServices$MsdVersion";
        MsdVersion.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MsdVersion;
    })(internal.Element);
    appservices.MsdVersion = MsdVersion;
})(appservices = exports.appservices || (exports.appservices = {}));
var webservices_1 = require('./webservices');
