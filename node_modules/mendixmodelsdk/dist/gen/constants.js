var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var constants;
(function (constants) {
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Constants relevant section in reference guide}
     */
    var Constant = (function (_super) {
        __extends(Constant, _super);
        function Constant(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__dataType = new internal.PrimitiveProperty(Constant, this, "dataType", "", internal.PrimitiveTypeEnum.String);
            this.__defaultValue = new internal.PrimitiveProperty(Constant, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(Constant.prototype, "dataType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__dataType.get(); },
            set: function (newValue) { this.__dataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constant.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Constant unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Constant.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Constant);
        };
        Constant.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataType = "String";
        };
        Constant.typeName = "Constants$Constant";
        Constant.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return Constant;
    })(projects_1.projects.Document);
    constants.Constant = Constant;
})(constants = exports.constants || (exports.constants = {}));
