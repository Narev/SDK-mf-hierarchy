import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { pages } from './pages';
export declare namespace customwidgets {
    class CustomWidgetAttributeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static AutoNumber: CustomWidgetAttributeType;
        static Binary: CustomWidgetAttributeType;
        static Boolean: CustomWidgetAttributeType;
        static Currency: CustomWidgetAttributeType;
        static DateTime: CustomWidgetAttributeType;
        static Enum: CustomWidgetAttributeType;
        static Float: CustomWidgetAttributeType;
        static HashString: CustomWidgetAttributeType;
        static Integer: CustomWidgetAttributeType;
        static Long: CustomWidgetAttributeType;
        static String: CustomWidgetAttributeType;
        static Decimal: CustomWidgetAttributeType;
    }
    class IsPath extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static No: IsPath;
        static Optional: IsPath;
        static Yes: IsPath;
    }
    class PathType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: PathType;
        static Reference: PathType;
        static ReferenceSet: PathType;
    }
    class WidgetReturnTypeEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Void: WidgetReturnTypeEnum;
        static Boolean: WidgetReturnTypeEnum;
        static Integer: WidgetReturnTypeEnum;
        static Float: WidgetReturnTypeEnum;
        static DateTime: WidgetReturnTypeEnum;
        static String: WidgetReturnTypeEnum;
        static Object: WidgetReturnTypeEnum;
        static Decimal: WidgetReturnTypeEnum;
    }
    class WidgetValueTypeEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Attribute: WidgetValueTypeEnum;
        static Boolean: WidgetValueTypeEnum;
        static Entity: WidgetValueTypeEnum;
        static EntityConstraint: WidgetValueTypeEnum;
        static Enumeration: WidgetValueTypeEnum;
        static Form: WidgetValueTypeEnum;
        static Image: WidgetValueTypeEnum;
        static Integer: WidgetValueTypeEnum;
        static Microflow: WidgetValueTypeEnum;
        static Object: WidgetValueTypeEnum;
        static String: WidgetValueTypeEnum;
        static TranslatableString: WidgetValueTypeEnum;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `CustomWidgets`.
     */
    interface ICustomWidget extends pages.IWidget {
        model: IModel;
        load(): CustomWidget;
        load(callback: (element: CustomWidget) => void): any;
    }
    class CustomWidget extends pages.Widget implements ICustomWidget {
        model: IModel;
        static typeName: string;
        private __type;
        type: CustomWidgetType;
        private __object;
        object: WidgetObject;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): CustomWidget;
        _initializeDefaultProperties(): void;
    }
    interface ICustomWidgetType extends internal.IElement {
        model: IModel;
        container: ICustomWidget;
        load(): CustomWidgetType;
        load(callback: (element: CustomWidgetType) => void): any;
    }
    class CustomWidgetType extends internal.Element implements ICustomWidgetType {
        model: IModel;
        static typeName: string;
        container: CustomWidget;
        private __widgetId;
        widgetId: string;
        private __needsEntityContext;
        needsEntityContext: boolean;
        private __name;
        name: string;
        private __description;
        description: string;
        private __phoneGapEnabled;
        phoneGapEnabled: boolean;
        private __offlineCapable;
        offlineCapable: boolean;
        private __objectType;
        objectType: WidgetObjectType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: CustomWidget): CustomWidgetType;
        static create(model: IModel): CustomWidgetType;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetEnumerationValue extends internal.IElement {
        model: IModel;
        container: IWidgetValueType;
        load(): WidgetEnumerationValue;
        load(callback: (element: WidgetEnumerationValue) => void): any;
    }
    class WidgetEnumerationValue extends internal.Element implements IWidgetEnumerationValue {
        model: IModel;
        static typeName: string;
        container: WidgetValueType;
        private __key;
        key: string;
        private __caption;
        caption: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetValueType): WidgetEnumerationValue;
        static create(model: IModel): WidgetEnumerationValue;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetObject extends internal.IElement {
        model: IModel;
        load(): WidgetObject;
        load(callback: (element: WidgetObject) => void): any;
    }
    class WidgetObject extends internal.Element implements IWidgetObject {
        model: IModel;
        static typeName: string;
        private __type;
        type: WidgetObjectType;
        private __properties;
        properties: internal.IList<WidgetProperty>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): WidgetObject;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetObjectType extends internal.IElement {
        model: IModel;
        load(): WidgetObjectType;
        load(callback: (element: WidgetObjectType) => void): any;
    }
    class WidgetObjectType extends internal.Element implements IWidgetObjectType {
        model: IModel;
        static typeName: string;
        private __propertyTypes;
        propertyTypes: internal.IList<WidgetPropertyType>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): WidgetObjectType;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetProperty extends internal.IElement {
        model: IModel;
        container: IWidgetObject;
        load(): WidgetProperty;
        load(callback: (element: WidgetProperty) => void): any;
    }
    class WidgetProperty extends internal.Element implements IWidgetProperty {
        model: IModel;
        static typeName: string;
        container: WidgetObject;
        private __type;
        type: WidgetPropertyType;
        private __value;
        value: WidgetValue;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetObject): WidgetProperty;
        static create(model: IModel): WidgetProperty;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetPropertyType extends internal.IElement {
        model: IModel;
        container: IWidgetObjectType;
        load(): WidgetPropertyType;
        load(callback: (element: WidgetPropertyType) => void): any;
    }
    class WidgetPropertyType extends internal.Element implements IWidgetPropertyType {
        model: IModel;
        static typeName: string;
        container: WidgetObjectType;
        private __key;
        key: string;
        private __category;
        category: string;
        private __caption;
        caption: string;
        private __description;
        description: string;
        private __isDefault;
        isDefault: boolean;
        private __valueType;
        valueType: WidgetValueType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetObjectType): WidgetPropertyType;
        static create(model: IModel): WidgetPropertyType;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetReturnType extends internal.IElement {
        model: IModel;
        container: IWidgetValueType;
        load(): WidgetReturnType;
        load(callback: (element: WidgetReturnType) => void): any;
    }
    class WidgetReturnType extends internal.Element implements IWidgetReturnType {
        model: IModel;
        static typeName: string;
        container: WidgetValueType;
        private __type;
        type: WidgetReturnTypeEnum;
        private __isList;
        isList: boolean;
        private __entityProperty;
        entityProperty: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetValueType): WidgetReturnType;
        static create(model: IModel): WidgetReturnType;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetTranslation extends internal.IElement {
        model: IModel;
        container: IWidgetValueType;
        load(): WidgetTranslation;
        load(callback: (element: WidgetTranslation) => void): any;
    }
    class WidgetTranslation extends internal.Element implements IWidgetTranslation {
        model: IModel;
        static typeName: string;
        container: WidgetValueType;
        private __languageCode;
        languageCode: string;
        private __text;
        text: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetValueType): WidgetTranslation;
        static create(model: IModel): WidgetTranslation;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetValue extends internal.IElement {
        model: IModel;
        container: IWidgetProperty;
        load(): WidgetValue;
        load(callback: (element: WidgetValue) => void): any;
    }
    class WidgetValue extends internal.Element implements IWidgetValue {
        model: IModel;
        static typeName: string;
        container: WidgetProperty;
        private __type;
        type: WidgetValueType;
        private __primitiveValue;
        primitiveValue: string;
        private __entityPath;
        /**
         * The value of this property is conceptually of type Paths$EntityPath.
         */
        entityPath: string;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __page;
        page: pages.IPage;
        pageQualifiedName: string;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        private __translatableValue;
        translatableValue: texts.Text;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __objects;
        objects: internal.IList<WidgetObject>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetProperty): WidgetValue;
        static create(model: IModel): WidgetValue;
        _initializeDefaultProperties(): void;
    }
    interface IWidgetValueType extends internal.IElement {
        model: IModel;
        container: IWidgetPropertyType;
        load(): WidgetValueType;
        load(callback: (element: WidgetValueType) => void): any;
    }
    class WidgetValueType extends internal.Element implements IWidgetValueType {
        model: IModel;
        static typeName: string;
        container: WidgetPropertyType;
        private __type;
        type: WidgetValueTypeEnum;
        private __isList;
        isList: boolean;
        private __entityProperty;
        entityProperty: string;
        private __allowNonPersistableEntities;
        allowNonPersistableEntities: boolean;
        private __isPath;
        isPath: IsPath;
        private __pathType;
        pathType: PathType;
        private __parameterIsList;
        parameterIsList: boolean;
        private __multiline;
        multiline: boolean;
        private __defaultValue;
        defaultValue: string;
        private __required;
        required: boolean;
        private __attributeTypes;
        attributeTypes: internal.IList<CustomWidgetAttributeType>;
        private __enumerationValues;
        enumerationValues: internal.IList<WidgetEnumerationValue>;
        private __objectType;
        objectType: WidgetObjectType;
        private __returnType;
        returnType: WidgetReturnType;
        private __translations;
        translations: internal.IList<WidgetTranslation>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WidgetPropertyType): WidgetValueType;
        static create(model: IModel): WidgetValueType;
        _initializeDefaultProperties(): void;
    }
}
import { images } from './images';
import { microflows } from './microflows';
import { texts } from './texts';
import { IModel } from './base-model';
