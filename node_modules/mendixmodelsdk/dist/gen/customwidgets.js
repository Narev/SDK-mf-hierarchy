var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require('./pages');
var customwidgets;
(function (customwidgets) {
    var CustomWidgetAttributeType = (function (_super) {
        __extends(CustomWidgetAttributeType, _super);
        function CustomWidgetAttributeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "customwidgets.CustomWidgetAttributeType";
        }
        CustomWidgetAttributeType.AutoNumber = new CustomWidgetAttributeType("AutoNumber", {});
        CustomWidgetAttributeType.Binary = new CustomWidgetAttributeType("Binary", {});
        CustomWidgetAttributeType.Boolean = new CustomWidgetAttributeType("Boolean", {});
        CustomWidgetAttributeType.Currency = new CustomWidgetAttributeType("Currency", {});
        CustomWidgetAttributeType.DateTime = new CustomWidgetAttributeType("DateTime", {});
        CustomWidgetAttributeType.Enum = new CustomWidgetAttributeType("Enum", {});
        CustomWidgetAttributeType.Float = new CustomWidgetAttributeType("Float", {});
        CustomWidgetAttributeType.HashString = new CustomWidgetAttributeType("HashString", {});
        CustomWidgetAttributeType.Integer = new CustomWidgetAttributeType("Integer", {});
        CustomWidgetAttributeType.Long = new CustomWidgetAttributeType("Long", {});
        CustomWidgetAttributeType.String = new CustomWidgetAttributeType("String", {});
        CustomWidgetAttributeType.Decimal = new CustomWidgetAttributeType("Decimal", {});
        return CustomWidgetAttributeType;
    })(internal.IEnum);
    customwidgets.CustomWidgetAttributeType = CustomWidgetAttributeType;
    var IsPath = (function (_super) {
        __extends(IsPath, _super);
        function IsPath() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "customwidgets.IsPath";
        }
        IsPath.No = new IsPath("No", {});
        IsPath.Optional = new IsPath("Optional", {});
        IsPath.Yes = new IsPath("Yes", {});
        return IsPath;
    })(internal.IEnum);
    customwidgets.IsPath = IsPath;
    var PathType = (function (_super) {
        __extends(PathType, _super);
        function PathType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "customwidgets.PathType";
        }
        PathType.None = new PathType("None", {});
        PathType.Reference = new PathType("Reference", {});
        PathType.ReferenceSet = new PathType("ReferenceSet", {});
        return PathType;
    })(internal.IEnum);
    customwidgets.PathType = PathType;
    var WidgetReturnTypeEnum = (function (_super) {
        __extends(WidgetReturnTypeEnum, _super);
        function WidgetReturnTypeEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "customwidgets.WidgetReturnTypeEnum";
        }
        WidgetReturnTypeEnum.Void = new WidgetReturnTypeEnum("Void", {});
        WidgetReturnTypeEnum.Boolean = new WidgetReturnTypeEnum("Boolean", {});
        WidgetReturnTypeEnum.Integer = new WidgetReturnTypeEnum("Integer", {});
        WidgetReturnTypeEnum.Float = new WidgetReturnTypeEnum("Float", {});
        WidgetReturnTypeEnum.DateTime = new WidgetReturnTypeEnum("DateTime", {});
        WidgetReturnTypeEnum.String = new WidgetReturnTypeEnum("String", {});
        WidgetReturnTypeEnum.Object = new WidgetReturnTypeEnum("Object", {});
        WidgetReturnTypeEnum.Decimal = new WidgetReturnTypeEnum("Decimal", {});
        return WidgetReturnTypeEnum;
    })(internal.IEnum);
    customwidgets.WidgetReturnTypeEnum = WidgetReturnTypeEnum;
    var WidgetValueTypeEnum = (function (_super) {
        __extends(WidgetValueTypeEnum, _super);
        function WidgetValueTypeEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "customwidgets.WidgetValueTypeEnum";
        }
        WidgetValueTypeEnum.Attribute = new WidgetValueTypeEnum("Attribute", {});
        WidgetValueTypeEnum.Boolean = new WidgetValueTypeEnum("Boolean", {});
        WidgetValueTypeEnum.Entity = new WidgetValueTypeEnum("Entity", {});
        WidgetValueTypeEnum.EntityConstraint = new WidgetValueTypeEnum("EntityConstraint", {});
        WidgetValueTypeEnum.Enumeration = new WidgetValueTypeEnum("Enumeration", {});
        WidgetValueTypeEnum.Form = new WidgetValueTypeEnum("Form", {});
        WidgetValueTypeEnum.Image = new WidgetValueTypeEnum("Image", {});
        WidgetValueTypeEnum.Integer = new WidgetValueTypeEnum("Integer", {});
        WidgetValueTypeEnum.Microflow = new WidgetValueTypeEnum("Microflow", {});
        WidgetValueTypeEnum.Object = new WidgetValueTypeEnum("Object", {});
        WidgetValueTypeEnum.String = new WidgetValueTypeEnum("String", {});
        WidgetValueTypeEnum.TranslatableString = new WidgetValueTypeEnum("TranslatableString", {});
        return WidgetValueTypeEnum;
    })(internal.IEnum);
    customwidgets.WidgetValueTypeEnum = WidgetValueTypeEnum;
    var CustomWidget = (function (_super) {
        __extends(CustomWidget, _super);
        function CustomWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.PartProperty(CustomWidget, this, "type", null, false);
            this.__object = new internal.PartProperty(CustomWidget, this, "object", null, false);
            if (arguments.length < 4)
                throw new Error("new CustomWidget() cannot be invoked directly, please use 'model.customwidgets.createCustomWidget()'");
        }
        Object.defineProperty(CustomWidget.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "object", {
            get: function () { return this.__object.get(); },
            set: function (newValue) { this.__object.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomWidget);
        };
        CustomWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CustomWidget.typeName = "CustomWidgets$CustomWidget";
        CustomWidget.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return CustomWidget;
    })(pages_1.pages.Widget);
    customwidgets.CustomWidget = CustomWidget;
    var CustomWidgetType = (function (_super) {
        __extends(CustomWidgetType, _super);
        function CustomWidgetType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widgetId = new internal.PrimitiveProperty(CustomWidgetType, this, "widgetId", "", internal.PrimitiveTypeEnum.String);
            this.__needsEntityContext = new internal.PrimitiveProperty(CustomWidgetType, this, "needsEntityContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__name = new internal.PrimitiveProperty(CustomWidgetType, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(CustomWidgetType, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__phoneGapEnabled = new internal.PrimitiveProperty(CustomWidgetType, this, "phoneGapEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            this.__offlineCapable = new internal.PrimitiveProperty(CustomWidgetType, this, "offlineCapable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__objectType = new internal.PartProperty(CustomWidgetType, this, "objectType", null, true);
            if (arguments.length < 4)
                throw new Error("new CustomWidgetType() cannot be invoked directly, please use 'model.customwidgets.createCustomWidgetType()'");
        }
        Object.defineProperty(CustomWidgetType.prototype, "widgetId", {
            get: function () { return this.__widgetId.get(); },
            set: function (newValue) { this.__widgetId.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "needsEntityContext", {
            get: function () { return this.__needsEntityContext.get(); },
            set: function (newValue) { this.__needsEntityContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "phoneGapEnabled", {
            get: function () { return this.__phoneGapEnabled.get(); },
            set: function (newValue) { this.__phoneGapEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "offlineCapable", {
            get: function () { return this.__offlineCapable.get(); },
            set: function (newValue) { this.__offlineCapable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "objectType", {
            get: function () { return this.__objectType.get(); },
            set: function (newValue) { this.__objectType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * The new CustomWidgetType will be automatically stored in the 'type' property of the parent CustomWidget element passed as argument.
         */
        CustomWidgetType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidgetType, "type", false);
        };
        /*
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomWidgetType.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomWidgetType);
        };
        CustomWidgetType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectType = WidgetObjectType.create(this.model);
        };
        CustomWidgetType.typeName = "CustomWidgets$CustomWidgetType";
        CustomWidgetType.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "objectType": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return CustomWidgetType;
    })(internal.Element);
    customwidgets.CustomWidgetType = CustomWidgetType;
    var WidgetEnumerationValue = (function (_super) {
        __extends(WidgetEnumerationValue, _super);
        function WidgetEnumerationValue(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__key = new internal.PrimitiveProperty(WidgetEnumerationValue, this, "key", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PrimitiveProperty(WidgetEnumerationValue, this, "caption", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WidgetEnumerationValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetEnumerationValue()'");
        }
        Object.defineProperty(WidgetEnumerationValue.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetEnumerationValue.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * The new WidgetEnumerationValue will be automatically stored in the 'enumerationValues' property of the parent WidgetValueType element passed as argument.
         */
        WidgetEnumerationValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetEnumerationValue, "enumerationValues", true);
        };
        /*
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetEnumerationValue.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetEnumerationValue);
        };
        WidgetEnumerationValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WidgetEnumerationValue.typeName = "CustomWidgets$WidgetEnumerationValue";
        WidgetEnumerationValue.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WidgetEnumerationValue;
    })(internal.Element);
    customwidgets.WidgetEnumerationValue = WidgetEnumerationValue;
    var WidgetObject = (function (_super) {
        __extends(WidgetObject, _super);
        function WidgetObject(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.ByIdReferenceProperty(WidgetObject, this, "type", null);
            this.__properties = new internal.PartListProperty(WidgetObject, this, "properties", []);
            if (arguments.length < 4)
                throw new Error("new WidgetObject() cannot be invoked directly, please use 'model.customwidgets.createWidgetObject()'");
        }
        Object.defineProperty(WidgetObject.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObject.prototype, "properties", {
            get: function () { return this.__properties.get(); },
            set: function (newValue) { this.__properties.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetObject.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetObject);
        };
        WidgetObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WidgetObject.typeName = "CustomWidgets$WidgetObject";
        WidgetObject.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "type": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return WidgetObject;
    })(internal.Element);
    customwidgets.WidgetObject = WidgetObject;
    var WidgetObjectType = (function (_super) {
        __extends(WidgetObjectType, _super);
        function WidgetObjectType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__propertyTypes = new internal.PartListProperty(WidgetObjectType, this, "propertyTypes", []);
            if (arguments.length < 4)
                throw new Error("new WidgetObjectType() cannot be invoked directly, please use 'model.customwidgets.createWidgetObjectType()'");
        }
        Object.defineProperty(WidgetObjectType.prototype, "propertyTypes", {
            get: function () { return this.__propertyTypes.get(); },
            set: function (newValue) { this.__propertyTypes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetObjectType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetObjectType);
        };
        WidgetObjectType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WidgetObjectType.typeName = "CustomWidgets$WidgetObjectType";
        WidgetObjectType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WidgetObjectType;
    })(internal.Element);
    customwidgets.WidgetObjectType = WidgetObjectType;
    var WidgetProperty = (function (_super) {
        __extends(WidgetProperty, _super);
        function WidgetProperty(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.ByIdReferenceProperty(WidgetProperty, this, "type", null);
            this.__value = new internal.PartProperty(WidgetProperty, this, "value", null, true);
            if (arguments.length < 4)
                throw new Error("new WidgetProperty() cannot be invoked directly, please use 'model.customwidgets.createWidgetProperty()'");
        }
        Object.defineProperty(WidgetProperty.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetProperty.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * The new WidgetProperty will be automatically stored in the 'properties' property of the parent WidgetObject element passed as argument.
         */
        WidgetProperty.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetProperty, "properties", true);
        };
        /*
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetProperty.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetProperty);
        };
        WidgetProperty.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.value = WidgetValue.create(this.model);
        };
        WidgetProperty.typeName = "CustomWidgets$WidgetProperty";
        WidgetProperty.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "type": {
                    "required": {
                        "currentValue": true
                    }
                },
                "value": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return WidgetProperty;
    })(internal.Element);
    customwidgets.WidgetProperty = WidgetProperty;
    var WidgetPropertyType = (function (_super) {
        __extends(WidgetPropertyType, _super);
        function WidgetPropertyType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__key = new internal.PrimitiveProperty(WidgetPropertyType, this, "key", "", internal.PrimitiveTypeEnum.String);
            this.__category = new internal.PrimitiveProperty(WidgetPropertyType, this, "category", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PrimitiveProperty(WidgetPropertyType, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(WidgetPropertyType, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__isDefault = new internal.PrimitiveProperty(WidgetPropertyType, this, "isDefault", false, internal.PrimitiveTypeEnum.Boolean);
            this.__valueType = new internal.PartProperty(WidgetPropertyType, this, "valueType", null, true);
            if (arguments.length < 4)
                throw new Error("new WidgetPropertyType() cannot be invoked directly, please use 'model.customwidgets.createWidgetPropertyType()'");
        }
        Object.defineProperty(WidgetPropertyType.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "category", {
            get: function () { return this.__category.get(); },
            set: function (newValue) { this.__category.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "isDefault", {
            get: function () { return this.__isDefault.get(); },
            set: function (newValue) { this.__isDefault.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "valueType", {
            get: function () { return this.__valueType.get(); },
            set: function (newValue) { this.__valueType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * The new WidgetPropertyType will be automatically stored in the 'propertyTypes' property of the parent WidgetObjectType element passed as argument.
         */
        WidgetPropertyType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetPropertyType, "propertyTypes", true);
        };
        /*
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetPropertyType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetPropertyType);
        };
        WidgetPropertyType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.valueType = WidgetValueType.create(this.model);
        };
        WidgetPropertyType.typeName = "CustomWidgets$WidgetPropertyType";
        WidgetPropertyType.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "valueType": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return WidgetPropertyType;
    })(internal.Element);
    customwidgets.WidgetPropertyType = WidgetPropertyType;
    var WidgetReturnType = (function (_super) {
        __extends(WidgetReturnType, _super);
        function WidgetReturnType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.EnumProperty(WidgetReturnType, this, "type", WidgetReturnTypeEnum.Boolean, WidgetReturnTypeEnum);
            this.__isList = new internal.PrimitiveProperty(WidgetReturnType, this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
            this.__entityProperty = new internal.PrimitiveProperty(WidgetReturnType, this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WidgetReturnType() cannot be invoked directly, please use 'model.customwidgets.createWidgetReturnType()'");
        }
        Object.defineProperty(WidgetReturnType.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetReturnType.prototype, "isList", {
            get: function () { return this.__isList.get(); },
            set: function (newValue) { this.__isList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetReturnType.prototype, "entityProperty", {
            get: function () { return this.__entityProperty.get(); },
            set: function (newValue) { this.__entityProperty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * The new WidgetReturnType will be automatically stored in the 'returnType' property of the parent WidgetValueType element passed as argument.
         */
        WidgetReturnType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetReturnType, "returnType", false);
        };
        /*
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetReturnType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetReturnType);
        };
        WidgetReturnType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = WidgetReturnTypeEnum.Boolean;
        };
        WidgetReturnType.typeName = "CustomWidgets$WidgetReturnType";
        WidgetReturnType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WidgetReturnType;
    })(internal.Element);
    customwidgets.WidgetReturnType = WidgetReturnType;
    var WidgetTranslation = (function (_super) {
        __extends(WidgetTranslation, _super);
        function WidgetTranslation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__languageCode = new internal.PrimitiveProperty(WidgetTranslation, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
            this.__text = new internal.PrimitiveProperty(WidgetTranslation, this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WidgetTranslation() cannot be invoked directly, please use 'model.customwidgets.createWidgetTranslation()'");
        }
        Object.defineProperty(WidgetTranslation.prototype, "languageCode", {
            get: function () { return this.__languageCode.get(); },
            set: function (newValue) { this.__languageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetTranslation.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * The new WidgetTranslation will be automatically stored in the 'translations' property of the parent WidgetValueType element passed as argument.
         */
        WidgetTranslation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetTranslation, "translations", true);
        };
        /*
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetTranslation.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetTranslation);
        };
        WidgetTranslation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WidgetTranslation.typeName = "CustomWidgets$WidgetTranslation";
        WidgetTranslation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WidgetTranslation;
    })(internal.Element);
    customwidgets.WidgetTranslation = WidgetTranslation;
    var WidgetValue = (function (_super) {
        __extends(WidgetValue, _super);
        function WidgetValue(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.ByIdReferenceProperty(WidgetValue, this, "type", null);
            this.__primitiveValue = new internal.PrimitiveProperty(WidgetValue, this, "primitiveValue", "", internal.PrimitiveTypeEnum.String);
            this.__entityPath = new internal.PrimitiveProperty(WidgetValue, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            this.__attributePath = new internal.PrimitiveProperty(WidgetValue, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__page = new internal.ByNameReferenceProperty(WidgetValue, this, "page", null, "Pages$Page");
            this.__microflow = new internal.ByNameReferenceProperty(WidgetValue, this, "microflow", null, "Microflows$Microflow");
            this.__image = new internal.ByNameReferenceProperty(WidgetValue, this, "image", null, "Images$Image");
            this.__translatableValue = new internal.PartProperty(WidgetValue, this, "translatableValue", null, false);
            this.__xPathConstraint = new internal.PrimitiveProperty(WidgetValue, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__objects = new internal.PartListProperty(WidgetValue, this, "objects", []);
            if (arguments.length < 4)
                throw new Error("new WidgetValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetValue()'");
        }
        Object.defineProperty(WidgetValue.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "primitiveValue", {
            get: function () { return this.__primitiveValue.get(); },
            set: function (newValue) { this.__primitiveValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type Paths$EntityPath.
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "page", {
            get: function () { return this.__page.get(); },
            set: function (newValue) { this.__page.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "pageQualifiedName", {
            get: function () { return this.__page.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "translatableValue", {
            get: function () { return this.__translatableValue.get(); },
            set: function (newValue) { this.__translatableValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "objects", {
            get: function () { return this.__objects.get(); },
            set: function (newValue) { this.__objects.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * The new WidgetValue will be automatically stored in the 'value' property of the parent WidgetProperty element passed as argument.
         */
        WidgetValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetValue, "value", false);
        };
        /*
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetValue.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetValue);
        };
        WidgetValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WidgetValue.typeName = "CustomWidgets$WidgetValue";
        WidgetValue.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "type": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return WidgetValue;
    })(internal.Element);
    customwidgets.WidgetValue = WidgetValue;
    var WidgetValueType = (function (_super) {
        __extends(WidgetValueType, _super);
        function WidgetValueType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.EnumProperty(WidgetValueType, this, "type", WidgetValueTypeEnum.String, WidgetValueTypeEnum);
            this.__isList = new internal.PrimitiveProperty(WidgetValueType, this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
            this.__entityProperty = new internal.PrimitiveProperty(WidgetValueType, this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
            this.__allowNonPersistableEntities = new internal.PrimitiveProperty(WidgetValueType, this, "allowNonPersistableEntities", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isPath = new internal.EnumProperty(WidgetValueType, this, "isPath", IsPath.No, IsPath);
            this.__pathType = new internal.EnumProperty(WidgetValueType, this, "pathType", PathType.None, PathType);
            this.__parameterIsList = new internal.PrimitiveProperty(WidgetValueType, this, "parameterIsList", false, internal.PrimitiveTypeEnum.Boolean);
            this.__multiline = new internal.PrimitiveProperty(WidgetValueType, this, "multiline", false, internal.PrimitiveTypeEnum.Boolean);
            this.__defaultValue = new internal.PrimitiveProperty(WidgetValueType, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            this.__required = new internal.PrimitiveProperty(WidgetValueType, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            this.__attributeTypes = new internal.EnumListProperty(WidgetValueType, this, "attributeTypes", [], CustomWidgetAttributeType);
            this.__enumerationValues = new internal.PartListProperty(WidgetValueType, this, "enumerationValues", []);
            this.__objectType = new internal.PartProperty(WidgetValueType, this, "objectType", null, false);
            this.__returnType = new internal.PartProperty(WidgetValueType, this, "returnType", null, false);
            this.__translations = new internal.PartListProperty(WidgetValueType, this, "translations", []);
            if (arguments.length < 4)
                throw new Error("new WidgetValueType() cannot be invoked directly, please use 'model.customwidgets.createWidgetValueType()'");
        }
        Object.defineProperty(WidgetValueType.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "isList", {
            get: function () { return this.__isList.get(); },
            set: function (newValue) { this.__isList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "entityProperty", {
            get: function () { return this.__entityProperty.get(); },
            set: function (newValue) { this.__entityProperty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "allowNonPersistableEntities", {
            get: function () { return this.__allowNonPersistableEntities.get(); },
            set: function (newValue) { this.__allowNonPersistableEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "isPath", {
            get: function () { return this.__isPath.get(); },
            set: function (newValue) { this.__isPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "pathType", {
            get: function () { return this.__pathType.get(); },
            set: function (newValue) { this.__pathType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "parameterIsList", {
            get: function () { return this.__parameterIsList.get(); },
            set: function (newValue) { this.__parameterIsList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "multiline", {
            get: function () { return this.__multiline.get(); },
            set: function (newValue) { this.__multiline.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "attributeTypes", {
            get: function () { return this.__attributeTypes.get(); },
            set: function (newValue) { this.__attributeTypes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "enumerationValues", {
            get: function () { return this.__enumerationValues.get(); },
            set: function (newValue) { this.__enumerationValues.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "objectType", {
            get: function () { return this.__objectType.get(); },
            set: function (newValue) { this.__objectType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "returnType", {
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "translations", {
            get: function () { return this.__translations.get(); },
            set: function (newValue) { this.__translations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * The new WidgetValueType will be automatically stored in the 'valueType' property of the parent WidgetPropertyType element passed as argument.
         */
        WidgetValueType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetValueType, "valueType", false);
        };
        /*
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetValueType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetValueType);
        };
        WidgetValueType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = WidgetValueTypeEnum.String;
            this.isPath = IsPath.No;
            this.pathType = PathType.None;
        };
        WidgetValueType.typeName = "CustomWidgets$WidgetValueType";
        WidgetValueType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WidgetValueType;
    })(internal.Element);
    customwidgets.WidgetValueType = WidgetValueType;
})(customwidgets = exports.customwidgets || (exports.customwidgets = {}));
