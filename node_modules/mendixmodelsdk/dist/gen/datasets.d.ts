import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace datasets {
    class DateTimeIntervalLength extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Day: DateTimeIntervalLength;
        static Week: DateTimeIntervalLength;
        static Period: DateTimeIntervalLength;
        static Month: DateTimeIntervalLength;
        static Quarter: DateTimeIntervalLength;
        static Year: DateTimeIntervalLength;
    }
    class DateTimeIntervalModifier extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Last: DateTimeIntervalModifier;
        static This: DateTimeIntervalModifier;
        static Next: DateTimeIntervalModifier;
        static Past: DateTimeIntervalModifier;
        static Future: DateTimeIntervalModifier;
        static Always: DateTimeIntervalModifier;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DataSets`.
     */
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Sets relevant section in reference guide}
     */
    interface IDataSet extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): DataSet;
        load(callback: (element: DataSet) => void): any;
        parameters: internal.IList<IDataSetParameter>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Sets relevant section in reference guide}
     */
    class DataSet extends projects.Document implements IDataSet {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __source;
        source: DataSetSource;
        private __parameters;
        parameters: internal.IList<DataSetParameter>;
        private __dataSetAccess;
        dataSetAccess: DataSetAccess;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new DataSet unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): DataSet;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetAccess extends internal.IElement {
        model: IModel;
        container: IDataSet;
        load(): DataSetAccess;
        load(callback: (element: DataSetAccess) => void): any;
    }
    class DataSetAccess extends internal.Element implements IDataSetAccess {
        model: IModel;
        static typeName: string;
        container: DataSet;
        private __moduleRoleAccessList;
        moduleRoleAccessList: internal.IList<DataSetModuleRoleAccess>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSet): DataSetAccess;
        static create(model: IModel): DataSetAccess;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetColumn extends internal.IElement {
        model: IModel;
        container: IJavaDataSetSource;
        load(): DataSetColumn;
        load(callback: (element: DataSetColumn) => void): any;
    }
    class DataSetColumn extends internal.Element implements IDataSetColumn {
        model: IModel;
        static typeName: string;
        container: JavaDataSetSource;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: JavaDataSetSource): DataSetColumn;
        static create(model: IModel): DataSetColumn;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetConstraintAccess extends internal.IElement {
        model: IModel;
        container: IDataSetParameterAccess;
        load(): DataSetConstraintAccess;
        load(callback: (element: DataSetConstraintAccess) => void): any;
    }
    class DataSetConstraintAccess extends internal.Element implements IDataSetConstraintAccess {
        model: IModel;
        static typeName: string;
        container: DataSetParameterAccess;
        private __constraintText;
        constraintText: string;
        private __enabled;
        enabled: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetParameterAccess): DataSetConstraintAccess;
        static create(model: IModel): DataSetConstraintAccess;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetParameterConstraint extends internal.IElement {
        model: IModel;
        container: IDataSetParameter;
        load(): DataSetParameterConstraint;
        load(callback: (element: DataSetParameterConstraint) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSetParameterConstraint extends internal.Element implements IDataSetParameterConstraint {
        model: IModel;
        static typeName: string;
        container: DataSetParameter;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IDataSetDateTimeConstraint extends IDataSetParameterConstraint {
        model: IModel;
        container: IDataSetParameter;
        load(): DataSetDateTimeConstraint;
        load(callback: (element: DataSetDateTimeConstraint) => void): any;
    }
    class DataSetDateTimeConstraint extends DataSetParameterConstraint implements IDataSetDateTimeConstraint {
        model: IModel;
        static typeName: string;
        container: DataSetParameter;
        private __modifier;
        modifier: DateTimeIntervalModifier;
        private __length;
        length: DateTimeIntervalLength;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetParameter): DataSetDateTimeConstraint;
        static create(model: IModel): DataSetDateTimeConstraint;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetModuleRoleAccess extends internal.IElement {
        model: IModel;
        container: IDataSetAccess;
        load(): DataSetModuleRoleAccess;
        load(callback: (element: DataSetModuleRoleAccess) => void): any;
    }
    class DataSetModuleRoleAccess extends internal.Element implements IDataSetModuleRoleAccess {
        model: IModel;
        static typeName: string;
        container: DataSetAccess;
        private __parameterAccessList;
        parameterAccessList: internal.IList<DataSetParameterAccess>;
        private __moduleRole;
        moduleRole: security.IModuleRole;
        moduleRoleQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetAccess): DataSetModuleRoleAccess;
        static create(model: IModel): DataSetModuleRoleAccess;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetNumericConstraint extends IDataSetParameterConstraint {
        model: IModel;
        container: IDataSetParameter;
        load(): DataSetNumericConstraint;
        load(callback: (element: DataSetNumericConstraint) => void): any;
    }
    class DataSetNumericConstraint extends DataSetParameterConstraint implements IDataSetNumericConstraint {
        model: IModel;
        static typeName: string;
        container: DataSetParameter;
        private __begin;
        begin: string;
        private __applyBegin;
        applyBegin: boolean;
        private __end;
        end: string;
        private __applyEnd;
        applyEnd: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetParameter): DataSetNumericConstraint;
        static create(model: IModel): DataSetNumericConstraint;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetObjectConstraint extends IDataSetParameterConstraint {
        model: IModel;
        container: IDataSetParameter;
        load(): DataSetObjectConstraint;
        load(callback: (element: DataSetObjectConstraint) => void): any;
    }
    class DataSetObjectConstraint extends DataSetParameterConstraint implements IDataSetObjectConstraint {
        model: IModel;
        static typeName: string;
        container: DataSetParameter;
        private __name;
        name: string;
        private __constraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        constraint: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetParameter): DataSetObjectConstraint;
        static create(model: IModel): DataSetObjectConstraint;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetParameter extends internal.IElement {
        model: IModel;
        container: IDataSet;
        load(): DataSetParameter;
        load(callback: (element: DataSetParameter) => void): any;
        name: string;
    }
    class DataSetParameter extends internal.Element implements IDataSetParameter {
        model: IModel;
        static typeName: string;
        container: DataSet;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        private __constraints;
        constraints: internal.IList<DataSetParameterConstraint>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSet): DataSetParameter;
        static create(model: IModel): DataSetParameter;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetParameterAccess extends internal.IElement {
        model: IModel;
        container: IDataSetModuleRoleAccess;
        load(): DataSetParameterAccess;
        load(callback: (element: DataSetParameterAccess) => void): any;
    }
    class DataSetParameterAccess extends internal.Element implements IDataSetParameterAccess {
        model: IModel;
        static typeName: string;
        container: DataSetModuleRoleAccess;
        private __parameterName;
        parameterName: string;
        private __constraintAccessList;
        constraintAccessList: internal.IList<DataSetConstraintAccess>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSetModuleRoleAccess): DataSetParameterAccess;
        static create(model: IModel): DataSetParameterAccess;
        _initializeDefaultProperties(): void;
    }
    interface IDataSetSource extends internal.IElement {
        model: IModel;
        container: IDataSet;
        load(): DataSetSource;
        load(callback: (element: DataSetSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSetSource extends internal.Element implements IDataSetSource {
        model: IModel;
        static typeName: string;
        container: DataSet;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IJavaDataSetSource extends IDataSetSource {
        model: IModel;
        container: IDataSet;
        load(): JavaDataSetSource;
        load(callback: (element: JavaDataSetSource) => void): any;
    }
    class JavaDataSetSource extends DataSetSource implements IJavaDataSetSource {
        model: IModel;
        static typeName: string;
        container: DataSet;
        private __columns;
        columns: internal.IList<DataSetColumn>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSet): JavaDataSetSource;
        static create(model: IModel): JavaDataSetSource;
        _initializeDefaultProperties(): void;
    }
    interface IOqlDataSetSource extends IDataSetSource {
        model: IModel;
        container: IDataSet;
        load(): OqlDataSetSource;
        load(callback: (element: OqlDataSetSource) => void): any;
    }
    class OqlDataSetSource extends DataSetSource implements IOqlDataSetSource {
        model: IModel;
        static typeName: string;
        container: DataSet;
        private __query;
        /**
         * The value of this property is conceptually of type Oql$OqlQuery.
         */
        query: string;
        private __ignoreErrorsInQuery;
        ignoreErrorsInQuery: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataSet): OqlDataSetSource;
        static create(model: IModel): OqlDataSetSource;
        _initializeDefaultProperties(): void;
    }
}
import { security } from './security';
import { IModel } from './base-model';
