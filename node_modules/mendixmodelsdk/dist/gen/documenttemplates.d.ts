import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from '../common';
import { projects } from './projects';
export declare namespace documenttemplates {
    class BorderStyle extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: BorderStyle;
        static Dotted: BorderStyle;
        static Dashed: BorderStyle;
        static Solid: BorderStyle;
    }
    class FontFamily extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Courier: FontFamily;
        static Tahoma: FontFamily;
        static Times: FontFamily;
        static Helvetica: FontFamily;
        static Arial: FontFamily;
    }
    class TextAlign extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Left: TextAlign;
        static Right: TextAlign;
        static Center: TextAlign;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DocumentTemplates`.
     */
    interface IWidget extends internal.IElement {
        model: IModel;
        load(): Widget;
        load(callback: (element: Widget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Widget extends internal.Element implements IWidget {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAttributeWidget extends IWidget {
        model: IModel;
        load(): AttributeWidget;
        load(callback: (element: AttributeWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidget extends Widget implements IAttributeWidget {
        model: IModel;
        static typeName: string;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IConditionSettings extends internal.IElement {
        model: IModel;
        container: ITableRow;
        load(): ConditionSettings;
        load(callback: (element: ConditionSettings) => void): any;
    }
    class ConditionSettings extends internal.Element implements IConditionSettings {
        model: IModel;
        static typeName: string;
        container: TableRow;
        private __conditions;
        conditions: internal.IList<enumerations.Condition>;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: TableRow): ConditionSettings;
        static create(model: IModel): ConditionSettings;
        _initializeDefaultProperties(): void;
    }
    interface IEntityWidget extends IWidget {
        model: IModel;
        load(): EntityWidget;
        load(callback: (element: EntityWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityWidget extends Widget implements IEntityWidget {
        model: IModel;
        static typeName: string;
        private __entityPath;
        /**
         * The value of this property is conceptually of type Paths$EntityPath.
         */
        entityPath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IGrid extends IEntityWidget {
        model: IModel;
        load(): Grid;
        load(callback: (element: Grid) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Grid extends EntityWidget implements IGrid {
        model: IModel;
        static typeName: string;
        private __cellSpacing;
        cellSpacing: number;
        private __cellPadding;
        cellPadding: number;
        private __style;
        style: Style;
        private __sortBar;
        sortBar: GridSortBar;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid+(document+template) relevant section in reference guide}
     */
    interface IDataGrid extends IGrid {
        model: IModel;
        load(): DataGrid;
        load(callback: (element: DataGrid) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid+(document+template) relevant section in reference guide}
     */
    class DataGrid extends Grid implements IDataGrid {
        model: IModel;
        static typeName: string;
        private __columns;
        columns: internal.IList<DataGridColumn>;
        private __weights;
        weights: internal.IList<number>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DataGrid;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    interface IDataGridCell extends internal.IElement {
        model: IModel;
        container: IDataGridColumn;
        load(): DataGridCell;
        load(callback: (element: DataGridCell) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    class DataGridCell extends internal.Element implements IDataGridCell {
        model: IModel;
        static typeName: string;
        container: DataGridColumn;
        private __style;
        style: Style;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataGridColumn): DataGridCell;
        static create(model: IModel): DataGridCell;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    interface IDataGridColumn extends internal.IElement {
        model: IModel;
        container: IDataGrid;
        load(): DataGridColumn;
        load(callback: (element: DataGridColumn) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    class DataGridColumn extends internal.Element implements IDataGridColumn {
        model: IModel;
        static typeName: string;
        container: DataGrid;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __caption;
        caption: texts.Text;
        private __style;
        style: Style;
        private __oddRowsCell;
        oddRowsCell: DataGridCell;
        private __evenRowsCell;
        evenRowsCell: DataGridCell;
        private __formattingInfo;
        formattingInfo: pages.FormattingInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataGrid): DataGridColumn;
        static create(model: IModel): DataGridColumn;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+(document+template) relevant section in reference guide}
     */
    interface IDataView extends IEntityWidget {
        model: IModel;
        load(): DataView;
        load(callback: (element: DataView) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+(document+template) relevant section in reference guide}
     */
    class DataView extends EntityWidget implements IDataView {
        model: IModel;
        static typeName: string;
        private __contents;
        contents: DataViewContents;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DataView;
        _initializeDefaultProperties(): void;
    }
    interface IDropZone extends internal.IElement {
        model: IModel;
        load(): DropZone;
        load(callback: (element: DropZone) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DropZone extends internal.Element implements IDropZone {
        model: IModel;
        static typeName: string;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IDataViewContents extends IDropZone {
        model: IModel;
        container: IDataView;
        load(): DataViewContents;
        load(callback: (element: DataViewContents) => void): any;
    }
    class DataViewContents extends DropZone implements IDataViewContents {
        model: IModel;
        static typeName: string;
        container: DataView;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataView): DataViewContents;
        static create(model: IModel): DataViewContents;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Document+Templates relevant section in reference guide}
     */
    interface IDocumentTemplate extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): DocumentTemplate;
        load(callback: (element: DocumentTemplate) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Document+Templates relevant section in reference guide}
     */
    class DocumentTemplate extends projects.Document implements IDocumentTemplate {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __toplevels;
        toplevels: internal.IList<Widget>;
        private __canvasWidth;
        canvasWidth: number;
        private __pageWidth;
        pageWidth: string;
        private __pageHeight;
        pageHeight: string;
        private __ppi;
        ppi: number;
        private __marginLeftInInch;
        marginLeftInInch: number;
        private __marginRightInInch;
        marginRightInInch: number;
        private __marginTopInInch;
        marginTopInInch: number;
        private __marginBottomInInch;
        marginBottomInInch: number;
        private __style;
        style: Style;
        private __header;
        header: Header;
        private __footer;
        footer: Footer;
        private __showHeaderAndFooterOnFirstPage;
        showHeaderAndFooterOnFirstPage: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new DocumentTemplate unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): DocumentTemplate;
        _initializeDefaultProperties(): void;
    }
    interface IDocumentTemplateParameter extends internal.IElement {
        model: IModel;
        container: IDocumentTemplate;
        load(): DocumentTemplateParameter;
        load(callback: (element: DocumentTemplateParameter) => void): any;
        name: string;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
    }
    class DocumentTemplateParameter extends internal.Element implements IDocumentTemplateParameter {
        model: IModel;
        static typeName: string;
        container: DocumentTemplate;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+Image+(document+template) relevant section in reference guide}
     */
    interface IDynamicImageViewer extends IEntityWidget {
        model: IModel;
        load(): DynamicImageViewer;
        load(callback: (element: DynamicImageViewer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+Image+(document+template) relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
        model: IModel;
        static typeName: string;
        private __defaultImage;
        defaultImage: images.IImage;
        defaultImageQualifiedName: string;
        private __useThumbnail;
        useThumbnail: boolean;
        private __width;
        width: number;
        private __height;
        height: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DynamicImageViewer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+label+(document+template) relevant section in reference guide}
     */
    interface IDynamicLabel extends IAttributeWidget {
        model: IModel;
        load(): DynamicLabel;
        load(callback: (element: DynamicLabel) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+label+(document+template) relevant section in reference guide}
     */
    class DynamicLabel extends AttributeWidget implements IDynamicLabel {
        model: IModel;
        static typeName: string;
        private __style;
        style: Style;
        private __renderXHTML;
        renderXHTML: boolean;
        private __formattingInfo;
        formattingInfo: pages.FormattingInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DynamicLabel;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Footer+(document+template) relevant section in reference guide}
     */
    interface IFooter extends IDropZone {
        model: IModel;
        container: IDocumentTemplate;
        load(): Footer;
        load(callback: (element: Footer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Footer+(document+template) relevant section in reference guide}
     */
    class Footer extends DropZone implements IFooter {
        model: IModel;
        static typeName: string;
        container: DocumentTemplate;
        private __bottomMargin;
        bottomMargin: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DocumentTemplate): Footer;
        static create(model: IModel): Footer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    interface IGridSortBar extends internal.IElement {
        model: IModel;
        container: IGrid;
        load(): GridSortBar;
        load(callback: (element: GridSortBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element implements IGridSortBar {
        model: IModel;
        static typeName: string;
        container: Grid;
        private __sortItems;
        sortItems: internal.IList<GridSortItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Grid): GridSortBar;
        static create(model: IModel): GridSortBar;
        _initializeDefaultProperties(): void;
    }
    interface IGridSortItem extends internal.IElement {
        model: IModel;
        container: IGridSortBar;
        load(): GridSortItem;
        load(callback: (element: GridSortItem) => void): any;
    }
    class GridSortItem extends internal.Element implements IGridSortItem {
        model: IModel;
        static typeName: string;
        container: GridSortBar;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __sortOrder;
        sortOrder: pages.SortDirection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: GridSortBar): GridSortItem;
        static create(model: IModel): GridSortItem;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header+(document+template) relevant section in reference guide}
     */
    interface IHeader extends IDropZone {
        model: IModel;
        container: IDocumentTemplate;
        load(): Header;
        load(callback: (element: Header) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header+(document+template) relevant section in reference guide}
     */
    class Header extends DropZone implements IHeader {
        model: IModel;
        static typeName: string;
        container: DocumentTemplate;
        private __topMargin;
        topMargin: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DocumentTemplate): Header;
        static create(model: IModel): Header;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Line+Break+(document+template) relevant section in reference guide}
     */
    interface ILineBreak extends IWidget {
        model: IModel;
        load(): LineBreak;
        load(callback: (element: LineBreak) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Line+Break+(document+template) relevant section in reference guide}
     */
    class LineBreak extends Widget implements ILineBreak {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): LineBreak;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Break+(document+template) relevant section in reference guide}
     */
    interface IPageBreak extends IWidget {
        model: IModel;
        load(): PageBreak;
        load(callback: (element: PageBreak) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Break+(document+template) relevant section in reference guide}
     */
    class PageBreak extends Widget implements IPageBreak {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): PageBreak;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+Image+(document+template) relevant section in reference guide}
     */
    interface IStaticImageViewer extends IWidget {
        model: IModel;
        load(): StaticImageViewer;
        load(callback: (element: StaticImageViewer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+Image+(document+template) relevant section in reference guide}
     */
    class StaticImageViewer extends Widget implements IStaticImageViewer {
        model: IModel;
        static typeName: string;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        private __width;
        width: number;
        private __height;
        height: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): StaticImageViewer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+label+(document+template) relevant section in reference guide}
     */
    interface IStaticLabel extends IWidget {
        model: IModel;
        load(): StaticLabel;
        load(callback: (element: StaticLabel) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+label+(document+template) relevant section in reference guide}
     */
    class StaticLabel extends Widget implements IStaticLabel {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: texts.Text;
        private __style;
        style: Style;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): StaticLabel;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Style relevant section in reference guide}
     */
    interface IStyle extends internal.IElement {
        model: IModel;
        load(): Style;
        load(callback: (element: Style) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Style relevant section in reference guide}
     */
    class Style extends internal.Element implements IStyle {
        model: IModel;
        static typeName: string;
        private __fontFamily;
        fontFamily: FontFamily;
        private __fontSize;
        fontSize: number;
        private __bold;
        bold: boolean;
        private __italic;
        italic: boolean;
        private __fontColor;
        fontColor: common.IColor;
        private __backgroundColor;
        backgroundColor: common.IColor;
        private __overrideFontFamily;
        overrideFontFamily: boolean;
        private __overrideFontSize;
        overrideFontSize: boolean;
        private __overrideBold;
        overrideBold: boolean;
        private __overrideItalic;
        overrideItalic: boolean;
        private __overrideFontColor;
        overrideFontColor: boolean;
        private __overrideBackgroundColor;
        overrideBackgroundColor: boolean;
        private __borderStyleTop;
        borderStyleTop: BorderStyle;
        private __borderStyleBottom;
        borderStyleBottom: BorderStyle;
        private __borderStyleLeft;
        borderStyleLeft: BorderStyle;
        private __borderStyleRight;
        borderStyleRight: BorderStyle;
        private __borderWidthTop;
        borderWidthTop: number;
        private __borderWidthBottom;
        borderWidthBottom: number;
        private __borderWidthLeft;
        borderWidthLeft: number;
        private __borderWidthRight;
        borderWidthRight: number;
        private __borderColorTop;
        borderColorTop: common.IColor;
        private __borderColorBottom;
        borderColorBottom: common.IColor;
        private __borderColorLeft;
        borderColorLeft: common.IColor;
        private __borderColorRight;
        borderColorRight: common.IColor;
        private __textAlign;
        textAlign: TextAlign;
        private __customStyles;
        customStyles: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Style;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table+(document+template) relevant section in reference guide}
     */
    interface ITable extends IWidget {
        model: IModel;
        load(): Table;
        load(callback: (element: Table) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table+(document+template) relevant section in reference guide}
     */
    class Table extends Widget implements ITable {
        model: IModel;
        static typeName: string;
        private __rows;
        rows: internal.IList<TableRow>;
        private __columnWeights;
        columnWeights: internal.IList<number>;
        private __cellSpacing;
        cellSpacing: number;
        private __cellPadding;
        cellPadding: number;
        private __style;
        style: Style;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Table;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cell+(document+template) relevant section in reference guide}
     */
    interface ITableCell extends IDropZone {
        model: IModel;
        container: ITableRow;
        load(): TableCell;
        load(callback: (element: TableCell) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cell+(document+template) relevant section in reference guide}
     */
    class TableCell extends DropZone implements ITableCell {
        model: IModel;
        static typeName: string;
        container: TableRow;
        private __colSpan;
        colSpan: number;
        private __rowSpan;
        rowSpan: number;
        private __isPartOfSpan;
        isPartOfSpan: boolean;
        private __style;
        style: Style;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: TableRow): TableCell;
        static create(model: IModel): TableCell;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Row+(document+template) relevant section in reference guide}
     */
    interface ITableRow extends internal.IElement {
        model: IModel;
        container: ITable;
        load(): TableRow;
        load(callback: (element: TableRow) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Row+(document+template) relevant section in reference guide}
     */
    class TableRow extends internal.Element implements ITableRow {
        model: IModel;
        static typeName: string;
        container: Table;
        private __cells;
        cells: internal.IList<TableCell>;
        private __conditionSettings;
        conditionSettings: ConditionSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Table): TableRow;
        static create(model: IModel): TableRow;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid+(document+template) relevant section in reference guide}
     */
    interface ITemplateGrid extends IGrid {
        model: IModel;
        load(): TemplateGrid;
        load(callback: (element: TemplateGrid) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid+(document+template) relevant section in reference guide}
     */
    class TemplateGrid extends Grid implements ITemplateGrid {
        model: IModel;
        static typeName: string;
        private __numberOfColumns;
        numberOfColumns: number;
        private __oddRowsContents;
        oddRowsContents: TemplateGridContents;
        private __evenRowsContents;
        evenRowsContents: TemplateGridContents;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TemplateGrid;
        _initializeDefaultProperties(): void;
    }
    interface ITemplateGridContents extends IDropZone {
        model: IModel;
        container: ITemplateGrid;
        load(): TemplateGridContents;
        load(callback: (element: TemplateGridContents) => void): any;
    }
    class TemplateGridContents extends DropZone implements ITemplateGridContents {
        model: IModel;
        static typeName: string;
        container: TemplateGrid;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: TemplateGrid): TemplateGridContents;
        static create(model: IModel): TemplateGridContents;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Title+(document+template) relevant section in reference guide}
     */
    interface ITitle extends IWidget {
        model: IModel;
        load(): Title;
        load(callback: (element: Title) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Title+(document+template) relevant section in reference guide}
     */
    class Title extends Widget implements ITitle {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: texts.Text;
        private __style;
        style: Style;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Title;
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { enumerations } from './enumerations';
import { images } from './images';
import { microflows } from './microflows';
import { pages } from './pages';
import { texts } from './texts';
import { IModel } from './base-model';
