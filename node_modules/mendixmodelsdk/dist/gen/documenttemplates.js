var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var documenttemplates;
(function (documenttemplates) {
    var BorderStyle = (function (_super) {
        __extends(BorderStyle, _super);
        function BorderStyle() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "documenttemplates.BorderStyle";
        }
        BorderStyle.None = new BorderStyle("None", {});
        BorderStyle.Dotted = new BorderStyle("Dotted", {});
        BorderStyle.Dashed = new BorderStyle("Dashed", {});
        BorderStyle.Solid = new BorderStyle("Solid", {});
        return BorderStyle;
    })(internal.IEnum);
    documenttemplates.BorderStyle = BorderStyle;
    var FontFamily = (function (_super) {
        __extends(FontFamily, _super);
        function FontFamily() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "documenttemplates.FontFamily";
        }
        FontFamily.Courier = new FontFamily("Courier", {});
        FontFamily.Tahoma = new FontFamily("Tahoma", {});
        FontFamily.Times = new FontFamily("Times", {});
        FontFamily.Helvetica = new FontFamily("Helvetica", {});
        FontFamily.Arial = new FontFamily("Arial", {});
        return FontFamily;
    })(internal.IEnum);
    documenttemplates.FontFamily = FontFamily;
    var TextAlign = (function (_super) {
        __extends(TextAlign, _super);
        function TextAlign() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "documenttemplates.TextAlign";
        }
        TextAlign.Left = new TextAlign("Left", {});
        TextAlign.Right = new TextAlign("Right", {});
        TextAlign.Center = new TextAlign("Center", {});
        return TextAlign;
    })(internal.IEnum);
    documenttemplates.TextAlign = TextAlign;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Widget = (function (_super) {
        __extends(Widget, _super);
        function Widget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(Widget, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Widget() cannot be invoked directly, please use 'model.documenttemplates.createWidget()'");
        }
        Object.defineProperty(Widget.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Widget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Widget.typeName = "DocumentTemplates$Widget";
        Widget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Widget;
    })(internal.Element);
    documenttemplates.Widget = Widget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeWidget = (function (_super) {
        __extends(AttributeWidget, _super);
        function AttributeWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(AttributeWidget, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new AttributeWidget() cannot be invoked directly, please use 'model.documenttemplates.createAttributeWidget()'");
        }
        Object.defineProperty(AttributeWidget.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AttributeWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeWidget.typeName = "DocumentTemplates$AttributeWidget";
        AttributeWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AttributeWidget;
    })(Widget);
    documenttemplates.AttributeWidget = AttributeWidget;
    var ConditionSettings = (function (_super) {
        __extends(ConditionSettings, _super);
        function ConditionSettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__conditions = new internal.PartListProperty(ConditionSettings, this, "conditions", []);
            this.__attribute = new internal.ByNameReferenceProperty(ConditionSettings, this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4)
                throw new Error("new ConditionSettings() cannot be invoked directly, please use 'model.documenttemplates.createConditionSettings()'");
        }
        Object.defineProperty(ConditionSettings.prototype, "conditions", {
            get: function () { return this.__conditions.get(); },
            set: function (newValue) { this.__conditions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionSettings.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionSettings.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ConditionSettings instance in the SDK and on the server.
         * The new ConditionSettings will be automatically stored in the 'conditionSettings' property of the parent TableRow element passed as argument.
         */
        ConditionSettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConditionSettings, "conditionSettings", false);
        };
        /*
         * Creates and returns a new ConditionSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConditionSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConditionSettings);
        };
        ConditionSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConditionSettings.typeName = "DocumentTemplates$ConditionSettings";
        ConditionSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionSettings;
    })(internal.Element);
    documenttemplates.ConditionSettings = ConditionSettings;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var EntityWidget = (function (_super) {
        __extends(EntityWidget, _super);
        function EntityWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entityPath = new internal.PrimitiveProperty(EntityWidget, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new EntityWidget() cannot be invoked directly, please use 'model.documenttemplates.createEntityWidget()'");
        }
        Object.defineProperty(EntityWidget.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type Paths$EntityPath.
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        EntityWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityWidget.typeName = "DocumentTemplates$EntityWidget";
        EntityWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EntityWidget;
    })(Widget);
    documenttemplates.EntityWidget = EntityWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__cellSpacing = new internal.PrimitiveProperty(Grid, this, "cellSpacing", 0, internal.PrimitiveTypeEnum.Integer);
            this.__cellPadding = new internal.PrimitiveProperty(Grid, this, "cellPadding", 0, internal.PrimitiveTypeEnum.Integer);
            this.__style = new internal.PartProperty(Grid, this, "style", null, true);
            this.__sortBar = new internal.PartProperty(Grid, this, "sortBar", null, true);
            this.__microflow = new internal.ByNameReferenceProperty(Grid, this, "microflow", null, "Microflows$Microflow");
            if (arguments.length < 4)
                throw new Error("new Grid() cannot be invoked directly, please use 'model.documenttemplates.createGrid()'");
        }
        Object.defineProperty(Grid.prototype, "cellSpacing", {
            get: function () { return this.__cellSpacing.get(); },
            set: function (newValue) { this.__cellSpacing.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "cellPadding", {
            get: function () { return this.__cellPadding.get(); },
            set: function (newValue) { this.__cellPadding.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Grid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.style = Style.create(this.model);
            this.sortBar = GridSortBar.create(this.model);
        };
        Grid.typeName = "DocumentTemplates$Grid";
        Grid.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                },
                "sortBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Grid;
    })(EntityWidget);
    documenttemplates.Grid = Grid;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid+(document+template) relevant section in reference guide}
     */
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__columns = new internal.PartListProperty(DataGrid, this, "columns", []);
            this.__weights = new internal.PrimitiveListProperty(DataGrid, this, "weights", [], internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new DataGrid() cannot be invoked directly, please use 'model.documenttemplates.createDataGrid()'");
        }
        Object.defineProperty(DataGrid.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "weights", {
            get: function () { return this.__weights.get(); },
            set: function (newValue) { this.__weights.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGrid);
        };
        DataGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([DataGridColumn.create(this.model), DataGridColumn.create(this.model)]);
            this.weights.replace([50, 50]);
        };
        DataGrid.typeName = "DocumentTemplates$DataGrid";
        DataGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataGrid;
    })(Grid);
    documenttemplates.DataGrid = DataGrid;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    var DataGridCell = (function (_super) {
        __extends(DataGridCell, _super);
        function DataGridCell(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__style = new internal.PartProperty(DataGridCell, this, "style", null, true);
            if (arguments.length < 4)
                throw new Error("new DataGridCell() cannot be invoked directly, please use 'model.documenttemplates.createDataGridCell()'");
        }
        Object.defineProperty(DataGridCell.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGridCell instance in the SDK and on the server.
         * The new DataGridCell will be automatically stored in the 'oddRowsCell' property of the parent DataGridColumn element passed as argument.
         */
        DataGridCell.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridCell, "oddRowsCell", false);
        };
        /*
         * Creates and returns a new DataGridCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridCell.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridCell);
        };
        DataGridCell.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.style = Style.create(this.model);
        };
        DataGridCell.typeName = "DocumentTemplates$DataGridCell";
        DataGridCell.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataGridCell;
    })(internal.Element);
    documenttemplates.DataGridCell = DataGridCell;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns+(document+template) relevant section in reference guide}
     */
    var DataGridColumn = (function (_super) {
        __extends(DataGridColumn, _super);
        function DataGridColumn(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(DataGridColumn, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PartProperty(DataGridColumn, this, "caption", null, true);
            this.__style = new internal.PartProperty(DataGridColumn, this, "style", null, true);
            this.__oddRowsCell = new internal.PartProperty(DataGridColumn, this, "oddRowsCell", null, true);
            this.__evenRowsCell = new internal.PartProperty(DataGridColumn, this, "evenRowsCell", null, false);
            this.__formattingInfo = new internal.PartProperty(DataGridColumn, this, "formattingInfo", null, true);
            if (arguments.length < 4)
                throw new Error("new DataGridColumn() cannot be invoked directly, please use 'model.documenttemplates.createDataGridColumn()'");
        }
        Object.defineProperty(DataGridColumn.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridColumn.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridColumn.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridColumn.prototype, "oddRowsCell", {
            get: function () { return this.__oddRowsCell.get(); },
            set: function (newValue) { this.__oddRowsCell.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridColumn.prototype, "evenRowsCell", {
            get: function () { return this.__evenRowsCell.get(); },
            set: function (newValue) { this.__evenRowsCell.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridColumn.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGridColumn instance in the SDK and on the server.
         * The new DataGridColumn will be automatically stored in the 'columns' property of the parent DataGrid element passed as argument.
         */
        DataGridColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridColumn, "columns", true);
        };
        /*
         * Creates and returns a new DataGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridColumn);
        };
        DataGridColumn.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Column";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.style = Style.create(this.model);
            this.oddRowsCell = DataGridCell.create(this.model);
            this.formattingInfo = pages_1.pages.FormattingInfo.create(this.model);
        };
        DataGridColumn.typeName = "DocumentTemplates$DataGridColumn";
        DataGridColumn.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "style": {
                    "required": {
                        "currentValue": true
                    }
                },
                "oddRowsCell": {
                    "required": {
                        "currentValue": true
                    }
                },
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataGridColumn;
    })(internal.Element);
    documenttemplates.DataGridColumn = DataGridColumn;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+(document+template) relevant section in reference guide}
     */
    var DataView = (function (_super) {
        __extends(DataView, _super);
        function DataView(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__contents = new internal.PartProperty(DataView, this, "contents", null, true);
            this.__microflow = new internal.ByNameReferenceProperty(DataView, this, "microflow", null, "Microflows$Microflow");
            if (arguments.length < 4)
                throw new Error("new DataView() cannot be invoked directly, please use 'model.documenttemplates.createDataView()'");
        }
        Object.defineProperty(DataView.prototype, "contents", {
            get: function () { return this.__contents.get(); },
            set: function (newValue) { this.__contents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataView.create = function (model) {
            return internal.instancehelpers.createElement(model, DataView);
        };
        DataView.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.contents = DataViewContents.create(this.model);
        };
        DataView.typeName = "DocumentTemplates$DataView";
        DataView.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "contents": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataView;
    })(EntityWidget);
    documenttemplates.DataView = DataView;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DropZone = (function (_super) {
        __extends(DropZone, _super);
        function DropZone(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(DropZone, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new DropZone() cannot be invoked directly, please use 'model.documenttemplates.createDropZone()'");
        }
        Object.defineProperty(DropZone.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DropZone.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DropZone.typeName = "DocumentTemplates$DropZone";
        DropZone.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DropZone;
    })(internal.Element);
    documenttemplates.DropZone = DropZone;
    var DataViewContents = (function (_super) {
        __extends(DataViewContents, _super);
        function DataViewContents(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataViewContents() cannot be invoked directly, please use 'model.documenttemplates.createDataViewContents()'");
        }
        /*
         * Creates and returns a new DataViewContents instance in the SDK and on the server.
         * The new DataViewContents will be automatically stored in the 'contents' property of the parent DataView element passed as argument.
         */
        DataViewContents.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewContents, "contents", false);
        };
        /*
         * Creates and returns a new DataViewContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewContents.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewContents);
        };
        DataViewContents.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataViewContents.typeName = "DocumentTemplates$DataViewContents";
        DataViewContents.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewContents;
    })(DropZone);
    documenttemplates.DataViewContents = DataViewContents;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Document+Templates relevant section in reference guide}
     */
    var DocumentTemplate = (function (_super) {
        __extends(DocumentTemplate, _super);
        function DocumentTemplate(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__toplevels = new internal.PartListProperty(DocumentTemplate, this, "toplevels", []);
            this.__canvasWidth = new internal.PrimitiveProperty(DocumentTemplate, this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
            this.__pageWidth = new internal.PrimitiveProperty(DocumentTemplate, this, "pageWidth", "", internal.PrimitiveTypeEnum.String);
            this.__pageHeight = new internal.PrimitiveProperty(DocumentTemplate, this, "pageHeight", "", internal.PrimitiveTypeEnum.String);
            this.__ppi = new internal.PrimitiveProperty(DocumentTemplate, this, "ppi", 0, internal.PrimitiveTypeEnum.Integer);
            this.__marginLeftInInch = new internal.PrimitiveProperty(DocumentTemplate, this, "marginLeftInInch", 0, internal.PrimitiveTypeEnum.Double);
            this.__marginRightInInch = new internal.PrimitiveProperty(DocumentTemplate, this, "marginRightInInch", 0, internal.PrimitiveTypeEnum.Double);
            this.__marginTopInInch = new internal.PrimitiveProperty(DocumentTemplate, this, "marginTopInInch", 0, internal.PrimitiveTypeEnum.Double);
            this.__marginBottomInInch = new internal.PrimitiveProperty(DocumentTemplate, this, "marginBottomInInch", 0, internal.PrimitiveTypeEnum.Double);
            this.__style = new internal.PartProperty(DocumentTemplate, this, "style", null, true);
            this.__header = new internal.PartProperty(DocumentTemplate, this, "header", null, false);
            this.__footer = new internal.PartProperty(DocumentTemplate, this, "footer", null, false);
            this.__showHeaderAndFooterOnFirstPage = new internal.PrimitiveProperty(DocumentTemplate, this, "showHeaderAndFooterOnFirstPage", false, internal.PrimitiveTypeEnum.Boolean);
            this._containmentName = "documents";
        }
        Object.defineProperty(DocumentTemplate.prototype, "toplevels", {
            get: function () { return this.__toplevels.get(); },
            set: function (newValue) { this.__toplevels.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "canvasWidth", {
            get: function () { return this.__canvasWidth.get(); },
            set: function (newValue) { this.__canvasWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "pageWidth", {
            get: function () { return this.__pageWidth.get(); },
            set: function (newValue) { this.__pageWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "pageHeight", {
            get: function () { return this.__pageHeight.get(); },
            set: function (newValue) { this.__pageHeight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "ppi", {
            get: function () { return this.__ppi.get(); },
            set: function (newValue) { this.__ppi.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "marginLeftInInch", {
            get: function () { return this.__marginLeftInInch.get(); },
            set: function (newValue) { this.__marginLeftInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "marginRightInInch", {
            get: function () { return this.__marginRightInInch.get(); },
            set: function (newValue) { this.__marginRightInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "marginTopInInch", {
            get: function () { return this.__marginTopInInch.get(); },
            set: function (newValue) { this.__marginTopInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "marginBottomInInch", {
            get: function () { return this.__marginBottomInInch.get(); },
            set: function (newValue) { this.__marginBottomInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "header", {
            get: function () { return this.__header.get(); },
            set: function (newValue) { this.__header.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "footer", {
            get: function () { return this.__footer.get(); },
            set: function (newValue) { this.__footer.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplate.prototype, "showHeaderAndFooterOnFirstPage", {
            get: function () { return this.__showHeaderAndFooterOnFirstPage.get(); },
            set: function (newValue) { this.__showHeaderAndFooterOnFirstPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new DocumentTemplate unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        DocumentTemplate.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, DocumentTemplate);
        };
        DocumentTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.canvasWidth = 800;
            this.pageWidth = "8.268";
            this.pageHeight = "11.693";
            this.ppi = 120;
            this.marginLeftInInch = 0.5;
            this.marginRightInInch = 0.5;
            this.marginTopInInch = 0.5;
            this.marginBottomInInch = 0.5;
            this.style = (function (style) {
                style.overrideFontFamily = true;
                style.overrideFontSize = true;
                style.overrideBold = true;
                style.overrideItalic = true;
                style.overrideFontColor = true;
                style.overrideBackgroundColor = true;
                return style;
            })(Style.create(this.model));
            this.showHeaderAndFooterOnFirstPage = true;
        };
        DocumentTemplate.typeName = "DocumentTemplates$DocumentTemplate";
        DocumentTemplate.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return DocumentTemplate;
    })(projects_1.projects.Document);
    documenttemplates.DocumentTemplate = DocumentTemplate;
    var DocumentTemplateParameter = (function (_super) {
        __extends(DocumentTemplateParameter, _super);
        function DocumentTemplateParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(DocumentTemplateParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(DocumentTemplateParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new DocumentTemplateParameter() cannot be invoked directly, please use 'model.documenttemplates.createDocumentTemplateParameter()'");
        }
        Object.defineProperty(DocumentTemplateParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplateParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DocumentTemplateParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
        };
        DocumentTemplateParameter.typeName = "DocumentTemplates$DocumentTemplateParameter";
        DocumentTemplateParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DocumentTemplateParameter;
    })(internal.Element);
    documenttemplates.DocumentTemplateParameter = DocumentTemplateParameter;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+Image+(document+template) relevant section in reference guide}
     */
    var DynamicImageViewer = (function (_super) {
        __extends(DynamicImageViewer, _super);
        function DynamicImageViewer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__defaultImage = new internal.ByNameReferenceProperty(DynamicImageViewer, this, "defaultImage", null, "Images$Image");
            this.__useThumbnail = new internal.PrimitiveProperty(DynamicImageViewer, this, "useThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
            this.__width = new internal.PrimitiveProperty(DynamicImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__height = new internal.PrimitiveProperty(DynamicImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new DynamicImageViewer() cannot be invoked directly, please use 'model.documenttemplates.createDynamicImageViewer()'");
        }
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImage", {
            get: function () { return this.__defaultImage.get(); },
            set: function (newValue) { this.__defaultImage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImageQualifiedName", {
            get: function () { return this.__defaultImage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "useThumbnail", {
            get: function () { return this.__useThumbnail.get(); },
            set: function (newValue) { this.__useThumbnail.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicImageViewer);
        };
        DynamicImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DynamicImageViewer.typeName = "DocumentTemplates$DynamicImageViewer";
        DynamicImageViewer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DynamicImageViewer;
    })(EntityWidget);
    documenttemplates.DynamicImageViewer = DynamicImageViewer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Dynamic+label+(document+template) relevant section in reference guide}
     */
    var DynamicLabel = (function (_super) {
        __extends(DynamicLabel, _super);
        function DynamicLabel(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__style = new internal.PartProperty(DynamicLabel, this, "style", null, true);
            this.__renderXHTML = new internal.PrimitiveProperty(DynamicLabel, this, "renderXHTML", false, internal.PrimitiveTypeEnum.Boolean);
            this.__formattingInfo = new internal.PartProperty(DynamicLabel, this, "formattingInfo", null, true);
            if (arguments.length < 4)
                throw new Error("new DynamicLabel() cannot be invoked directly, please use 'model.documenttemplates.createDynamicLabel()'");
        }
        Object.defineProperty(DynamicLabel.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicLabel.prototype, "renderXHTML", {
            get: function () { return this.__renderXHTML.get(); },
            set: function (newValue) { this.__renderXHTML.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicLabel.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DynamicLabel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicLabel.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicLabel);
        };
        DynamicLabel.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.style = Style.create(this.model);
            this.formattingInfo = pages_1.pages.FormattingInfo.create(this.model);
        };
        DynamicLabel.typeName = "DocumentTemplates$DynamicLabel";
        DynamicLabel.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                },
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DynamicLabel;
    })(AttributeWidget);
    documenttemplates.DynamicLabel = DynamicLabel;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Footer+(document+template) relevant section in reference guide}
     */
    var Footer = (function (_super) {
        __extends(Footer, _super);
        function Footer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__bottomMargin = new internal.PrimitiveProperty(Footer, this, "bottomMargin", 0, internal.PrimitiveTypeEnum.Double);
            if (arguments.length < 4)
                throw new Error("new Footer() cannot be invoked directly, please use 'model.documenttemplates.createFooter()'");
        }
        Object.defineProperty(Footer.prototype, "bottomMargin", {
            get: function () { return this.__bottomMargin.get(); },
            set: function (newValue) { this.__bottomMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Footer instance in the SDK and on the server.
         * The new Footer will be automatically stored in the 'footer' property of the parent DocumentTemplate element passed as argument.
         */
        Footer.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Footer, "footer", false);
        };
        /*
         * Creates and returns a new Footer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Footer.create = function (model) {
            return internal.instancehelpers.createElement(model, Footer);
        };
        Footer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Footer.typeName = "DocumentTemplates$Footer";
        Footer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Footer;
    })(DropZone);
    documenttemplates.Footer = Footer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    var GridSortBar = (function (_super) {
        __extends(GridSortBar, _super);
        function GridSortBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortItems = new internal.PartListProperty(GridSortBar, this, "sortItems", []);
            if (arguments.length < 4)
                throw new Error("new GridSortBar() cannot be invoked directly, please use 'model.documenttemplates.createGridSortBar()'");
        }
        Object.defineProperty(GridSortBar.prototype, "sortItems", {
            get: function () { return this.__sortItems.get(); },
            set: function (newValue) { this.__sortItems.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property of the parent Grid element passed as argument.
         */
        GridSortBar.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        };
        /*
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortBar.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortBar);
        };
        GridSortBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GridSortBar.typeName = "DocumentTemplates$GridSortBar";
        GridSortBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridSortBar;
    })(internal.Element);
    documenttemplates.GridSortBar = GridSortBar;
    var GridSortItem = (function (_super) {
        __extends(GridSortItem, _super);
        function GridSortItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(GridSortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__sortOrder = new internal.EnumProperty(GridSortItem, this, "sortOrder", pages_1.pages.SortDirection.Ascending, pages_1.pages.SortDirection);
            if (arguments.length < 4)
                throw new Error("new GridSortItem() cannot be invoked directly, please use 'model.documenttemplates.createGridSortItem()'");
        }
        Object.defineProperty(GridSortItem.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortItem.prototype, "sortOrder", {
            get: function () { return this.__sortOrder.get(); },
            set: function (newValue) { this.__sortOrder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property of the parent GridSortBar element passed as argument.
         */
        GridSortItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
        };
        /*
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortItem.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortItem);
        };
        GridSortItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortOrder = pages_1.pages.SortDirection.Ascending;
        };
        GridSortItem.typeName = "DocumentTemplates$GridSortItem";
        GridSortItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridSortItem;
    })(internal.Element);
    documenttemplates.GridSortItem = GridSortItem;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header+(document+template) relevant section in reference guide}
     */
    var Header = (function (_super) {
        __extends(Header, _super);
        function Header(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__topMargin = new internal.PrimitiveProperty(Header, this, "topMargin", 0, internal.PrimitiveTypeEnum.Double);
            if (arguments.length < 4)
                throw new Error("new Header() cannot be invoked directly, please use 'model.documenttemplates.createHeader()'");
        }
        Object.defineProperty(Header.prototype, "topMargin", {
            get: function () { return this.__topMargin.get(); },
            set: function (newValue) { this.__topMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'header' property of the parent DocumentTemplate element passed as argument.
         */
        Header.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Header, "header", false);
        };
        /*
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Header.create = function (model) {
            return internal.instancehelpers.createElement(model, Header);
        };
        Header.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Header.typeName = "DocumentTemplates$Header";
        Header.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Header;
    })(DropZone);
    documenttemplates.Header = Header;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Line+Break+(document+template) relevant section in reference guide}
     */
    var LineBreak = (function (_super) {
        __extends(LineBreak, _super);
        function LineBreak(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new LineBreak() cannot be invoked directly, please use 'model.documenttemplates.createLineBreak()'");
        }
        /*
         * Creates and returns a new LineBreak instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LineBreak.create = function (model) {
            return internal.instancehelpers.createElement(model, LineBreak);
        };
        LineBreak.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LineBreak.typeName = "DocumentTemplates$LineBreak";
        LineBreak.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LineBreak;
    })(Widget);
    documenttemplates.LineBreak = LineBreak;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Break+(document+template) relevant section in reference guide}
     */
    var PageBreak = (function (_super) {
        __extends(PageBreak, _super);
        function PageBreak(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new PageBreak() cannot be invoked directly, please use 'model.documenttemplates.createPageBreak()'");
        }
        /*
         * Creates and returns a new PageBreak instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageBreak.create = function (model) {
            return internal.instancehelpers.createElement(model, PageBreak);
        };
        PageBreak.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PageBreak.typeName = "DocumentTemplates$PageBreak";
        PageBreak.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return PageBreak;
    })(Widget);
    documenttemplates.PageBreak = PageBreak;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+Image+(document+template) relevant section in reference guide}
     */
    var StaticImageViewer = (function (_super) {
        __extends(StaticImageViewer, _super);
        function StaticImageViewer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__image = new internal.ByNameReferenceProperty(StaticImageViewer, this, "image", null, "Images$Image");
            this.__width = new internal.PrimitiveProperty(StaticImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__height = new internal.PrimitiveProperty(StaticImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new StaticImageViewer() cannot be invoked directly, please use 'model.documenttemplates.createStaticImageViewer()'");
        }
        Object.defineProperty(StaticImageViewer.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticImageViewer);
        };
        StaticImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StaticImageViewer.typeName = "DocumentTemplates$StaticImageViewer";
        StaticImageViewer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return StaticImageViewer;
    })(Widget);
    documenttemplates.StaticImageViewer = StaticImageViewer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Static+label+(document+template) relevant section in reference guide}
     */
    var StaticLabel = (function (_super) {
        __extends(StaticLabel, _super);
        function StaticLabel(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(StaticLabel, this, "caption", null, true);
            this.__style = new internal.PartProperty(StaticLabel, this, "style", null, true);
            if (arguments.length < 4)
                throw new Error("new StaticLabel() cannot be invoked directly, please use 'model.documenttemplates.createStaticLabel()'");
        }
        Object.defineProperty(StaticLabel.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticLabel.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StaticLabel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticLabel.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticLabel);
        };
        StaticLabel.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Label";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.style = Style.create(this.model);
        };
        StaticLabel.typeName = "DocumentTemplates$StaticLabel";
        StaticLabel.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return StaticLabel;
    })(Widget);
    documenttemplates.StaticLabel = StaticLabel;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Style relevant section in reference guide}
     */
    var Style = (function (_super) {
        __extends(Style, _super);
        function Style(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__fontFamily = new internal.EnumProperty(Style, this, "fontFamily", FontFamily.Arial, FontFamily);
            this.__fontSize = new internal.PrimitiveProperty(Style, this, "fontSize", 0, internal.PrimitiveTypeEnum.Integer);
            this.__bold = new internal.PrimitiveProperty(Style, this, "bold", false, internal.PrimitiveTypeEnum.Boolean);
            this.__italic = new internal.PrimitiveProperty(Style, this, "italic", false, internal.PrimitiveTypeEnum.Boolean);
            this.__fontColor = new internal.PrimitiveProperty(Style, this, "fontColor", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__backgroundColor = new internal.PrimitiveProperty(Style, this, "backgroundColor", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__overrideFontFamily = new internal.PrimitiveProperty(Style, this, "overrideFontFamily", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideFontSize = new internal.PrimitiveProperty(Style, this, "overrideFontSize", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideBold = new internal.PrimitiveProperty(Style, this, "overrideBold", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideItalic = new internal.PrimitiveProperty(Style, this, "overrideItalic", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideFontColor = new internal.PrimitiveProperty(Style, this, "overrideFontColor", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideBackgroundColor = new internal.PrimitiveProperty(Style, this, "overrideBackgroundColor", false, internal.PrimitiveTypeEnum.Boolean);
            this.__borderStyleTop = new internal.EnumProperty(Style, this, "borderStyleTop", BorderStyle.None, BorderStyle);
            this.__borderStyleBottom = new internal.EnumProperty(Style, this, "borderStyleBottom", BorderStyle.None, BorderStyle);
            this.__borderStyleLeft = new internal.EnumProperty(Style, this, "borderStyleLeft", BorderStyle.None, BorderStyle);
            this.__borderStyleRight = new internal.EnumProperty(Style, this, "borderStyleRight", BorderStyle.None, BorderStyle);
            this.__borderWidthTop = new internal.PrimitiveProperty(Style, this, "borderWidthTop", 0, internal.PrimitiveTypeEnum.Integer);
            this.__borderWidthBottom = new internal.PrimitiveProperty(Style, this, "borderWidthBottom", 0, internal.PrimitiveTypeEnum.Integer);
            this.__borderWidthLeft = new internal.PrimitiveProperty(Style, this, "borderWidthLeft", 0, internal.PrimitiveTypeEnum.Integer);
            this.__borderWidthRight = new internal.PrimitiveProperty(Style, this, "borderWidthRight", 0, internal.PrimitiveTypeEnum.Integer);
            this.__borderColorTop = new internal.PrimitiveProperty(Style, this, "borderColorTop", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__borderColorBottom = new internal.PrimitiveProperty(Style, this, "borderColorBottom", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__borderColorLeft = new internal.PrimitiveProperty(Style, this, "borderColorLeft", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__borderColorRight = new internal.PrimitiveProperty(Style, this, "borderColorRight", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
            this.__textAlign = new internal.EnumProperty(Style, this, "textAlign", TextAlign.Left, TextAlign);
            this.__customStyles = new internal.PrimitiveProperty(Style, this, "customStyles", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Style() cannot be invoked directly, please use 'model.documenttemplates.createStyle()'");
        }
        Object.defineProperty(Style.prototype, "fontFamily", {
            get: function () { return this.__fontFamily.get(); },
            set: function (newValue) { this.__fontFamily.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "fontSize", {
            get: function () { return this.__fontSize.get(); },
            set: function (newValue) { this.__fontSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "bold", {
            get: function () { return this.__bold.get(); },
            set: function (newValue) { this.__bold.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "italic", {
            get: function () { return this.__italic.get(); },
            set: function (newValue) { this.__italic.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "fontColor", {
            get: function () { return this.__fontColor.get(); },
            set: function (newValue) { this.__fontColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "backgroundColor", {
            get: function () { return this.__backgroundColor.get(); },
            set: function (newValue) { this.__backgroundColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideFontFamily", {
            get: function () { return this.__overrideFontFamily.get(); },
            set: function (newValue) { this.__overrideFontFamily.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideFontSize", {
            get: function () { return this.__overrideFontSize.get(); },
            set: function (newValue) { this.__overrideFontSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideBold", {
            get: function () { return this.__overrideBold.get(); },
            set: function (newValue) { this.__overrideBold.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideItalic", {
            get: function () { return this.__overrideItalic.get(); },
            set: function (newValue) { this.__overrideItalic.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideFontColor", {
            get: function () { return this.__overrideFontColor.get(); },
            set: function (newValue) { this.__overrideFontColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "overrideBackgroundColor", {
            get: function () { return this.__overrideBackgroundColor.get(); },
            set: function (newValue) { this.__overrideBackgroundColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderStyleTop", {
            get: function () { return this.__borderStyleTop.get(); },
            set: function (newValue) { this.__borderStyleTop.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderStyleBottom", {
            get: function () { return this.__borderStyleBottom.get(); },
            set: function (newValue) { this.__borderStyleBottom.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderStyleLeft", {
            get: function () { return this.__borderStyleLeft.get(); },
            set: function (newValue) { this.__borderStyleLeft.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderStyleRight", {
            get: function () { return this.__borderStyleRight.get(); },
            set: function (newValue) { this.__borderStyleRight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderWidthTop", {
            get: function () { return this.__borderWidthTop.get(); },
            set: function (newValue) { this.__borderWidthTop.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderWidthBottom", {
            get: function () { return this.__borderWidthBottom.get(); },
            set: function (newValue) { this.__borderWidthBottom.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderWidthLeft", {
            get: function () { return this.__borderWidthLeft.get(); },
            set: function (newValue) { this.__borderWidthLeft.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderWidthRight", {
            get: function () { return this.__borderWidthRight.get(); },
            set: function (newValue) { this.__borderWidthRight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderColorTop", {
            get: function () { return this.__borderColorTop.get(); },
            set: function (newValue) { this.__borderColorTop.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderColorBottom", {
            get: function () { return this.__borderColorBottom.get(); },
            set: function (newValue) { this.__borderColorBottom.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderColorLeft", {
            get: function () { return this.__borderColorLeft.get(); },
            set: function (newValue) { this.__borderColorLeft.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borderColorRight", {
            get: function () { return this.__borderColorRight.get(); },
            set: function (newValue) { this.__borderColorRight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "textAlign", {
            get: function () { return this.__textAlign.get(); },
            set: function (newValue) { this.__textAlign.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "customStyles", {
            get: function () { return this.__customStyles.get(); },
            set: function (newValue) { this.__customStyles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Style instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Style.create = function (model) {
            return internal.instancehelpers.createElement(model, Style);
        };
        Style.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.fontFamily = FontFamily.Arial;
            this.fontSize = 10;
            this.fontColor = { red: 0, green: 0, blue: 0 };
            this.backgroundColor = { red: 255, green: 255, blue: 255 };
            this.borderStyleTop = BorderStyle.None;
            this.borderStyleBottom = BorderStyle.None;
            this.borderStyleLeft = BorderStyle.None;
            this.borderStyleRight = BorderStyle.None;
            this.borderWidthTop = 1;
            this.borderWidthBottom = 1;
            this.borderWidthLeft = 1;
            this.borderWidthRight = 1;
            this.borderColorTop = { red: 0, green: 0, blue: 0 };
            this.borderColorBottom = { red: 0, green: 0, blue: 0 };
            this.borderColorLeft = { red: 0, green: 0, blue: 0 };
            this.borderColorRight = { red: 0, green: 0, blue: 0 };
            this.textAlign = TextAlign.Left;
        };
        Style.typeName = "DocumentTemplates$Style";
        Style.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Style;
    })(internal.Element);
    documenttemplates.Style = Style;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table+(document+template) relevant section in reference guide}
     */
    var Table = (function (_super) {
        __extends(Table, _super);
        function Table(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__rows = new internal.PartListProperty(Table, this, "rows", []);
            this.__columnWeights = new internal.PrimitiveListProperty(Table, this, "columnWeights", [], internal.PrimitiveTypeEnum.Integer);
            this.__cellSpacing = new internal.PrimitiveProperty(Table, this, "cellSpacing", 0, internal.PrimitiveTypeEnum.Integer);
            this.__cellPadding = new internal.PrimitiveProperty(Table, this, "cellPadding", 0, internal.PrimitiveTypeEnum.Integer);
            this.__style = new internal.PartProperty(Table, this, "style", null, true);
            if (arguments.length < 4)
                throw new Error("new Table() cannot be invoked directly, please use 'model.documenttemplates.createTable()'");
        }
        Object.defineProperty(Table.prototype, "rows", {
            get: function () { return this.__rows.get(); },
            set: function (newValue) { this.__rows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "columnWeights", {
            get: function () { return this.__columnWeights.get(); },
            set: function (newValue) { this.__columnWeights.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "cellSpacing", {
            get: function () { return this.__cellSpacing.get(); },
            set: function (newValue) { this.__cellSpacing.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "cellPadding", {
            get: function () { return this.__cellPadding.get(); },
            set: function (newValue) { this.__cellPadding.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Table.create = function (model) {
            return internal.instancehelpers.createElement(model, Table);
        };
        Table.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.rows.replace([TableRow.create(this.model)]);
            this.columnWeights.replace([100]);
            this.style = Style.create(this.model);
        };
        Table.typeName = "DocumentTemplates$Table";
        Table.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Table;
    })(Widget);
    documenttemplates.Table = Table;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cell+(document+template) relevant section in reference guide}
     */
    var TableCell = (function (_super) {
        __extends(TableCell, _super);
        function TableCell(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__colSpan = new internal.PrimitiveProperty(TableCell, this, "colSpan", 0, internal.PrimitiveTypeEnum.Integer);
            this.__rowSpan = new internal.PrimitiveProperty(TableCell, this, "rowSpan", 0, internal.PrimitiveTypeEnum.Integer);
            this.__isPartOfSpan = new internal.PrimitiveProperty(TableCell, this, "isPartOfSpan", false, internal.PrimitiveTypeEnum.Boolean);
            this.__style = new internal.PartProperty(TableCell, this, "style", null, true);
            if (arguments.length < 4)
                throw new Error("new TableCell() cannot be invoked directly, please use 'model.documenttemplates.createTableCell()'");
        }
        Object.defineProperty(TableCell.prototype, "colSpan", {
            get: function () { return this.__colSpan.get(); },
            set: function (newValue) { this.__colSpan.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "rowSpan", {
            get: function () { return this.__rowSpan.get(); },
            set: function (newValue) { this.__rowSpan.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "isPartOfSpan", {
            get: function () { return this.__isPartOfSpan.get(); },
            set: function (newValue) { this.__isPartOfSpan.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property of the parent TableRow element passed as argument.
         */
        TableCell.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableCell, "cells", true);
        };
        /*
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableCell.create = function (model) {
            return internal.instancehelpers.createElement(model, TableCell);
        };
        TableCell.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.colSpan = 1;
            this.rowSpan = 1;
            this.style = Style.create(this.model);
        };
        TableCell.typeName = "DocumentTemplates$TableCell";
        TableCell.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TableCell;
    })(DropZone);
    documenttemplates.TableCell = TableCell;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Row+(document+template) relevant section in reference guide}
     */
    var TableRow = (function (_super) {
        __extends(TableRow, _super);
        function TableRow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__cells = new internal.PartListProperty(TableRow, this, "cells", []);
            this.__conditionSettings = new internal.PartProperty(TableRow, this, "conditionSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new TableRow() cannot be invoked directly, please use 'model.documenttemplates.createTableRow()'");
        }
        Object.defineProperty(TableRow.prototype, "cells", {
            get: function () { return this.__cells.get(); },
            set: function (newValue) { this.__cells.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "conditionSettings", {
            get: function () { return this.__conditionSettings.get(); },
            set: function (newValue) { this.__conditionSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property of the parent Table element passed as argument.
         */
        TableRow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableRow, "rows", true);
        };
        /*
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableRow.create = function (model) {
            return internal.instancehelpers.createElement(model, TableRow);
        };
        TableRow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.cells.replace([TableCell.create(this.model)]);
            this.conditionSettings = ConditionSettings.create(this.model);
        };
        TableRow.typeName = "DocumentTemplates$TableRow";
        TableRow.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "conditionSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TableRow;
    })(internal.Element);
    documenttemplates.TableRow = TableRow;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid+(document+template) relevant section in reference guide}
     */
    var TemplateGrid = (function (_super) {
        __extends(TemplateGrid, _super);
        function TemplateGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__numberOfColumns = new internal.PrimitiveProperty(TemplateGrid, this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
            this.__oddRowsContents = new internal.PartProperty(TemplateGrid, this, "oddRowsContents", null, true);
            this.__evenRowsContents = new internal.PartProperty(TemplateGrid, this, "evenRowsContents", null, false);
            if (arguments.length < 4)
                throw new Error("new TemplateGrid() cannot be invoked directly, please use 'model.documenttemplates.createTemplateGrid()'");
        }
        Object.defineProperty(TemplateGrid.prototype, "numberOfColumns", {
            get: function () { return this.__numberOfColumns.get(); },
            set: function (newValue) { this.__numberOfColumns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "oddRowsContents", {
            get: function () { return this.__oddRowsContents.get(); },
            set: function (newValue) { this.__oddRowsContents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "evenRowsContents", {
            get: function () { return this.__evenRowsContents.get(); },
            set: function (newValue) { this.__evenRowsContents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGrid);
        };
        TemplateGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.numberOfColumns = 2;
            this.oddRowsContents = TemplateGridContents.create(this.model);
        };
        TemplateGrid.typeName = "DocumentTemplates$TemplateGrid";
        TemplateGrid.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "oddRowsContents": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TemplateGrid;
    })(Grid);
    documenttemplates.TemplateGrid = TemplateGrid;
    var TemplateGridContents = (function (_super) {
        __extends(TemplateGridContents, _super);
        function TemplateGridContents(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new TemplateGridContents() cannot be invoked directly, please use 'model.documenttemplates.createTemplateGridContents()'");
        }
        /*
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'oddRowsContents' property of the parent TemplateGrid element passed as argument.
         */
        TemplateGridContents.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGridContents, "oddRowsContents", false);
        };
        /*
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGridContents.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGridContents);
        };
        TemplateGridContents.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TemplateGridContents.typeName = "DocumentTemplates$TemplateGridContents";
        TemplateGridContents.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TemplateGridContents;
    })(DropZone);
    documenttemplates.TemplateGridContents = TemplateGridContents;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Title+(document+template) relevant section in reference guide}
     */
    var Title = (function (_super) {
        __extends(Title, _super);
        function Title(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(Title, this, "caption", null, true);
            this.__style = new internal.PartProperty(Title, this, "style", null, true);
            if (arguments.length < 4)
                throw new Error("new Title() cannot be invoked directly, please use 'model.documenttemplates.createTitle()'");
        }
        Object.defineProperty(Title.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Title.create = function (model) {
            return internal.instancehelpers.createElement(model, Title);
        };
        Title.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Title";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.style = Style.create(this.model);
        };
        Title.typeName = "DocumentTemplates$Title";
        Title.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "style": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Title;
    })(Widget);
    documenttemplates.Title = Title;
})(documenttemplates = exports.documenttemplates || (exports.documenttemplates = {}));
var pages_1 = require('./pages');
var texts_1 = require('./texts');
