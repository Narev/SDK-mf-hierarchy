import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from '../common';
import { projects } from './projects';
export declare namespace domainmodels {
    class AssociationType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Reference: AssociationType;
        static ReferenceSet: AssociationType;
    }
    class AssociationOwner extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: AssociationOwner;
        static Both: AssociationOwner;
    }
    class DeletingBehavior extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static DeleteMeAndReferences: DeletingBehavior;
        static DeleteMeButKeepReferences: DeletingBehavior;
        static DeleteMeIfNoReferences: DeletingBehavior;
    }
    class MemberAccessRights extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: MemberAccessRights;
        static ReadOnly: MemberAccessRights;
        static ReadWrite: MemberAccessRights;
    }
    class ActionMoment extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Before: ActionMoment;
        static After: ActionMoment;
    }
    class EventType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Create: EventType;
        static Commit: EventType;
        static Delete: EventType;
        static RollBack: EventType;
    }
    class IndexedAttributeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Normal: IndexedAttributeType;
        static CreatedDate: IndexedAttributeType;
        static ChangedDate: IndexedAttributeType;
    }
    class RangeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static GreaterThanOrEqualTo: RangeType;
        static SmallerThanOrEqualTo: RangeType;
        static Between: RangeType;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DomainModels`.
     */
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Access+Rules relevant section in reference guide}
     */
    interface IAccessRule extends internal.IElement {
        model: IModel;
        load(): AccessRule;
        load(callback: (element: AccessRule) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Access+Rules relevant section in reference guide}
     */
    class AccessRule extends internal.Element implements IAccessRule {
        model: IModel;
        static typeName: string;
        private __memberAccesses;
        memberAccesses: internal.IList<MemberAccess>;
        private __moduleRoles;
        moduleRoles: internal.IList<security.IModuleRole>;
        moduleRolesQualifiedNames: string[];
        private __documentation;
        documentation: string;
        private __allowCreate;
        allowCreate: boolean;
        private __allowDelete;
        allowDelete: boolean;
        private __defaultMemberAccessRights;
        defaultMemberAccessRights: MemberAccessRights;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): AccessRule;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotations relevant section in reference guide}
     */
    interface IAnnotation extends internal.IElement {
        model: IModel;
        container: IDomainModel;
        load(): Annotation;
        load(callback: (element: Annotation) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotations relevant section in reference guide}
     */
    class Annotation extends internal.Element implements IAnnotation {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __caption;
        caption: string;
        private __location;
        location: common.IPoint;
        private __width;
        width: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DomainModel): Annotation;
        static create(model: IModel): Annotation;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Associations TODO: This is whre it belongs, but the word AssociationBase is never used}
     */
    interface IAssociationBase extends internal.IElement {
        model: IModel;
        container: IDomainModel;
        load(): AssociationBase;
        load(callback: (element: AssociationBase) => void): any;
        name: string;
        type: AssociationType;
        owner: AssociationOwner;
        /**
         * This property is required and cannot be set to null.
         */
        parent: IEntity;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Associations TODO: This is whre it belongs, but the word AssociationBase is never used}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AssociationBase extends internal.Element implements IAssociationBase {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __name;
        name: string;
        private __dataStorageGuid;
        dataStorageGuid: string;
        private __type;
        type: AssociationType;
        private __owner;
        owner: AssociationOwner;
        private __deleteBehavior;
        deleteBehavior: AssociationDeleteBehavior;
        private __parent;
        parent: Entity;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Associations relevant section in reference guide}
     */
    interface IAssociation extends IAssociationBase {
        model: IModel;
        container: IDomainModel;
        load(): Association;
        load(callback: (element: Association) => void): any;
        /**
         * This property is required and cannot be set to null.
         */
        child: IEntity;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Associations relevant section in reference guide}
     */
    class Association extends AssociationBase implements IAssociation {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __child;
        child: Entity;
        private __parentConnection;
        parentConnection: common.IPoint;
        private __childConnection;
        childConnection: common.IPoint;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DomainModel): Association;
        static create(model: IModel): Association;
        _initializeDefaultProperties(): void;
    }
    interface IAssociationDeleteBehavior extends internal.IElement {
        model: IModel;
        container: IAssociationBase;
        load(): AssociationDeleteBehavior;
        load(callback: (element: AssociationDeleteBehavior) => void): any;
    }
    class AssociationDeleteBehavior extends internal.Element implements IAssociationDeleteBehavior {
        model: IModel;
        static typeName: string;
        container: AssociationBase;
        private __parentDeleteBehavior;
        parentDeleteBehavior: DeletingBehavior;
        private __childDeleteBehavior;
        childDeleteBehavior: DeletingBehavior;
        private __parentErrorMessage;
        parentErrorMessage: texts.Text;
        private __childErrorMessage;
        childErrorMessage: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AssociationBase): AssociationDeleteBehavior;
        static create(model: IModel): AssociationDeleteBehavior;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Attributes relevant section in reference guide}
     */
    interface IAttribute extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): Attribute;
        load(callback: (element: Attribute) => void): any;
        name: string;
        /**
         * This property is required and cannot be set to null.
         */
        type: IAttributeType;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Attributes relevant section in reference guide}
     */
    class Attribute extends internal.Element implements IAttribute {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __name;
        name: string;
        private __dataStorageGuid;
        dataStorageGuid: string;
        private __type;
        type: AttributeType;
        private __documentation;
        documentation: string;
        private __value;
        value: ValueType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): Attribute;
        static create(model: IModel): Attribute;
        _initializeDefaultProperties(): void;
    }
    interface IAttributeType extends internal.IElement {
        model: IModel;
        container: IAttribute;
        load(): AttributeType;
        load(callback: (element: AttributeType) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeType extends internal.Element implements IAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface INumericAttributeTypeBase extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): NumericAttributeTypeBase;
        load(callback: (element: NumericAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class NumericAttributeTypeBase extends AttributeType implements INumericAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IIntegerAttributeTypeBase extends INumericAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): IntegerAttributeTypeBase;
        load(callback: (element: IntegerAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class IntegerAttributeTypeBase extends NumericAttributeTypeBase implements IIntegerAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAutoNumberAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): AutoNumberAttributeType;
        load(callback: (element: AutoNumberAttributeType) => void): any;
    }
    class AutoNumberAttributeType extends IntegerAttributeTypeBase implements IAutoNumberAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): AutoNumberAttributeType;
        static create(model: IModel): AutoNumberAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IBinaryAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): BinaryAttributeType;
        load(callback: (element: BinaryAttributeType) => void): any;
    }
    class BinaryAttributeType extends AttributeType implements IBinaryAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): BinaryAttributeType;
        static create(model: IModel): BinaryAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IBooleanAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): BooleanAttributeType;
        load(callback: (element: BooleanAttributeType) => void): any;
    }
    class BooleanAttributeType extends AttributeType implements IBooleanAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): BooleanAttributeType;
        static create(model: IModel): BooleanAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IValueType extends internal.IElement {
        model: IModel;
        container: IAttribute;
        load(): ValueType;
        load(callback: (element: ValueType) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ValueType extends internal.Element implements IValueType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ICalculatedValue extends IValueType {
        model: IModel;
        container: IAttribute;
        load(): CalculatedValue;
        load(callback: (element: CalculatedValue) => void): any;
    }
    class CalculatedValue extends ValueType implements ICalculatedValue {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __passEntity;
        passEntity: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): CalculatedValue;
        static create(model: IModel): CalculatedValue;
        _initializeDefaultProperties(): void;
    }
    interface ICrossAssociation extends IAssociationBase {
        model: IModel;
        container: IDomainModel;
        load(): CrossAssociation;
        load(callback: (element: CrossAssociation) => void): any;
        /**
         * This property is required and cannot be set to null.
         */
        child: IEntity;
        childQualifiedName: string;
    }
    class CrossAssociation extends AssociationBase implements ICrossAssociation {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __child;
        child: IEntity;
        childQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DomainModel): CrossAssociation;
        static create(model: IModel): CrossAssociation;
        _initializeDefaultProperties(): void;
    }
    interface IDecimalAttributeTypeBase extends INumericAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): DecimalAttributeTypeBase;
        load(callback: (element: DecimalAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DecimalAttributeTypeBase extends NumericAttributeTypeBase implements IDecimalAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IFloatAttributeTypeBase extends IDecimalAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): FloatAttributeTypeBase;
        load(callback: (element: FloatAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class FloatAttributeTypeBase extends DecimalAttributeTypeBase implements IFloatAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.0: deprecated
     */
    interface ICurrencyAttributeType extends IFloatAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): CurrencyAttributeType;
        load(callback: (element: CurrencyAttributeType) => void): any;
    }
    /**
     * In version 6.0.0: deprecated
     */
    class CurrencyAttributeType extends FloatAttributeTypeBase implements ICurrencyAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): CurrencyAttributeType;
        static create(model: IModel): CurrencyAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IDateTimeAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): DateTimeAttributeType;
        load(callback: (element: DateTimeAttributeType) => void): any;
    }
    class DateTimeAttributeType extends AttributeType implements IDateTimeAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __localizeDate;
        localizeDate: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): DateTimeAttributeType;
        static create(model: IModel): DateTimeAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IDecimalAttributeType extends IDecimalAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): DecimalAttributeType;
        load(callback: (element: DecimalAttributeType) => void): any;
    }
    class DecimalAttributeType extends DecimalAttributeTypeBase implements IDecimalAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): DecimalAttributeType;
        static create(model: IModel): DecimalAttributeType;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Domain+Model relevant section in reference guide}
     */
    interface IDomainModel extends projects.IModuleDocument {
        model: IModel;
        container: projects.IModule;
        load(): DomainModel;
        load(callback: (element: DomainModel) => void): any;
        entities: internal.IList<IEntity>;
        associations: internal.IList<IAssociation>;
        crossAssociations: internal.IList<ICrossAssociation>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Domain+Model relevant section in reference guide}
     */
    class DomainModel extends projects.ModuleDocument implements IDomainModel {
        model: IModel;
        static typeName: string;
        container: projects.Module;
        private __documentation;
        documentation: string;
        private __entities;
        entities: internal.IList<Entity>;
        private __annotations;
        annotations: internal.IList<Annotation>;
        private __associations;
        associations: internal.IList<Association>;
        private __crossAssociations;
        crossAssociations: internal.IList<CrossAssociation>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IModule);
        /**
         * Creates a new DomainModel unit in the SDK and on the server.
         * Expects one argument, a projects.Module in which this unit is contained.
         */
        static createIn(container: projects.IModule): DomainModel;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Entities relevant section in reference guide}
     */
    interface IEntity extends internal.IElement {
        model: IModel;
        container: IDomainModel;
        load(): Entity;
        load(callback: (element: Entity) => void): any;
        name: string;
        /**
         * This property is required and cannot be set to null.
         */
        generalization: IGeneralizationBase;
        attributes: internal.IList<IAttribute>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Entities relevant section in reference guide}
     */
    class Entity extends internal.Element implements IEntity {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __name;
        name: string;
        private __dataStorageGuid;
        dataStorageGuid: string;
        private __location;
        location: common.IPoint;
        private __documentation;
        documentation: string;
        private __generalization;
        generalization: GeneralizationBase;
        private __attributes;
        attributes: internal.IList<Attribute>;
        private __validationRules;
        validationRules: internal.IList<ValidationRule>;
        private __eventHandlers;
        eventHandlers: internal.IList<EventHandler>;
        private __indexes;
        indexes: internal.IList<Index>;
        private __accessRules;
        accessRules: internal.IList<AccessRule>;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DomainModel): Entity;
        static create(model: IModel): Entity;
        _initializeDefaultProperties(): void;
    }
    interface IEnumerationAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): EnumerationAttributeType;
        load(callback: (element: EnumerationAttributeType) => void): any;
        /**
         * This property is required and cannot be set to null.
         */
        enumeration: enumerations.IEnumeration;
        enumerationQualifiedName: string;
    }
    class EnumerationAttributeType extends AttributeType implements IEnumerationAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __enumeration;
        enumeration: enumerations.IEnumeration;
        enumerationQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): EnumerationAttributeType;
        static create(model: IModel): EnumerationAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IRuleInfo extends internal.IElement {
        model: IModel;
        container: IValidationRule;
        load(): RuleInfo;
        load(callback: (element: RuleInfo) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class RuleInfo extends internal.Element implements IRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IEqualsToRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): EqualsToRuleInfo;
        load(callback: (element: EqualsToRuleInfo) => void): any;
    }
    class EqualsToRuleInfo extends RuleInfo implements IEqualsToRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        private __useValue;
        useValue: boolean;
        private __equalsToValue;
        equalsToValue: string;
        private __equalsToAttribute;
        equalsToAttribute: IAttribute;
        equalsToAttributeQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): EqualsToRuleInfo;
        static create(model: IModel): EqualsToRuleInfo;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Event+Handlers relevant section in reference guide}
     */
    interface IEventHandler extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): EventHandler;
        load(callback: (element: EventHandler) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Event+Handlers relevant section in reference guide}
     */
    class EventHandler extends internal.Element implements IEventHandler {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __moment;
        moment: ActionMoment;
        private __event;
        event: EventType;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __raiseErrorOnFalse;
        raiseErrorOnFalse: boolean;
        private __passEventObject;
        passEventObject: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): EventHandler;
        static create(model: IModel): EventHandler;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.0: deprecated
     */
    interface IFloatAttributeType extends IFloatAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): FloatAttributeType;
        load(callback: (element: FloatAttributeType) => void): any;
    }
    /**
     * In version 6.0.0: deprecated
     */
    class FloatAttributeType extends FloatAttributeTypeBase implements IFloatAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): FloatAttributeType;
        static create(model: IModel): FloatAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IGeneralizationBase extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): GeneralizationBase;
        load(callback: (element: GeneralizationBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class GeneralizationBase extends internal.Element implements IGeneralizationBase {
        model: IModel;
        static typeName: string;
        container: Entity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IGeneralization extends IGeneralizationBase {
        model: IModel;
        container: IEntity;
        load(): Generalization;
        load(callback: (element: Generalization) => void): any;
        /**
         * This property is required and cannot be set to null.
         */
        generalization: IEntity;
        generalizationQualifiedName: string;
    }
    class Generalization extends GeneralizationBase implements IGeneralization {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __generalization;
        generalization: IEntity;
        generalizationQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): Generalization;
        static create(model: IModel): Generalization;
        _initializeDefaultProperties(): void;
    }
    interface IHashedStringAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): HashedStringAttributeType;
        load(callback: (element: HashedStringAttributeType) => void): any;
    }
    class HashedStringAttributeType extends AttributeType implements IHashedStringAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): HashedStringAttributeType;
        static create(model: IModel): HashedStringAttributeType;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Indexes relevant section in reference guide}
     */
    interface IIndex extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): Index;
        load(callback: (element: Index) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Indexes relevant section in reference guide}
     */
    class Index extends internal.Element implements IIndex {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __dataStorageGuid;
        dataStorageGuid: string;
        private __attributes;
        attributes: internal.IList<IndexedAttribute>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): Index;
        static create(model: IModel): Index;
        _initializeDefaultProperties(): void;
    }
    interface IIndexedAttribute extends internal.IElement {
        model: IModel;
        container: IIndex;
        load(): IndexedAttribute;
        load(callback: (element: IndexedAttribute) => void): any;
    }
    class IndexedAttribute extends internal.Element implements IIndexedAttribute {
        model: IModel;
        static typeName: string;
        container: Index;
        private __type;
        type: IndexedAttributeType;
        private __attribute;
        attribute: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Index): IndexedAttribute;
        static create(model: IModel): IndexedAttribute;
        _initializeDefaultProperties(): void;
    }
    interface IIntegerAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): IntegerAttributeType;
        load(callback: (element: IntegerAttributeType) => void): any;
    }
    class IntegerAttributeType extends IntegerAttributeTypeBase implements IIntegerAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): IntegerAttributeType;
        static create(model: IModel): IntegerAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface ILongAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): LongAttributeType;
        load(callback: (element: LongAttributeType) => void): any;
    }
    class LongAttributeType extends IntegerAttributeTypeBase implements ILongAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): LongAttributeType;
        static create(model: IModel): LongAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IMaxLengthRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): MaxLengthRuleInfo;
        load(callback: (element: MaxLengthRuleInfo) => void): any;
    }
    class MaxLengthRuleInfo extends RuleInfo implements IMaxLengthRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        private __maxLength;
        maxLength: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): MaxLengthRuleInfo;
        static create(model: IModel): MaxLengthRuleInfo;
        _initializeDefaultProperties(): void;
    }
    interface IMemberAccess extends internal.IElement {
        model: IModel;
        container: IAccessRule;
        load(): MemberAccess;
        load(callback: (element: MemberAccess) => void): any;
    }
    class MemberAccess extends internal.Element implements IMemberAccess {
        model: IModel;
        static typeName: string;
        container: AccessRule;
        private __attribute;
        attribute: IAttribute;
        attributeQualifiedName: string;
        private __association;
        association: IAssociationBase;
        associationQualifiedName: string;
        private __accessRights;
        accessRights: MemberAccessRights;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AccessRule): MemberAccess;
        static create(model: IModel): MemberAccess;
        _initializeDefaultProperties(): void;
    }
    interface INoGeneralization extends IGeneralizationBase {
        model: IModel;
        container: IEntity;
        load(): NoGeneralization;
        load(callback: (element: NoGeneralization) => void): any;
        persistable: boolean;
    }
    class NoGeneralization extends GeneralizationBase implements INoGeneralization {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __hasChangedDate;
        hasChangedDate: boolean;
        private __hasCreatedDate;
        hasCreatedDate: boolean;
        private __hasOwner;
        hasOwner: boolean;
        private __hasChangedBy;
        hasChangedBy: boolean;
        private __persistable;
        persistable: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): NoGeneralization;
        static create(model: IModel): NoGeneralization;
        _initializeDefaultProperties(): void;
    }
    interface IRangeRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): RangeRuleInfo;
        load(callback: (element: RangeRuleInfo) => void): any;
    }
    class RangeRuleInfo extends RuleInfo implements IRangeRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        private __typeOfRange;
        typeOfRange: RangeType;
        private __useMinValue;
        useMinValue: boolean;
        private __useMaxValue;
        useMaxValue: boolean;
        private __minValue;
        minValue: string;
        private __maxValue;
        maxValue: string;
        private __minAttribute;
        minAttribute: IAttribute;
        minAttributeQualifiedName: string;
        private __maxAttribute;
        maxAttribute: IAttribute;
        maxAttributeQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): RangeRuleInfo;
        static create(model: IModel): RangeRuleInfo;
        _initializeDefaultProperties(): void;
    }
    interface IRegExRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): RegExRuleInfo;
        load(callback: (element: RegExRuleInfo) => void): any;
    }
    class RegExRuleInfo extends RuleInfo implements IRegExRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        private __regularExpression;
        regularExpression: regularexpressions.IRegularExpression;
        regularExpressionQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): RegExRuleInfo;
        static create(model: IModel): RegExRuleInfo;
        _initializeDefaultProperties(): void;
    }
    interface IRequiredRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): RequiredRuleInfo;
        load(callback: (element: RequiredRuleInfo) => void): any;
    }
    class RequiredRuleInfo extends RuleInfo implements IRequiredRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): RequiredRuleInfo;
        static create(model: IModel): RequiredRuleInfo;
        _initializeDefaultProperties(): void;
    }
    interface IStoredValue extends IValueType {
        model: IModel;
        container: IAttribute;
        load(): StoredValue;
        load(callback: (element: StoredValue) => void): any;
    }
    class StoredValue extends ValueType implements IStoredValue {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __defaultValue;
        defaultValue: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): StoredValue;
        static create(model: IModel): StoredValue;
        _initializeDefaultProperties(): void;
    }
    interface IStringAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): StringAttributeType;
        load(callback: (element: StringAttributeType) => void): any;
    }
    class StringAttributeType extends AttributeType implements IStringAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __length;
        length: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): StringAttributeType;
        static create(model: IModel): StringAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IUniqueRuleInfo extends IRuleInfo {
        model: IModel;
        container: IValidationRule;
        load(): UniqueRuleInfo;
        load(callback: (element: UniqueRuleInfo) => void): any;
    }
    class UniqueRuleInfo extends RuleInfo implements IUniqueRuleInfo {
        model: IModel;
        static typeName: string;
        container: ValidationRule;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ValidationRule): UniqueRuleInfo;
        static create(model: IModel): UniqueRuleInfo;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Validation+Rules relevant section in reference guide}
     */
    interface IValidationRule extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): ValidationRule;
        load(callback: (element: ValidationRule) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Validation+Rules relevant section in reference guide}
     */
    class ValidationRule extends internal.Element implements IValidationRule {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __attribute;
        attribute: IAttribute;
        attributeQualifiedName: string;
        private __errorMessage;
        errorMessage: texts.Text;
        private __ruleInfo;
        ruleInfo: RuleInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): ValidationRule;
        static create(model: IModel): ValidationRule;
        _initializeDefaultProperties(): void;
    }
}
import { enumerations } from './enumerations';
import { images } from './images';
import { microflows } from './microflows';
import { regularexpressions } from './regularexpressions';
import { security } from './security';
import { texts } from './texts';
import { IModel } from './base-model';
