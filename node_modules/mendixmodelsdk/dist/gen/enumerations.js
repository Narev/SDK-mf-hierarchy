var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var enumerations;
(function (enumerations) {
    var Condition = (function (_super) {
        __extends(Condition, _super);
        function Condition(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributeValue = new internal.PrimitiveProperty(Condition, this, "attributeValue", "", internal.PrimitiveTypeEnum.String);
            this.__editableVisible = new internal.PrimitiveProperty(Condition, this, "editableVisible", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new Condition() cannot be invoked directly, please use 'model.enumerations.createCondition()'");
        }
        Object.defineProperty(Condition.prototype, "attributeValue", {
            get: function () { return this.__attributeValue.get(); },
            set: function (newValue) { this.__attributeValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Condition.prototype, "editableVisible", {
            get: function () { return this.__editableVisible.get(); },
            set: function (newValue) { this.__editableVisible.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Condition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Condition.create = function (model) {
            return internal.instancehelpers.createElement(model, Condition);
        };
        Condition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.editableVisible = true;
        };
        Condition.typeName = "Enumerations$Condition";
        Condition.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Condition;
    })(internal.Element);
    enumerations.Condition = Condition;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Enumerations relevant section in reference guide}
     */
    var Enumeration = (function (_super) {
        __extends(Enumeration, _super);
        function Enumeration(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__values = new internal.PartListProperty(Enumeration, this, "values", []);
            this._containmentName = "documents";
        }
        Object.defineProperty(Enumeration.prototype, "values", {
            get: function () { return this.__values.get(); },
            set: function (newValue) { this.__values.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Enumeration unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Enumeration.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Enumeration);
        };
        Enumeration.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Enumeration.typeName = "Enumerations$Enumeration";
        Enumeration.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "values": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Enumeration;
    })(projects_1.projects.Document);
    enumerations.Enumeration = Enumeration;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Enumeration+Values relevant section in reference guide}
     */
    var EnumerationValue = (function (_super) {
        __extends(EnumerationValue, _super);
        function EnumerationValue(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(EnumerationValue, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PartProperty(EnumerationValue, this, "caption", null, true);
            this.__image = new internal.ByNameReferenceProperty(EnumerationValue, this, "image", null, "Images$Image");
            if (arguments.length < 4)
                throw new Error("new EnumerationValue() cannot be invoked directly, please use 'model.enumerations.createEnumerationValue()'");
        }
        Object.defineProperty(EnumerationValue.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValue.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValue.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationValue.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new EnumerationValue instance in the SDK and on the server.
         * The new EnumerationValue will be automatically stored in the 'values' property of the parent Enumeration element passed as argument.
         */
        EnumerationValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EnumerationValue, "values", true);
        };
        /*
         * Creates and returns a new EnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationValue.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationValue);
        };
        EnumerationValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
        };
        EnumerationValue.typeName = "Enumerations$EnumerationValue";
        EnumerationValue.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return EnumerationValue;
    })(internal.Element);
    enumerations.EnumerationValue = EnumerationValue;
})(enumerations = exports.enumerations || (exports.enumerations = {}));
var texts_1 = require('./texts');
