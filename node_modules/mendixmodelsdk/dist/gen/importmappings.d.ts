import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { mappings } from './mappings';
export declare namespace importmappings {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `ImportMappings`.
     */
    /**
     * See: {@link https://world.mendix.com/display/refguide6/XML-to-domain+Mappings relevant section in reference guide}
     */
    interface IImportMapping extends mappings.IMappingDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): ImportMapping;
        load(callback: (element: ImportMapping) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/XML-to-domain+Mappings relevant section in reference guide}
     */
    class ImportMapping extends mappings.MappingDocument implements IImportMapping {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __parameter;
        parameter: domainmodels.IEntity;
        parameterQualifiedName: string;
        private __useSubtransactionsForMicroflows;
        useSubtransactionsForMicroflows: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new ImportMapping unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): ImportMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Map+element+to+entity relevant section in reference guide}
     */
    interface IImportObjectMappingElement extends mappings.IObjectMappingElement {
        model: IModel;
        load(): ImportObjectMappingElement;
        load(callback: (element: ImportObjectMappingElement) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Map+element+to+entity relevant section in reference guide}
     */
    class ImportObjectMappingElement extends mappings.ObjectMappingElement implements IImportObjectMappingElement {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ImportObjectMappingElement;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Map+element+to+entity relevant section in reference guide}
     */
    interface IImportValueMappingElement extends mappings.IValueMappingElement {
        model: IModel;
        container: mappings.IObjectMappingElement;
        load(): ImportValueMappingElement;
        load(callback: (element: ImportValueMappingElement) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Map+element+to+entity relevant section in reference guide}
     */
    class ImportValueMappingElement extends mappings.ValueMappingElement implements IImportValueMappingElement {
        model: IModel;
        static typeName: string;
        container: mappings.ObjectMappingElement;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: mappings.ObjectMappingElement): ImportValueMappingElement;
        static create(model: IModel): ImportValueMappingElement;
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { projects } from './projects';
import { IModel } from './base-model';
