var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var javaactions;
(function (javaactions) {
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Java+Actions relevant section in reference guide}
     */
    var JavaAction = (function (_super) {
        __extends(JavaAction, _super);
        function JavaAction(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__parameters = new internal.PartListProperty(JavaAction, this, "parameters", []);
            this.__returnType = new internal.PrimitiveProperty(JavaAction, this, "returnType", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(JavaAction.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaAction.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new JavaAction unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        JavaAction.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, JavaAction);
        };
        JavaAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.returnType = "Boolean";
        };
        JavaAction.typeName = "JavaActions$JavaAction";
        JavaAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "parameters": {
                    "public": {
                        "currentValue": true
                    }
                },
                "returnType": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return JavaAction;
    })(projects_1.projects.Document);
    javaactions.JavaAction = JavaAction;
    var JavaActionParameter = (function (_super) {
        __extends(JavaActionParameter, _super);
        function JavaActionParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(JavaActionParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(JavaActionParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new JavaActionParameter() cannot be invoked directly, please use 'model.javaactions.createJavaActionParameter()'");
        }
        Object.defineProperty(JavaActionParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * The new JavaActionParameter will be automatically stored in the 'parameters' property of the parent JavaAction element passed as argument.
         */
        JavaActionParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionParameter, "parameters", true);
        };
        /*
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionParameter);
        };
        JavaActionParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
        };
        JavaActionParameter.typeName = "JavaActions$JavaActionParameter";
        JavaActionParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return JavaActionParameter;
    })(internal.Element);
    javaactions.JavaActionParameter = JavaActionParameter;
})(javaactions = exports.javaactions || (exports.javaactions = {}));
