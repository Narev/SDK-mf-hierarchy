import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace mappings {
    class ElementType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Undefined: ElementType;
        static Inheritance: ElementType;
        static Choice: ElementType;
        static Object: ElementType;
        static Value: ElementType;
        static Sequence: ElementType;
        static All: ElementType;
    }
    class ObjectHandlingEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Create: ObjectHandlingEnum;
        static Find: ObjectHandlingEnum;
        static Custom: ObjectHandlingEnum;
    }
    class ObjectHandlingBackupEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Create: ObjectHandlingBackupEnum;
        static Ignore: ObjectHandlingBackupEnum;
        static Error: ObjectHandlingBackupEnum;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Mappings`.
     */
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Mapping+Documents relevant section in reference guide}
     */
    interface IMappingDocument extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): MappingDocument;
        load(callback: (element: MappingDocument) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Mapping+Documents relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MappingDocument extends projects.Document implements IMappingDocument {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __rootMappingElements;
        rootMappingElements: internal.IList<ObjectMappingElement>;
        private __xmlSchema;
        xmlSchema: xmlschemas.IXmlSchema;
        xmlSchemaQualifiedName: string;
        private __rootElementName;
        rootElementName: string;
        private __importedWebService;
        importedWebService: webservices.IImportedWebService;
        importedWebServiceQualifiedName: string;
        private __serviceName;
        serviceName: string;
        private __operationName;
        operationName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        _initializeDefaultProperties(): void;
    }
    interface IMappingElement extends internal.IElement {
        model: IModel;
        load(): MappingElement;
        load(callback: (element: MappingElement) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MappingElement extends internal.Element implements IMappingElement {
        model: IModel;
        static typeName: string;
        private __documentation;
        documentation: string;
        private __elementType;
        elementType: ElementType;
        private __path;
        /**
         * The value of this property is conceptually of type Mappings$ElementPath.
         */
        path: string;
        private __minOccurs;
        minOccurs: number;
        private __maxOccurs;
        maxOccurs: number;
        private __nillable;
        nillable: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IMappingMicroflowCall extends internal.IElement {
        model: IModel;
        container: IObjectMappingElement;
        load(): MappingMicroflowCall;
        load(callback: (element: MappingMicroflowCall) => void): any;
    }
    class MappingMicroflowCall extends internal.Element implements IMappingMicroflowCall {
        model: IModel;
        static typeName: string;
        container: ObjectMappingElement;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __parameterMappings;
        parameterMappings: internal.IList<MappingMicroflowParameter>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ObjectMappingElement): MappingMicroflowCall;
        static create(model: IModel): MappingMicroflowCall;
        _initializeDefaultProperties(): void;
    }
    interface IMappingMicroflowParameter extends internal.IElement {
        model: IModel;
        container: IMappingMicroflowCall;
        load(): MappingMicroflowParameter;
        load(callback: (element: MappingMicroflowParameter) => void): any;
    }
    class MappingMicroflowParameter extends internal.Element implements IMappingMicroflowParameter {
        model: IModel;
        static typeName: string;
        container: MappingMicroflowCall;
        private __parameter;
        parameter: microflows.IMicroflowParameter;
        parameterQualifiedName: string;
        private __levelOfParent;
        levelOfParent: number;
        private __valueElementPath;
        /**
         * The value of this property is conceptually of type Mappings$ElementPath.
         */
        valueElementPath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MappingMicroflowCall): MappingMicroflowParameter;
        static create(model: IModel): MappingMicroflowParameter;
        _initializeDefaultProperties(): void;
    }
    interface IObjectMappingElement extends IMappingElement {
        model: IModel;
        load(): ObjectMappingElement;
        load(callback: (element: ObjectMappingElement) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ObjectMappingElement extends MappingElement implements IObjectMappingElement {
        model: IModel;
        static typeName: string;
        private __mappingMicroflowCall;
        mappingMicroflowCall: MappingMicroflowCall;
        private __children;
        children: internal.IList<MappingElement>;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __association;
        association: domainmodels.IAssociationBase;
        associationQualifiedName: string;
        private __objectHandling;
        objectHandling: ObjectHandlingEnum;
        private __objectHandlingBackup;
        objectHandlingBackup: ObjectHandlingBackupEnum;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IValueMappingElement extends IMappingElement {
        model: IModel;
        container: IObjectMappingElement;
        load(): ValueMappingElement;
        load(callback: (element: ValueMappingElement) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ValueMappingElement extends MappingElement implements IValueMappingElement {
        model: IModel;
        static typeName: string;
        container: ObjectMappingElement;
        private __xmlDataType;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        xmlDataType: string;
        private __isKey;
        isKey: boolean;
        private __isXmlAttribute;
        isXmlAttribute: boolean;
        private __isContent;
        isContent: boolean;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __converter;
        converter: microflows.IMicroflow;
        converterQualifiedName: string;
        private __expectedContentTypes;
        expectedContentTypes: string;
        private __maxLength;
        maxLength: number;
        private __fractionDigits;
        fractionDigits: number;
        private __totalDigits;
        totalDigits: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { microflows } from './microflows';
import { webservices } from './webservices';
import { xmlschemas } from './xmlschemas';
import { IModel } from './base-model';
