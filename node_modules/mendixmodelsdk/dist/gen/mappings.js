var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var mappings;
(function (mappings) {
    var ElementType = (function (_super) {
        __extends(ElementType, _super);
        function ElementType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "mappings.ElementType";
        }
        ElementType.Undefined = new ElementType("Undefined", {});
        ElementType.Inheritance = new ElementType("Inheritance", {});
        ElementType.Choice = new ElementType("Choice", {});
        ElementType.Object = new ElementType("Object", {});
        ElementType.Value = new ElementType("Value", {});
        ElementType.Sequence = new ElementType("Sequence", {});
        ElementType.All = new ElementType("All", {});
        return ElementType;
    })(internal.IEnum);
    mappings.ElementType = ElementType;
    var ObjectHandlingEnum = (function (_super) {
        __extends(ObjectHandlingEnum, _super);
        function ObjectHandlingEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "mappings.ObjectHandlingEnum";
        }
        ObjectHandlingEnum.Create = new ObjectHandlingEnum("Create", {});
        ObjectHandlingEnum.Find = new ObjectHandlingEnum("Find", {});
        ObjectHandlingEnum.Custom = new ObjectHandlingEnum("Custom", {});
        return ObjectHandlingEnum;
    })(internal.IEnum);
    mappings.ObjectHandlingEnum = ObjectHandlingEnum;
    var ObjectHandlingBackupEnum = (function (_super) {
        __extends(ObjectHandlingBackupEnum, _super);
        function ObjectHandlingBackupEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "mappings.ObjectHandlingBackupEnum";
        }
        ObjectHandlingBackupEnum.Create = new ObjectHandlingBackupEnum("Create", {});
        ObjectHandlingBackupEnum.Ignore = new ObjectHandlingBackupEnum("Ignore", {});
        ObjectHandlingBackupEnum.Error = new ObjectHandlingBackupEnum("Error", {});
        return ObjectHandlingBackupEnum;
    })(internal.IEnum);
    mappings.ObjectHandlingBackupEnum = ObjectHandlingBackupEnum;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Mapping+Documents relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MappingDocument = (function (_super) {
        __extends(MappingDocument, _super);
        function MappingDocument(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__rootMappingElements = new internal.PartListProperty(MappingDocument, this, "rootMappingElements", []);
            this.__xmlSchema = new internal.ByNameReferenceProperty(MappingDocument, this, "xmlSchema", null, "XmlSchemas$XmlSchema");
            this.__rootElementName = new internal.PrimitiveProperty(MappingDocument, this, "rootElementName", "", internal.PrimitiveTypeEnum.String);
            this.__importedWebService = new internal.ByNameReferenceProperty(MappingDocument, this, "importedWebService", null, "WebServices$ImportedWebService");
            this.__serviceName = new internal.PrimitiveProperty(MappingDocument, this, "serviceName", "", internal.PrimitiveTypeEnum.String);
            this.__operationName = new internal.PrimitiveProperty(MappingDocument, this, "operationName", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(MappingDocument.prototype, "rootMappingElements", {
            get: function () { return this.__rootMappingElements.get(); },
            set: function (newValue) { this.__rootMappingElements.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "xmlSchema", {
            get: function () { return this.__xmlSchema.get(); },
            set: function (newValue) { this.__xmlSchema.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "xmlSchemaQualifiedName", {
            get: function () { return this.__xmlSchema.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "rootElementName", {
            get: function () { return this.__rootElementName.get(); },
            set: function (newValue) { this.__rootElementName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "importedWebService", {
            get: function () { return this.__importedWebService.get(); },
            set: function (newValue) { this.__importedWebService.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "importedWebServiceQualifiedName", {
            get: function () { return this.__importedWebService.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "serviceName", {
            get: function () { return this.__serviceName.get(); },
            set: function (newValue) { this.__serviceName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingDocument.prototype, "operationName", {
            get: function () { return this.__operationName.get(); },
            set: function (newValue) { this.__operationName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MappingDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MappingDocument.typeName = "Mappings$MappingDocument";
        MappingDocument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return MappingDocument;
    })(projects_1.projects.Document);
    mappings.MappingDocument = MappingDocument;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MappingElement = (function (_super) {
        __extends(MappingElement, _super);
        function MappingElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__documentation = new internal.PrimitiveProperty(MappingElement, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__elementType = new internal.EnumProperty(MappingElement, this, "elementType", ElementType.Undefined, ElementType);
            this.__path = new internal.PrimitiveProperty(MappingElement, this, "path", "", internal.PrimitiveTypeEnum.String);
            this.__minOccurs = new internal.PrimitiveProperty(MappingElement, this, "minOccurs", 0, internal.PrimitiveTypeEnum.Integer);
            this.__maxOccurs = new internal.PrimitiveProperty(MappingElement, this, "maxOccurs", 0, internal.PrimitiveTypeEnum.Integer);
            this.__nillable = new internal.PrimitiveProperty(MappingElement, this, "nillable", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new MappingElement() cannot be invoked directly, please use 'model.mappings.createMappingElement()'");
        }
        Object.defineProperty(MappingElement.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingElement.prototype, "elementType", {
            get: function () { return this.__elementType.get(); },
            set: function (newValue) { this.__elementType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingElement.prototype, "path", {
            /**
             * The value of this property is conceptually of type Mappings$ElementPath.
             */
            get: function () { return this.__path.get(); },
            set: function (newValue) { this.__path.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingElement.prototype, "minOccurs", {
            get: function () { return this.__minOccurs.get(); },
            set: function (newValue) { this.__minOccurs.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingElement.prototype, "maxOccurs", {
            get: function () { return this.__maxOccurs.get(); },
            set: function (newValue) { this.__maxOccurs.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingElement.prototype, "nillable", {
            get: function () { return this.__nillable.get(); },
            set: function (newValue) { this.__nillable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MappingElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.elementType = ElementType.Undefined;
        };
        MappingElement.typeName = "Mappings$MappingElement";
        MappingElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MappingElement;
    })(internal.Element);
    mappings.MappingElement = MappingElement;
    var MappingMicroflowCall = (function (_super) {
        __extends(MappingMicroflowCall, _super);
        function MappingMicroflowCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflow = new internal.ByNameReferenceProperty(MappingMicroflowCall, this, "microflow", null, "Microflows$Microflow");
            this.__parameterMappings = new internal.PartListProperty(MappingMicroflowCall, this, "parameterMappings", []);
            if (arguments.length < 4)
                throw new Error("new MappingMicroflowCall() cannot be invoked directly, please use 'model.mappings.createMappingMicroflowCall()'");
        }
        Object.defineProperty(MappingMicroflowCall.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingMicroflowCall.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingMicroflowCall.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MappingMicroflowCall instance in the SDK and on the server.
         * The new MappingMicroflowCall will be automatically stored in the 'mappingMicroflowCall' property of the parent ObjectMappingElement element passed as argument.
         */
        MappingMicroflowCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MappingMicroflowCall, "mappingMicroflowCall", false);
        };
        /*
         * Creates and returns a new MappingMicroflowCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MappingMicroflowCall.create = function (model) {
            return internal.instancehelpers.createElement(model, MappingMicroflowCall);
        };
        MappingMicroflowCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MappingMicroflowCall.typeName = "Mappings$MappingMicroflowCall";
        MappingMicroflowCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MappingMicroflowCall;
    })(internal.Element);
    mappings.MappingMicroflowCall = MappingMicroflowCall;
    var MappingMicroflowParameter = (function (_super) {
        __extends(MappingMicroflowParameter, _super);
        function MappingMicroflowParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameter = new internal.ByNameReferenceProperty(MappingMicroflowParameter, this, "parameter", null, "Microflows$MicroflowParameter");
            this.__levelOfParent = new internal.PrimitiveProperty(MappingMicroflowParameter, this, "levelOfParent", 0, internal.PrimitiveTypeEnum.Integer);
            this.__valueElementPath = new internal.PrimitiveProperty(MappingMicroflowParameter, this, "valueElementPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MappingMicroflowParameter() cannot be invoked directly, please use 'model.mappings.createMappingMicroflowParameter()'");
        }
        Object.defineProperty(MappingMicroflowParameter.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingMicroflowParameter.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingMicroflowParameter.prototype, "levelOfParent", {
            get: function () { return this.__levelOfParent.get(); },
            set: function (newValue) { this.__levelOfParent.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingMicroflowParameter.prototype, "valueElementPath", {
            /**
             * The value of this property is conceptually of type Mappings$ElementPath.
             */
            get: function () { return this.__valueElementPath.get(); },
            set: function (newValue) { this.__valueElementPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MappingMicroflowParameter instance in the SDK and on the server.
         * The new MappingMicroflowParameter will be automatically stored in the 'parameterMappings' property of the parent MappingMicroflowCall element passed as argument.
         */
        MappingMicroflowParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MappingMicroflowParameter, "parameterMappings", true);
        };
        /*
         * Creates and returns a new MappingMicroflowParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MappingMicroflowParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, MappingMicroflowParameter);
        };
        MappingMicroflowParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.levelOfParent = -1;
        };
        MappingMicroflowParameter.typeName = "Mappings$MappingMicroflowParameter";
        MappingMicroflowParameter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MappingMicroflowParameter;
    })(internal.Element);
    mappings.MappingMicroflowParameter = MappingMicroflowParameter;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ObjectMappingElement = (function (_super) {
        __extends(ObjectMappingElement, _super);
        function ObjectMappingElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__mappingMicroflowCall = new internal.PartProperty(ObjectMappingElement, this, "mappingMicroflowCall", null, false);
            this.__children = new internal.PartListProperty(ObjectMappingElement, this, "children", []);
            this.__entity = new internal.ByNameReferenceProperty(ObjectMappingElement, this, "entity", null, "DomainModels$Entity");
            this.__association = new internal.ByNameReferenceProperty(ObjectMappingElement, this, "association", null, "DomainModels$AssociationBase");
            this.__objectHandling = new internal.EnumProperty(ObjectMappingElement, this, "objectHandling", ObjectHandlingEnum.Create, ObjectHandlingEnum);
            this.__objectHandlingBackup = new internal.EnumProperty(ObjectMappingElement, this, "objectHandlingBackup", ObjectHandlingBackupEnum.Create, ObjectHandlingBackupEnum);
            if (arguments.length < 4)
                throw new Error("new ObjectMappingElement() cannot be invoked directly, please use 'model.mappings.createObjectMappingElement()'");
        }
        Object.defineProperty(ObjectMappingElement.prototype, "mappingMicroflowCall", {
            get: function () { return this.__mappingMicroflowCall.get(); },
            set: function (newValue) { this.__mappingMicroflowCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "children", {
            get: function () { return this.__children.get(); },
            set: function (newValue) { this.__children.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "objectHandling", {
            get: function () { return this.__objectHandling.get(); },
            set: function (newValue) { this.__objectHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectMappingElement.prototype, "objectHandlingBackup", {
            get: function () { return this.__objectHandlingBackup.get(); },
            set: function (newValue) { this.__objectHandlingBackup.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ObjectMappingElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectHandling = ObjectHandlingEnum.Create;
            this.objectHandlingBackup = ObjectHandlingBackupEnum.Create;
        };
        ObjectMappingElement.typeName = "Mappings$ObjectMappingElement";
        ObjectMappingElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ObjectMappingElement;
    })(MappingElement);
    mappings.ObjectMappingElement = ObjectMappingElement;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ValueMappingElement = (function (_super) {
        __extends(ValueMappingElement, _super);
        function ValueMappingElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__xmlDataType = new internal.PrimitiveProperty(ValueMappingElement, this, "xmlDataType", "", internal.PrimitiveTypeEnum.String);
            this.__isKey = new internal.PrimitiveProperty(ValueMappingElement, this, "isKey", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isXmlAttribute = new internal.PrimitiveProperty(ValueMappingElement, this, "isXmlAttribute", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isContent = new internal.PrimitiveProperty(ValueMappingElement, this, "isContent", false, internal.PrimitiveTypeEnum.Boolean);
            this.__attribute = new internal.ByNameReferenceProperty(ValueMappingElement, this, "attribute", null, "DomainModels$Attribute");
            this.__converter = new internal.ByNameReferenceProperty(ValueMappingElement, this, "converter", null, "Microflows$Microflow");
            this.__expectedContentTypes = new internal.PrimitiveProperty(ValueMappingElement, this, "expectedContentTypes", "", internal.PrimitiveTypeEnum.String);
            this.__maxLength = new internal.PrimitiveProperty(ValueMappingElement, this, "maxLength", 0, internal.PrimitiveTypeEnum.Integer);
            this.__fractionDigits = new internal.PrimitiveProperty(ValueMappingElement, this, "fractionDigits", 0, internal.PrimitiveTypeEnum.Integer);
            this.__totalDigits = new internal.PrimitiveProperty(ValueMappingElement, this, "totalDigits", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new ValueMappingElement() cannot be invoked directly, please use 'model.mappings.createValueMappingElement()'");
        }
        Object.defineProperty(ValueMappingElement.prototype, "xmlDataType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__xmlDataType.get(); },
            set: function (newValue) { this.__xmlDataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "isKey", {
            get: function () { return this.__isKey.get(); },
            set: function (newValue) { this.__isKey.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "isXmlAttribute", {
            get: function () { return this.__isXmlAttribute.get(); },
            set: function (newValue) { this.__isXmlAttribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "isContent", {
            get: function () { return this.__isContent.get(); },
            set: function (newValue) { this.__isContent.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "converter", {
            get: function () { return this.__converter.get(); },
            set: function (newValue) { this.__converter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "converterQualifiedName", {
            get: function () { return this.__converter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "expectedContentTypes", {
            get: function () { return this.__expectedContentTypes.get(); },
            set: function (newValue) { this.__expectedContentTypes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "maxLength", {
            get: function () { return this.__maxLength.get(); },
            set: function (newValue) { this.__maxLength.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "fractionDigits", {
            get: function () { return this.__fractionDigits.get(); },
            set: function (newValue) { this.__fractionDigits.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueMappingElement.prototype, "totalDigits", {
            get: function () { return this.__totalDigits.get(); },
            set: function (newValue) { this.__totalDigits.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ValueMappingElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.xmlDataType = "Unknown";
            this.maxLength = -1;
            this.fractionDigits = -1;
            this.totalDigits = -1;
        };
        ValueMappingElement.typeName = "Mappings$ValueMappingElement";
        ValueMappingElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ValueMappingElement;
    })(MappingElement);
    mappings.ValueMappingElement = ValueMappingElement;
})(mappings = exports.mappings || (exports.mappings = {}));
