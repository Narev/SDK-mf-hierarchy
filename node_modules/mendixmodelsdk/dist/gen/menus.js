var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var menus;
(function (menus) {
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu relevant section in reference guide}
     */
    var MenuDocument = (function (_super) {
        __extends(MenuDocument, _super);
        function MenuDocument(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__itemCollection = new internal.PartProperty(MenuDocument, this, "itemCollection", null, true);
            this._containmentName = "documents";
        }
        Object.defineProperty(MenuDocument.prototype, "itemCollection", {
            get: function () { return this.__itemCollection.get(); },
            set: function (newValue) { this.__itemCollection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new MenuDocument unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        MenuDocument.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, MenuDocument);
        };
        MenuDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.itemCollection = MenuItemCollection.create(this.model);
        };
        MenuDocument.typeName = "Menus$MenuDocument";
        MenuDocument.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "itemCollection": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return MenuDocument;
    })(projects_1.projects.Document);
    menus.MenuDocument = MenuDocument;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MenuItemContainer = (function (_super) {
        __extends(MenuItemContainer, _super);
        function MenuItemContainer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(MenuItemContainer, this, "items", []);
            if (arguments.length < 4)
                throw new Error("new MenuItemContainer() cannot be invoked directly, please use 'model.menus.createMenuItemContainer()'");
        }
        Object.defineProperty(MenuItemContainer.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MenuItemContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MenuItemContainer.typeName = "Menus$MenuItemContainer";
        MenuItemContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MenuItemContainer;
    })(internal.Element);
    menus.MenuItemContainer = MenuItemContainer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Item relevant section in reference guide}
     */
    var MenuItem = (function (_super) {
        __extends(MenuItem, _super);
        function MenuItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(MenuItem, this, "caption", null, true);
            this.__icon = new internal.PartProperty(MenuItem, this, "icon", null, false);
            this.__action = new internal.PartProperty(MenuItem, this, "action", null, true);
            if (arguments.length < 4)
                throw new Error("new MenuItem() cannot be invoked directly, please use 'model.menus.createMenuItem()'");
        }
        Object.defineProperty(MenuItem.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuItem.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuItem.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MenuItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuItem.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuItem);
        };
        MenuItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
            this.action = pages_1.pages.NoClientAction.create(this.model);
        };
        MenuItem.typeName = "Menus$MenuItem";
        MenuItem.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "action": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return MenuItem;
    })(MenuItemContainer);
    menus.MenuItem = MenuItem;
    var MenuItemCollection = (function (_super) {
        __extends(MenuItemCollection, _super);
        function MenuItemCollection(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new MenuItemCollection() cannot be invoked directly, please use 'model.menus.createMenuItemCollection()'");
        }
        /*
         * Creates and returns a new MenuItemCollection instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuItemCollection.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuItemCollection);
        };
        MenuItemCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MenuItemCollection.typeName = "Menus$MenuItemCollection";
        MenuItemCollection.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MenuItemCollection;
    })(MenuItemContainer);
    menus.MenuItemCollection = MenuItemCollection;
})(menus = exports.menus || (exports.menus = {}));
var pages_1 = require('./pages');
var texts_1 = require('./texts');
