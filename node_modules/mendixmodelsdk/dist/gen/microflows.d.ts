import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from '../common';
import { projects } from './projects';
export declare namespace microflows {
    class ActionActivityColor extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: ActionActivityColor;
        static Red: ActionActivityColor;
        static Orange: ActionActivityColor;
        static Yellow: ActionActivityColor;
        static Green: ActionActivityColor;
        static Blue: ActionActivityColor;
        static Purple: ActionActivityColor;
        static Gray: ActionActivityColor;
    }
    class AggregateFunctionEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Sum: AggregateFunctionEnum;
        static Average: AggregateFunctionEnum;
        static Count: AggregateFunctionEnum;
        static Minimum: AggregateFunctionEnum;
        static Maximum: AggregateFunctionEnum;
    }
    class ChangeActionItemType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Set: ChangeActionItemType;
        static Add: ChangeActionItemType;
        static Remove: ChangeActionItemType;
    }
    class ChangeListActionType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Set: ChangeListActionType;
        static Add: ChangeListActionType;
        static Remove: ChangeListActionType;
        static Clear: ChangeListActionType;
    }
    class CommitEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Yes: CommitEnum;
        static YesWithoutEvents: CommitEnum;
        static No: CommitEnum;
    }
    class ErrorHandlingType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Rollback: ErrorHandlingType;
        static Custom: ErrorHandlingType;
        static CustomWithoutRollBack: ErrorHandlingType;
        static Continue: ErrorHandlingType;
    }
    class LogLevel extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Trace: LogLevel;
        static Debug: LogLevel;
        static Info: LogLevel;
        static Warning: LogLevel;
        static Error: LogLevel;
        static Critical: LogLevel;
    }
    class SortOrderEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Ascending: SortOrderEnum;
        static Descending: SortOrderEnum;
    }
    class LanguageSettingType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static CurrentUser: LanguageSettingType;
        static ProjectDefault: LanguageSettingType;
        static Variable: LanguageSettingType;
    }
    class TargetDocumentType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static HTML: TargetDocumentType;
        static PDF: TargetDocumentType;
        static DOCX: TargetDocumentType;
        static DOC: TargetDocumentType;
        static RTF: TargetDocumentType;
        static ODT: TargetDocumentType;
    }
    class ShowMessageType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Information: ShowMessageType;
        static Warning: ShowMessageType;
        static Error: ShowMessageType;
    }
    class NullValueOption extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static SendAsNil: NullValueOption;
        static LeaveOutElement: NullValueOption;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Microflows`.
     */
    /**
     * TODO: Abstract
     */
    interface IMicroflowObject extends internal.IElement {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): MicroflowObject;
        load(callback: (element: MicroflowObject) => void): any;
    }
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MicroflowObject extends internal.Element implements IMicroflowObject {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __relativeMiddlePoint;
        relativeMiddlePoint: common.IPoint;
        private __size;
        size: common.ISize;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: abstract element
     */
    interface IActivity extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): Activity;
        load(callback: (element: Activity) => void): any;
    }
    /**
     * TODO: abstract element
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Activity extends MicroflowObject implements IActivity {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Activities relevant section in reference guide}
     */
    interface IActionActivity extends IActivity {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): ActionActivity;
        load(callback: (element: ActionActivity) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Activities relevant section in reference guide}
     */
    class ActionActivity extends Activity implements IActionActivity {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __action;
        action: MicroflowAction;
        private __caption;
        caption: string;
        private __autoGenerateCaption;
        autoGenerateCaption: boolean;
        private __backgroundColor;
        backgroundColor: ActionActivityColor;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): ActionActivity;
        static create(model: IModel): ActionActivity;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IRequestHandling extends internal.IElement {
        model: IModel;
        container: IWebServiceCallAction;
        load(): RequestHandling;
        load(callback: (element: RequestHandling) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class RequestHandling extends internal.Element implements IRequestHandling {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IAdvancedRequestHandling extends IRequestHandling {
        model: IModel;
        container: IWebServiceCallAction;
        load(): AdvancedRequestHandling;
        load(callback: (element: AdvancedRequestHandling) => void): any;
    }
    /**
     * TODO
     */
    class AdvancedRequestHandling extends RequestHandling implements IAdvancedRequestHandling {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        private __parameterMappings;
        parameterMappings: internal.IList<WebServiceOperationAdvancedParameterMapping>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WebServiceCallAction): AdvancedRequestHandling;
        static create(model: IModel): AdvancedRequestHandling;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IMicroflowAction extends internal.IElement {
        model: IModel;
        container: IActionActivity;
        load(): MicroflowAction;
        load(callback: (element: MicroflowAction) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MicroflowAction extends internal.Element implements IMicroflowAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __errorHandlingType;
        errorHandlingType: ErrorHandlingType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Aggregate+List relevant section in reference guide}
     */
    interface IAggregateListAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): AggregateListAction;
        load(callback: (element: AggregateListAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Aggregate+List relevant section in reference guide}
     */
    class AggregateListAction extends MicroflowAction implements IAggregateListAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __inputListVariableName;
        inputListVariableName: string;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __aggregateFunction;
        aggregateFunction: AggregateFunctionEnum;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): AggregateListAction;
        static create(model: IModel): AggregateListAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation relevant section in reference guide}
     */
    interface IAnnotation extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): Annotation;
        load(callback: (element: Annotation) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation relevant section in reference guide}
     */
    class Annotation extends MicroflowObject implements IAnnotation {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __caption;
        caption: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): Annotation;
        static create(model: IModel): Annotation;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO abstract
     */
    interface IFlow extends internal.IElement {
        model: IModel;
        container: IMicroflowBase;
        load(): Flow;
        load(callback: (element: Flow) => void): any;
    }
    /**
     * TODO abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Flow extends internal.Element implements IFlow {
        model: IModel;
        static typeName: string;
        container: MicroflowBase;
        private __origin;
        origin: MicroflowObject;
        private __destination;
        destination: MicroflowObject;
        private __originConnectionIndex;
        originConnectionIndex: number;
        private __destinationConnectionIndex;
        destinationConnectionIndex: number;
        private __originBezierVector;
        originBezierVector: common.ISize;
        private __destinationBezierVector;
        destinationBezierVector: common.ISize;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation+Flow relevant section in reference guide}
     */
    interface IAnnotationFlow extends IFlow {
        model: IModel;
        container: IMicroflowBase;
        load(): AnnotationFlow;
        load(callback: (element: AnnotationFlow) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation+Flow relevant section in reference guide}
     */
    class AnnotationFlow extends Flow implements IAnnotationFlow {
        model: IModel;
        static typeName: string;
        container: MicroflowBase;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowBase): AnnotationFlow;
        static create(model: IModel): AnnotationFlow;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: Missing in ref guide ?
     */
    interface IAppServiceCallAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): AppServiceCallAction;
        load(callback: (element: AppServiceCallAction) => void): any;
    }
    /**
     * TODO: Missing in ref guide ?
     */
    class AppServiceCallAction extends MicroflowAction implements IAppServiceCallAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __appServiceAction;
        appServiceAction: appservices.IAppServiceAction;
        appServiceActionQualifiedName: string;
        private __parameterMappings;
        parameterMappings: internal.IList<AppServiceCallParameterMapping>;
        private __useVariable;
        useVariable: boolean;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): AppServiceCallAction;
        static create(model: IModel): AppServiceCallAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: Missing in ref guide ?
     */
    interface IAppServiceCallParameterMapping extends internal.IElement {
        model: IModel;
        container: IAppServiceCallAction;
        load(): AppServiceCallParameterMapping;
        load(callback: (element: AppServiceCallParameterMapping) => void): any;
    }
    /**
     * TODO: Missing in ref guide ?
     */
    class AppServiceCallParameterMapping extends internal.Element implements IAppServiceCallParameterMapping {
        model: IModel;
        static typeName: string;
        container: AppServiceCallAction;
        private __parameter;
        parameter: appservices.IAppServiceActionParameter;
        parameterQualifiedName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AppServiceCallAction): AppServiceCallParameterMapping;
        static create(model: IModel): AppServiceCallParameterMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IRetrieveSource extends internal.IElement {
        model: IModel;
        container: IRetrieveAction;
        load(): RetrieveSource;
        load(callback: (element: RetrieveSource) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class RetrieveSource extends internal.Element implements IRetrieveSource {
        model: IModel;
        static typeName: string;
        container: RetrieveAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IAssociationRetrieveSource extends IRetrieveSource {
        model: IModel;
        container: IRetrieveAction;
        load(): AssociationRetrieveSource;
        load(callback: (element: AssociationRetrieveSource) => void): any;
    }
    /**
     * TODO
     */
    class AssociationRetrieveSource extends RetrieveSource implements IAssociationRetrieveSource {
        model: IModel;
        static typeName: string;
        container: RetrieveAction;
        private __startVariableName;
        startVariableName: string;
        private __association;
        association: domainmodels.IAssociationBase;
        associationQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: RetrieveAction): AssociationRetrieveSource;
        static create(model: IModel): AssociationRetrieveSource;
        _initializeDefaultProperties(): void;
    }
    interface IListOperation extends internal.IElement {
        model: IModel;
        container: IListOperationAction;
        load(): ListOperation;
        load(callback: (element: ListOperation) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ListOperation extends internal.Element implements IListOperation {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        private __listVariableName;
        listVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IBinaryListOperation extends IListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): BinaryListOperation;
        load(callback: (element: BinaryListOperation) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class BinaryListOperation extends ListOperation implements IBinaryListOperation {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        private __secondListOrObjectVariableName;
        secondListOrObjectVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Break+Event relevant section in reference guide}
     */
    interface IBreakEvent extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): BreakEvent;
        load(callback: (element: BreakEvent) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Break+Event relevant section in reference guide}
     */
    class BreakEvent extends MicroflowObject implements IBreakEvent {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): BreakEvent;
        static create(model: IModel): BreakEvent;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ICaseValue extends internal.IElement {
        model: IModel;
        container: ISequenceFlow;
        load(): CaseValue;
        load(callback: (element: CaseValue) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class CaseValue extends internal.Element implements ICaseValue {
        model: IModel;
        static typeName: string;
        container: SequenceFlow;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cast+Object relevant section in reference guide}
     */
    interface ICastAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): CastAction;
        load(callback: (element: CastAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cast+Object relevant section in reference guide}
     */
    class CastAction extends MicroflowAction implements ICastAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CastAction;
        static create(model: IModel): CastAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+List relevant section in reference guide}
     */
    interface IChangeListAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ChangeListAction;
        load(callback: (element: ChangeListAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+List relevant section in reference guide}
     */
    class ChangeListAction extends MicroflowAction implements IChangeListAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __changeVariableName;
        changeVariableName: string;
        private __value;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        value: string;
        private __type;
        type: ChangeListActionType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ChangeListAction;
        static create(model: IModel): ChangeListAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IChangeMembersAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ChangeMembersAction;
        load(callback: (element: ChangeMembersAction) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ChangeMembersAction extends MicroflowAction implements IChangeMembersAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __items;
        items: internal.IList<MemberChange>;
        private __refreshInClient;
        refreshInClient: boolean;
        private __commit;
        commit: CommitEnum;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Object relevant section in reference guide}
     */
    interface IChangeObjectAction extends IChangeMembersAction {
        model: IModel;
        container: IActionActivity;
        load(): ChangeObjectAction;
        load(callback: (element: ChangeObjectAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Object relevant section in reference guide}
     */
    class ChangeObjectAction extends ChangeMembersAction implements IChangeObjectAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __changeVariableName;
        changeVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ChangeObjectAction;
        static create(model: IModel): ChangeObjectAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Variable relevant section in reference guide}
     */
    interface IChangeVariableAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ChangeVariableAction;
        load(callback: (element: ChangeVariableAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Variable relevant section in reference guide}
     */
    class ChangeVariableAction extends MicroflowAction implements IChangeVariableAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __changeVariableName;
        changeVariableName: string;
        private __value;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ChangeVariableAction;
        static create(model: IModel): ChangeVariableAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Close+Form relevant section in reference guide}
     */
    interface ICloseFormAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): CloseFormAction;
        load(callback: (element: CloseFormAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Close+Form relevant section in reference guide}
     */
    class CloseFormAction extends MicroflowAction implements ICloseFormAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CloseFormAction;
        static create(model: IModel): CloseFormAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Commit+Object(s) relevant section in reference guide}
     */
    interface ICommitAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): CommitAction;
        load(callback: (element: CommitAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Commit+Object(s) relevant section in reference guide}
     */
    class CommitAction extends MicroflowAction implements ICommitAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __withEvents;
        withEvents: boolean;
        private __commitVariableName;
        commitVariableName: string;
        private __refreshInClient;
        refreshInClient: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CommitAction;
        static create(model: IModel): CommitAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    interface IRange extends internal.IElement {
        model: IModel;
        load(): Range;
        load(callback: (element: Range) => void): any;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Range extends internal.Element implements IRange {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    interface IConstantRange extends IRange {
        model: IModel;
        load(): ConstantRange;
        load(callback: (element: ConstantRange) => void): any;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    class ConstantRange extends Range implements IConstantRange {
        model: IModel;
        static typeName: string;
        private __singleObject;
        singleObject: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ConstantRange;
        _initializeDefaultProperties(): void;
    }
    interface IContains extends IBinaryListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Contains;
        load(callback: (element: Contains) => void): any;
    }
    class Contains extends BinaryListOperation implements IContains {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Contains;
        static create(model: IModel): Contains;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Continue+Event relevant section in reference guide}
     */
    interface IContinueEvent extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): ContinueEvent;
        load(callback: (element: ContinueEvent) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Continue+Event relevant section in reference guide}
     */
    class ContinueEvent extends MicroflowObject implements IContinueEvent {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): ContinueEvent;
        static create(model: IModel): ContinueEvent;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+List relevant section in reference guide}
     */
    interface ICreateListAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): CreateListAction;
        load(callback: (element: CreateListAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+List relevant section in reference guide}
     */
    class CreateListAction extends MicroflowAction implements ICreateListAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CreateListAction;
        static create(model: IModel): CreateListAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Object relevant section in reference guide}
     */
    interface ICreateObjectAction extends IChangeMembersAction {
        model: IModel;
        container: IActionActivity;
        load(): CreateObjectAction;
        load(callback: (element: CreateObjectAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Object relevant section in reference guide}
     */
    class CreateObjectAction extends ChangeMembersAction implements ICreateObjectAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CreateObjectAction;
        static create(model: IModel): CreateObjectAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Variable relevant section in reference guide}
     */
    interface ICreateVariableAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): CreateVariableAction;
        load(callback: (element: CreateVariableAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Variable relevant section in reference guide}
     */
    class CreateVariableAction extends MicroflowAction implements ICreateVariableAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __variableName;
        variableName: string;
        private __variableDataType;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        variableDataType: string;
        private __initialValue;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        initialValue: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): CreateVariableAction;
        static create(model: IModel): CreateVariableAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    interface ICustomRange extends IRange {
        model: IModel;
        load(): CustomRange;
        load(callback: (element: CustomRange) => void): any;
    }
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    class CustomRange extends Range implements ICustomRange {
        model: IModel;
        static typeName: string;
        private __limitExpression;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        limitExpression: string;
        private __offsetExpression;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        offsetExpression: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): CustomRange;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ICustomRequestHandling extends IRequestHandling {
        model: IModel;
        container: IWebServiceCallAction;
        load(): CustomRequestHandling;
        load(callback: (element: CustomRequestHandling) => void): any;
    }
    /**
     * TODO
     */
    class CustomRequestHandling extends RequestHandling implements ICustomRequestHandling {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        private __template;
        template: StringTemplate;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WebServiceCallAction): CustomRequestHandling;
        static create(model: IModel): CustomRequestHandling;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IDatabaseRetrieveSource extends IRetrieveSource {
        model: IModel;
        container: IRetrieveAction;
        load(): DatabaseRetrieveSource;
        load(callback: (element: DatabaseRetrieveSource) => void): any;
    }
    /**
     * TODO
     */
    class DatabaseRetrieveSource extends RetrieveSource implements IDatabaseRetrieveSource {
        model: IModel;
        static typeName: string;
        container: RetrieveAction;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __range;
        range: Range;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __sortItemList;
        sortItemList: SortItemList;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: RetrieveAction): DatabaseRetrieveSource;
        static create(model: IModel): DatabaseRetrieveSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Object(s) relevant section in reference guide}
     */
    interface IDeleteAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): DeleteAction;
        load(callback: (element: DeleteAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Object(s) relevant section in reference guide}
     */
    class DeleteAction extends MicroflowAction implements IDeleteAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __deleteVariableName;
        deleteVariableName: string;
        private __refreshInClient;
        refreshInClient: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): DeleteAction;
        static create(model: IModel): DeleteAction;
        _initializeDefaultProperties(): void;
    }
    interface IDocumentTemplateParameterMapping extends internal.IElement {
        model: IModel;
        container: IGenerateDocumentAction;
        load(): DocumentTemplateParameterMapping;
        load(callback: (element: DocumentTemplateParameterMapping) => void): any;
    }
    class DocumentTemplateParameterMapping extends internal.Element implements IDocumentTemplateParameterMapping {
        model: IModel;
        static typeName: string;
        container: GenerateDocumentAction;
        private __widgetName;
        widgetName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: GenerateDocumentAction): DocumentTemplateParameterMapping;
        static create(model: IModel): DocumentTemplateParameterMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Download+File relevant section in reference guide}
     */
    interface IDownloadFileAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): DownloadFileAction;
        load(callback: (element: DownloadFileAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Download+File relevant section in reference guide}
     */
    class DownloadFileAction extends MicroflowAction implements IDownloadFileAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __fileDocumentVariableName;
        fileDocumentVariableName: string;
        private __showFileInBrowser;
        showFileInBrowser: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): DownloadFileAction;
        static create(model: IModel): DownloadFileAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/End+Event relevant section in reference guide}
     */
    interface IEndEvent extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): EndEvent;
        load(callback: (element: EndEvent) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/End+Event relevant section in reference guide}
     */
    class EndEvent extends MicroflowObject implements IEndEvent {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __returnValue;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        returnValue: string;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): EndEvent;
        static create(model: IModel): EndEvent;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IEnumerationCase extends ICaseValue {
        model: IModel;
        container: ISequenceFlow;
        load(): EnumerationCase;
        load(callback: (element: EnumerationCase) => void): any;
    }
    /**
     * TODO
     */
    class EnumerationCase extends CaseValue implements IEnumerationCase {
        model: IModel;
        static typeName: string;
        container: SequenceFlow;
        private __value;
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SequenceFlow): EnumerationCase;
        static create(model: IModel): EnumerationCase;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Error+Event relevant section in reference guide}
     */
    interface IErrorEvent extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): ErrorEvent;
        load(callback: (element: ErrorEvent) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Error+Event relevant section in reference guide}
     */
    class ErrorEvent extends MicroflowObject implements IErrorEvent {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): ErrorEvent;
        static create(model: IModel): ErrorEvent;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Merge relevant section in reference guide}
     */
    interface IExclusiveMerge extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): ExclusiveMerge;
        load(callback: (element: ExclusiveMerge) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Merge relevant section in reference guide}
     */
    class ExclusiveMerge extends MicroflowObject implements IExclusiveMerge {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): ExclusiveMerge;
        static create(model: IModel): ExclusiveMerge;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Exclusive+Split relevant section in reference guide}
     */
    interface IExclusiveSplit extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): ExclusiveSplit;
        load(callback: (element: ExclusiveSplit) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Exclusive+Split relevant section in reference guide}
     */
    class ExclusiveSplit extends MicroflowObject implements IExclusiveSplit {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __splitCondition;
        splitCondition: SplitCondition;
        private __caption;
        caption: string;
        private __errorHandlingType;
        errorHandlingType: ErrorHandlingType;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): ExclusiveSplit;
        static create(model: IModel): ExclusiveSplit;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+XML relevant section in reference guide}
     */
    interface IExportXmlAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ExportXmlAction;
        load(callback: (element: ExportXmlAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+XML relevant section in reference guide}
     */
    class ExportXmlAction extends MicroflowAction implements IExportXmlAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __mapping;
        mapping: exportmappings.IExportMapping;
        mappingQualifiedName: string;
        private __mappingArgumentVariableName;
        mappingArgumentVariableName: string;
        private __outputMethod;
        outputMethod: OutputMethod;
        private __isValidationRequired;
        isValidationRequired: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ExportXmlAction;
        static create(model: IModel): ExportXmlAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO : Abstract
     */
    interface ISplitCondition extends internal.IElement {
        model: IModel;
        container: IExclusiveSplit;
        load(): SplitCondition;
        load(callback: (element: SplitCondition) => void): any;
    }
    /**
     * TODO : Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SplitCondition extends internal.Element implements ISplitCondition {
        model: IModel;
        static typeName: string;
        container: ExclusiveSplit;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IExpressionSplitCondition extends ISplitCondition {
        model: IModel;
        container: IExclusiveSplit;
        load(): ExpressionSplitCondition;
        load(callback: (element: ExpressionSplitCondition) => void): any;
    }
    class ExpressionSplitCondition extends SplitCondition implements IExpressionSplitCondition {
        model: IModel;
        static typeName: string;
        container: ExclusiveSplit;
        private __expression;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        expression: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ExclusiveSplit): ExpressionSplitCondition;
        static create(model: IModel): ExpressionSplitCondition;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IOutputMethod extends internal.IElement {
        model: IModel;
        container: IExportXmlAction;
        load(): OutputMethod;
        load(callback: (element: OutputMethod) => void): any;
    }
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class OutputMethod extends internal.Element implements IOutputMethod {
        model: IModel;
        static typeName: string;
        container: ExportXmlAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IFileDocumentExport extends IOutputMethod {
        model: IModel;
        container: IExportXmlAction;
        load(): FileDocumentExport;
        load(callback: (element: FileDocumentExport) => void): any;
    }
    /**
     * TODO
     */
    class FileDocumentExport extends OutputMethod implements IFileDocumentExport {
        model: IModel;
        static typeName: string;
        container: ExportXmlAction;
        private __targetDocumentVariableName;
        targetDocumentVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ExportXmlAction): FileDocumentExport;
        static create(model: IModel): FileDocumentExport;
        _initializeDefaultProperties(): void;
    }
    interface IInspectAttribute extends IListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): InspectAttribute;
        load(callback: (element: InspectAttribute) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class InspectAttribute extends ListOperation implements IInspectAttribute {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        private __expression;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        expression: string;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IFilter extends IInspectAttribute {
        model: IModel;
        container: IListOperationAction;
        load(): Filter;
        load(callback: (element: Filter) => void): any;
    }
    class Filter extends InspectAttribute implements IFilter {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Filter;
        static create(model: IModel): Filter;
        _initializeDefaultProperties(): void;
    }
    interface IFind extends IInspectAttribute {
        model: IModel;
        container: IListOperationAction;
        load(): Find;
        load(callback: (element: Find) => void): any;
    }
    class Find extends InspectAttribute implements IFind {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Find;
        static create(model: IModel): Find;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Generate+Document relevant section in reference guide}
     */
    interface IGenerateDocumentAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): GenerateDocumentAction;
        load(callback: (element: GenerateDocumentAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Generate+Document relevant section in reference guide}
     */
    class GenerateDocumentAction extends MicroflowAction implements IGenerateDocumentAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __parameterMappings;
        parameterMappings: internal.IList<DocumentTemplateParameterMapping>;
        private __fileVariableName;
        fileVariableName: string;
        private __languageVariableName;
        languageVariableName: string;
        private __documentType;
        documentType: TargetDocumentType;
        private __languageSetting;
        languageSetting: LanguageSettingType;
        private __documentTemplate;
        documentTemplate: documenttemplates.IDocumentTemplate;
        documentTemplateQualifiedName: string;
        private __overrideTopMargin;
        overrideTopMargin: boolean;
        private __overrideBottomMargin;
        overrideBottomMargin: boolean;
        private __overrideLeftMargin;
        overrideLeftMargin: boolean;
        private __overrideRightMargin;
        overrideRightMargin: boolean;
        private __marginLeftInInch;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        marginLeftInInch: string;
        private __marginRightInInch;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        marginRightInInch: string;
        private __marginTopInInch;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        marginTopInInch: string;
        private __marginBottomInInch;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        marginBottomInInch: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): GenerateDocumentAction;
        static create(model: IModel): GenerateDocumentAction;
        _initializeDefaultProperties(): void;
    }
    interface IHead extends IListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Head;
        load(callback: (element: Head) => void): any;
    }
    class Head extends ListOperation implements IHead {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Head;
        static create(model: IModel): Head;
        _initializeDefaultProperties(): void;
    }
    interface IHttpConfiguration extends internal.IElement {
        model: IModel;
        container: IWebServiceCallAction;
        load(): HttpConfiguration;
        load(callback: (element: HttpConfiguration) => void): any;
    }
    class HttpConfiguration extends internal.Element implements IHttpConfiguration {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        private __overrideLocation;
        overrideLocation: boolean;
        private __customLocation;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        customLocation: string;
        private __useAuthentication;
        useAuthentication: boolean;
        private __httpAuthenticationUserName;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        httpAuthenticationUserName: string;
        private __authenticationPassword;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        authenticationPassword: string;
        private __headerEntries;
        headerEntries: internal.IList<HttpHeaderEntry>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WebServiceCallAction): HttpConfiguration;
        static create(model: IModel): HttpConfiguration;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IHttpHeaderEntry extends internal.IElement {
        model: IModel;
        container: IHttpConfiguration;
        load(): HttpHeaderEntry;
        load(callback: (element: HttpHeaderEntry) => void): any;
    }
    /**
     * TODO
     */
    class HttpHeaderEntry extends internal.Element implements IHttpHeaderEntry {
        model: IModel;
        static typeName: string;
        container: HttpConfiguration;
        private __key;
        key: string;
        private __value;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: HttpConfiguration): HttpHeaderEntry;
        static create(model: IModel): HttpHeaderEntry;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IImportMappingCall extends internal.IElement {
        model: IModel;
        container: IResultHandling;
        load(): ImportMappingCall;
        load(callback: (element: ImportMappingCall) => void): any;
    }
    /**
     * TODO
     */
    class ImportMappingCall extends internal.Element implements IImportMappingCall {
        model: IModel;
        static typeName: string;
        container: ResultHandling;
        private __mapping;
        mapping: importmappings.IImportMapping;
        mappingQualifiedName: string;
        private __mappingArgumentVariableName;
        mappingArgumentVariableName: string;
        private __range;
        range: Range;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ResultHandling): ImportMappingCall;
        static create(model: IModel): ImportMappingCall;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Import+XML relevant section in reference guide}
     */
    interface IImportXmlAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ImportXmlAction;
        load(callback: (element: ImportXmlAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Import+XML relevant section in reference guide}
     */
    class ImportXmlAction extends MicroflowAction implements IImportXmlAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __xmlDocumentVariableName;
        xmlDocumentVariableName: string;
        private __resultHandling;
        resultHandling: ResultHandling;
        private __isValidationRequired;
        isValidationRequired: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ImportXmlAction;
        static create(model: IModel): ImportXmlAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IInheritanceCase extends ICaseValue {
        model: IModel;
        container: ISequenceFlow;
        load(): InheritanceCase;
        load(callback: (element: InheritanceCase) => void): any;
    }
    /**
     * TODO
     */
    class InheritanceCase extends CaseValue implements IInheritanceCase {
        model: IModel;
        static typeName: string;
        container: SequenceFlow;
        private __value;
        value: domainmodels.IEntity;
        valueQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SequenceFlow): InheritanceCase;
        static create(model: IModel): InheritanceCase;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Inheritance+Split relevant section in reference guide}
     */
    interface IInheritanceSplit extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): InheritanceSplit;
        load(callback: (element: InheritanceSplit) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Inheritance+Split relevant section in reference guide}
     */
    class InheritanceSplit extends MicroflowObject implements IInheritanceSplit {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __splitVariableName;
        splitVariableName: string;
        private __caption;
        caption: string;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): InheritanceSplit;
        static create(model: IModel): InheritanceSplit;
        _initializeDefaultProperties(): void;
    }
    interface IIntersect extends IBinaryListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Intersect;
        load(callback: (element: Intersect) => void): any;
    }
    class Intersect extends BinaryListOperation implements IIntersect {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Intersect;
        static create(model: IModel): Intersect;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Java+Action+Call relevant section in reference guide}
     */
    interface IJavaActionCallAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): JavaActionCallAction;
        load(callback: (element: JavaActionCallAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Java+Action+Call relevant section in reference guide}
     */
    class JavaActionCallAction extends MicroflowAction implements IJavaActionCallAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __javaAction;
        javaAction: javaactions.IJavaAction;
        javaActionQualifiedName: string;
        private __parameterMappings;
        parameterMappings: internal.IList<JavaActionParameterMapping>;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): JavaActionCallAction;
        static create(model: IModel): JavaActionCallAction;
        _initializeDefaultProperties(): void;
    }
    interface IJavaActionParameterMapping extends internal.IElement {
        model: IModel;
        container: IJavaActionCallAction;
        load(): JavaActionParameterMapping;
        load(callback: (element: JavaActionParameterMapping) => void): any;
    }
    class JavaActionParameterMapping extends internal.Element implements IJavaActionParameterMapping {
        model: IModel;
        static typeName: string;
        container: JavaActionCallAction;
        private __parameter;
        parameter: javaactions.IJavaActionParameter;
        parameterQualifiedName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: JavaActionCallAction): JavaActionParameterMapping;
        static create(model: IModel): JavaActionParameterMapping;
        _initializeDefaultProperties(): void;
    }
    interface IListEquals extends IBinaryListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): ListEquals;
        load(callback: (element: ListEquals) => void): any;
    }
    class ListEquals extends BinaryListOperation implements IListEquals {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): ListEquals;
        static create(model: IModel): ListEquals;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+Operation relevant section in reference guide}
     */
    interface IListOperationAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ListOperationAction;
        load(callback: (element: ListOperationAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+Operation relevant section in reference guide}
     */
    class ListOperationAction extends MicroflowAction implements IListOperationAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __operation;
        operation: ListOperation;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ListOperationAction;
        static create(model: IModel): ListOperationAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Log+Message relevant section in reference guide}
     */
    interface ILogMessageAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): LogMessageAction;
        load(callback: (element: LogMessageAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Log+Message relevant section in reference guide}
     */
    class LogMessageAction extends MicroflowAction implements ILogMessageAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __level;
        level: LogLevel;
        private __node;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        node: string;
        private __messageTemplate;
        messageTemplate: StringTemplate;
        private __includeLatestStackTrace;
        includeLatestStackTrace: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): LogMessageAction;
        static create(model: IModel): LogMessageAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Loop relevant section in reference guide}
     */
    interface ILoopedActivity extends IActivity {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): LoopedActivity;
        load(callback: (element: LoopedActivity) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Loop relevant section in reference guide}
     */
    class LoopedActivity extends Activity implements ILoopedActivity {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __objectCollection;
        objectCollection: MicroflowObjectCollection;
        private __iteratedListVariableName;
        iteratedListVariableName: string;
        private __loopVariableName;
        loopVariableName: string;
        private __errorHandlingType;
        errorHandlingType: ErrorHandlingType;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): LoopedActivity;
        static create(model: IModel): LoopedActivity;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IMappingRequestHandling extends IRequestHandling {
        model: IModel;
        container: IWebServiceCallAction;
        load(): MappingRequestHandling;
        load(callback: (element: MappingRequestHandling) => void): any;
    }
    /**
     * TODO
     */
    class MappingRequestHandling extends RequestHandling implements IMappingRequestHandling {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        private __mapping;
        mapping: exportmappings.IExportMapping;
        mappingQualifiedName: string;
        private __mappingArgumentVariableName;
        mappingArgumentVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WebServiceCallAction): MappingRequestHandling;
        static create(model: IModel): MappingRequestHandling;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IMemberChange extends internal.IElement {
        model: IModel;
        container: IChangeMembersAction;
        load(): MemberChange;
        load(callback: (element: MemberChange) => void): any;
    }
    /**
     * TODO
     */
    class MemberChange extends internal.Element implements IMemberChange {
        model: IModel;
        static typeName: string;
        container: ChangeMembersAction;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __association;
        association: domainmodels.IAssociationBase;
        associationQualifiedName: string;
        private __type;
        type: ChangeActionItemType;
        private __value;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ChangeMembersAction): MemberChange;
        static create(model: IModel): MemberChange;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: Abstract
     */
    interface IMicroflowBase extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): MicroflowBase;
        load(callback: (element: MicroflowBase) => void): any;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        returnType: string;
    }
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MicroflowBase extends projects.Document implements IMicroflowBase {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __objectCollection;
        objectCollection: MicroflowObjectCollection;
        private __flows;
        flows: internal.IList<Flow>;
        private __returnType;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        returnType: string;
        private __applyEntityAccess;
        applyEntityAccess: boolean;
        private __markAsUsed;
        markAsUsed: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflows relevant section in reference guide}
     */
    interface IMicroflow extends IMicroflowBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): Microflow;
        load(callback: (element: Microflow) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflows relevant section in reference guide}
     */
    class Microflow extends MicroflowBase implements IMicroflow {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __allowedModuleRoles;
        allowedModuleRoles: internal.IList<security.IModuleRole>;
        allowedModuleRolesQualifiedNames: string[];
        private __allowConcurrentExecution;
        allowConcurrentExecution: boolean;
        private __concurrencyErrorMessage;
        concurrencyErrorMessage: texts.Text;
        private __concurrencyErrorMicroflow;
        concurrencyErrorMicroflow: IMicroflow;
        concurrencyErrorMicroflowQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Microflow unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Microflow;
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowCall extends internal.IElement {
        model: IModel;
        container: IMicroflowCallAction;
        load(): MicroflowCall;
        load(callback: (element: MicroflowCall) => void): any;
    }
    class MicroflowCall extends internal.Element implements IMicroflowCall {
        model: IModel;
        static typeName: string;
        container: MicroflowCallAction;
        private __microflow;
        microflow: IMicroflow;
        microflowQualifiedName: string;
        private __parameterMappings;
        parameterMappings: internal.IList<MicroflowCallParameterMapping>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowCallAction): MicroflowCall;
        static create(model: IModel): MicroflowCall;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflow+Call relevant section in reference guide}
     */
    interface IMicroflowCallAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): MicroflowCallAction;
        load(callback: (element: MicroflowCallAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflow+Call relevant section in reference guide}
     */
    class MicroflowCallAction extends MicroflowAction implements IMicroflowCallAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __microflowCall;
        microflowCall: MicroflowCall;
        private __useReturnVariable;
        useReturnVariable: boolean;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): MicroflowCallAction;
        static create(model: IModel): MicroflowCallAction;
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowCallParameterMapping extends internal.IElement {
        model: IModel;
        container: IMicroflowCall;
        load(): MicroflowCallParameterMapping;
        load(callback: (element: MicroflowCallParameterMapping) => void): any;
    }
    class MicroflowCallParameterMapping extends internal.Element implements IMicroflowCallParameterMapping {
        model: IModel;
        static typeName: string;
        container: MicroflowCall;
        private __parameter;
        parameter: IMicroflowParameter;
        parameterQualifiedName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowCall): MicroflowCallParameterMapping;
        static create(model: IModel): MicroflowCallParameterMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO: artificial object
     */
    interface IMicroflowObjectCollection extends internal.IElement {
        model: IModel;
        load(): MicroflowObjectCollection;
        load(callback: (element: MicroflowObjectCollection) => void): any;
    }
    /**
     * TODO: artificial object
     */
    class MicroflowObjectCollection extends internal.Element implements IMicroflowObjectCollection {
        model: IModel;
        static typeName: string;
        private __objects;
        objects: internal.IList<MicroflowObject>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MicroflowObjectCollection;
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowParameterBase extends internal.IElement {
        model: IModel;
        container: IMicroflowBase;
        load(): MicroflowParameterBase;
        load(callback: (element: MicroflowParameterBase) => void): any;
        name: string;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MicroflowParameterBase extends internal.Element implements IMicroflowParameterBase {
        model: IModel;
        static typeName: string;
        container: MicroflowBase;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    interface IMicroflowParameter extends IMicroflowParameterBase {
        model: IModel;
        container: IMicroflow;
        load(): MicroflowParameter;
        load(callback: (element: MicroflowParameter) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    class MicroflowParameter extends MicroflowParameterBase implements IMicroflowParameter {
        model: IModel;
        static typeName: string;
        container: Microflow;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowParameterObject extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): MicroflowParameterObject;
        load(callback: (element: MicroflowParameterObject) => void): any;
    }
    class MicroflowParameterObject extends MicroflowObject implements IMicroflowParameterObject {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        private __name;
        name: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): MicroflowParameterObject;
        static create(model: IModel): MicroflowParameterObject;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface INoCase extends ICaseValue {
        model: IModel;
        container: ISequenceFlow;
        load(): NoCase;
        load(callback: (element: NoCase) => void): any;
    }
    /**
     * TODO
     */
    class NoCase extends CaseValue implements INoCase {
        model: IModel;
        static typeName: string;
        container: SequenceFlow;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SequenceFlow): NoCase;
        static create(model: IModel): NoCase;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IResultHandling extends internal.IElement {
        model: IModel;
        load(): ResultHandling;
        load(callback: (element: ResultHandling) => void): any;
    }
    /**
     * TODO
     */
    class ResultHandling extends internal.Element implements IResultHandling {
        model: IModel;
        static typeName: string;
        private __importMappingCall;
        importMappingCall: ImportMappingCall;
        private __storeInVariable;
        storeInVariable: boolean;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ResultHandling;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Retrieve relevant section in reference guide}
     */
    interface IRetrieveAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): RetrieveAction;
        load(callback: (element: RetrieveAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Retrieve relevant section in reference guide}
     */
    class RetrieveAction extends MicroflowAction implements IRetrieveAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __retrieveSource;
        retrieveSource: RetrieveSource;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): RetrieveAction;
        static create(model: IModel): RetrieveAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rollback+Object relevant section in reference guide}
     */
    interface IRollbackAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): RollbackAction;
        load(callback: (element: RollbackAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rollback+Object relevant section in reference guide}
     */
    class RollbackAction extends MicroflowAction implements IRollbackAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __rollbackVariableName;
        rollbackVariableName: string;
        private __refreshInClient;
        refreshInClient: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): RollbackAction;
        static create(model: IModel): RollbackAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rules relevant section in reference guide}
     */
    interface IRule extends IMicroflowBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): Rule;
        load(callback: (element: Rule) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rules relevant section in reference guide}
     */
    class Rule extends MicroflowBase implements IRule {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Rule unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Rule;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IRuleCall extends internal.IElement {
        model: IModel;
        container: IRuleSplitCondition;
        load(): RuleCall;
        load(callback: (element: RuleCall) => void): any;
    }
    /**
     * TODO
     */
    class RuleCall extends internal.Element implements IRuleCall {
        model: IModel;
        static typeName: string;
        container: RuleSplitCondition;
        private __rule;
        rule: IRule;
        ruleQualifiedName: string;
        private __parameterMappings;
        parameterMappings: internal.IList<RuleCallParameterMapping>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: RuleSplitCondition): RuleCall;
        static create(model: IModel): RuleCall;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IRuleCallParameterMapping extends internal.IElement {
        model: IModel;
        container: IRuleCall;
        load(): RuleCallParameterMapping;
        load(callback: (element: RuleCallParameterMapping) => void): any;
    }
    /**
     * TODO
     */
    class RuleCallParameterMapping extends internal.Element implements IRuleCallParameterMapping {
        model: IModel;
        static typeName: string;
        container: RuleCall;
        private __parameter;
        parameter: IRuleParameter;
        parameterQualifiedName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: RuleCall): RuleCallParameterMapping;
        static create(model: IModel): RuleCallParameterMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    interface IRuleParameter extends IMicroflowParameterBase {
        model: IModel;
        container: IRule;
        load(): RuleParameter;
        load(callback: (element: RuleParameter) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    class RuleParameter extends MicroflowParameterBase implements IRuleParameter {
        model: IModel;
        static typeName: string;
        container: Rule;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IRuleSplitCondition extends ISplitCondition {
        model: IModel;
        container: IExclusiveSplit;
        load(): RuleSplitCondition;
        load(callback: (element: RuleSplitCondition) => void): any;
    }
    class RuleSplitCondition extends SplitCondition implements IRuleSplitCondition {
        model: IModel;
        static typeName: string;
        container: ExclusiveSplit;
        private __ruleCall;
        ruleCall: RuleCall;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ExclusiveSplit): RuleSplitCondition;
        static create(model: IModel): RuleSplitCondition;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sequence+Flow relevant section in reference guide}
     */
    interface ISequenceFlow extends IFlow {
        model: IModel;
        container: IMicroflowBase;
        load(): SequenceFlow;
        load(callback: (element: SequenceFlow) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sequence+Flow relevant section in reference guide}
     */
    class SequenceFlow extends Flow implements ISequenceFlow {
        model: IModel;
        static typeName: string;
        container: MicroflowBase;
        private __caseValue;
        caseValue: CaseValue;
        private __isErrorHandler;
        isErrorHandler: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowBase): SequenceFlow;
        static create(model: IModel): SequenceFlow;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Home+Page TODO: Page does not exist, should be created.}
     */
    interface IShowHomePageAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ShowHomePageAction;
        load(callback: (element: ShowHomePageAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Home+Page TODO: Page does not exist, should be created.}
     */
    class ShowHomePageAction extends MicroflowAction implements IShowHomePageAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ShowHomePageAction;
        static create(model: IModel): ShowHomePageAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Message relevant section in reference guide}
     */
    interface IShowMessageAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ShowMessageAction;
        load(callback: (element: ShowMessageAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Message relevant section in reference guide}
     */
    class ShowMessageAction extends MicroflowAction implements IShowMessageAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __template;
        template: TextTemplate;
        private __type;
        type: ShowMessageType;
        private __blocking;
        blocking: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ShowMessageAction;
        static create(model: IModel): ShowMessageAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Page relevant section in reference guide}
     */
    interface IShowPageAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ShowPageAction;
        load(callback: (element: ShowPageAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Page relevant section in reference guide}
     */
    class ShowPageAction extends MicroflowAction implements IShowPageAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __pageSettings;
        pageSettings: pages.PageSettings;
        private __passedObjectVariableName;
        passedObjectVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ShowPageAction;
        static create(model: IModel): ShowPageAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ISimpleRequestHandling extends IRequestHandling {
        model: IModel;
        container: IWebServiceCallAction;
        load(): SimpleRequestHandling;
        load(callback: (element: SimpleRequestHandling) => void): any;
    }
    /**
     * TODO
     */
    class SimpleRequestHandling extends RequestHandling implements ISimpleRequestHandling {
        model: IModel;
        static typeName: string;
        container: WebServiceCallAction;
        private __parameterMappings;
        parameterMappings: internal.IList<WebServiceOperationSimpleParameterMapping>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WebServiceCallAction): SimpleRequestHandling;
        static create(model: IModel): SimpleRequestHandling;
        _initializeDefaultProperties(): void;
    }
    interface ISort extends IListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Sort;
        load(callback: (element: Sort) => void): any;
    }
    class Sort extends ListOperation implements ISort {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        private __sortItemList;
        sortItemList: SortItemList;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Sort;
        static create(model: IModel): Sort;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ISortItem extends internal.IElement {
        model: IModel;
        container: ISortItemList;
        load(): SortItem;
        load(callback: (element: SortItem) => void): any;
    }
    /**
     * TODO
     */
    class SortItem extends internal.Element implements ISortItem {
        model: IModel;
        static typeName: string;
        container: SortItemList;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __sortOrder;
        sortOrder: SortOrderEnum;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SortItemList): SortItem;
        static create(model: IModel): SortItem;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ISortItemList extends internal.IElement {
        model: IModel;
        load(): SortItemList;
        load(callback: (element: SortItemList) => void): any;
    }
    /**
     * TODO
     */
    class SortItemList extends internal.Element implements ISortItemList {
        model: IModel;
        static typeName: string;
        private __items;
        items: internal.IList<SortItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SortItemList;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Start+Event relevant section in reference guide}
     */
    interface IStartEvent extends IMicroflowObject {
        model: IModel;
        container: IMicroflowObjectCollection;
        load(): StartEvent;
        load(callback: (element: StartEvent) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Start+Event relevant section in reference guide}
     */
    class StartEvent extends MicroflowObject implements IStartEvent {
        model: IModel;
        static typeName: string;
        container: MicroflowObjectCollection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowObjectCollection): StartEvent;
        static create(model: IModel): StartEvent;
        _initializeDefaultProperties(): void;
    }
    interface ITemplate extends internal.IElement {
        model: IModel;
        load(): Template;
        load(callback: (element: Template) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Template extends internal.Element implements ITemplate {
        model: IModel;
        static typeName: string;
        private __arguments;
        arguments: internal.IList<TemplateArgument>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IStringTemplate extends ITemplate {
        model: IModel;
        load(): StringTemplate;
        load(callback: (element: StringTemplate) => void): any;
    }
    /**
     * TODO
     */
    class StringTemplate extends Template implements IStringTemplate {
        model: IModel;
        static typeName: string;
        private __text;
        text: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): StringTemplate;
        _initializeDefaultProperties(): void;
    }
    interface ISubtract extends IBinaryListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Subtract;
        load(callback: (element: Subtract) => void): any;
    }
    class Subtract extends BinaryListOperation implements ISubtract {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Subtract;
        static create(model: IModel): Subtract;
        _initializeDefaultProperties(): void;
    }
    interface ITail extends IListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Tail;
        load(callback: (element: Tail) => void): any;
    }
    class Tail extends ListOperation implements ITail {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Tail;
        static create(model: IModel): Tail;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ITemplateArgument extends internal.IElement {
        model: IModel;
        container: ITemplate;
        load(): TemplateArgument;
        load(callback: (element: TemplateArgument) => void): any;
    }
    /**
     * TODO
     */
    class TemplateArgument extends internal.Element implements ITemplateArgument {
        model: IModel;
        static typeName: string;
        container: Template;
        private __expression;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        expression: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Template): TemplateArgument;
        static create(model: IModel): TemplateArgument;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface ITextTemplate extends ITemplate {
        model: IModel;
        load(): TextTemplate;
        load(callback: (element: TextTemplate) => void): any;
    }
    /**
     * TODO
     */
    class TextTemplate extends Template implements ITextTemplate {
        model: IModel;
        static typeName: string;
        private __text;
        text: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TextTemplate;
        _initializeDefaultProperties(): void;
    }
    interface IUnion extends IBinaryListOperation {
        model: IModel;
        container: IListOperationAction;
        load(): Union;
        load(callback: (element: Union) => void): any;
    }
    class Union extends BinaryListOperation implements IUnion {
        model: IModel;
        static typeName: string;
        container: ListOperationAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListOperationAction): Union;
        static create(model: IModel): Union;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback relevant section in reference guide}
     */
    interface IValidationFeedbackAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): ValidationFeedbackAction;
        load(callback: (element: ValidationFeedbackAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback relevant section in reference guide}
     */
    class ValidationFeedbackAction extends MicroflowAction implements IValidationFeedbackAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __feedbackTemplate;
        feedbackTemplate: TextTemplate;
        private __objectVariableName;
        objectVariableName: string;
        private __attribute;
        /**
         * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback See 'Member' section in reference guide}
         */
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __association;
        /**
         * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback See 'Member' section in reference guide}
         */
        association: domainmodels.IAssociationBase;
        associationQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): ValidationFeedbackAction;
        static create(model: IModel): ValidationFeedbackAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IVariableExport extends IOutputMethod {
        model: IModel;
        container: IExportXmlAction;
        load(): VariableExport;
        load(callback: (element: VariableExport) => void): any;
    }
    /**
     * TODO
     */
    class VariableExport extends OutputMethod implements IVariableExport {
        model: IModel;
        static typeName: string;
        container: ExportXmlAction;
        private __outputVariableName;
        outputVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ExportXmlAction): VariableExport;
        static create(model: IModel): VariableExport;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Call+Web+Service relevant section in reference guide}
     */
    interface IWebServiceCallAction extends IMicroflowAction {
        model: IModel;
        container: IActionActivity;
        load(): WebServiceCallAction;
        load(callback: (element: WebServiceCallAction) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Call+Web+Service relevant section in reference guide}
     */
    class WebServiceCallAction extends MicroflowAction implements IWebServiceCallAction {
        model: IModel;
        static typeName: string;
        container: ActionActivity;
        private __importedWebService;
        importedWebService: webservices.IImportedWebService;
        importedWebServiceQualifiedName: string;
        private __serviceName;
        serviceName: string;
        private __operationName;
        operationName: string;
        private __useRequestTimeOut;
        useRequestTimeOut: boolean;
        private __timeOut;
        timeOut: number;
        private __sendNullValueChoice;
        sendNullValueChoice: NullValueOption;
        private __requestHeaderHandling;
        requestHeaderHandling: RequestHandling;
        private __requestBodyHandling;
        requestBodyHandling: RequestHandling;
        private __resultHandling;
        resultHandling: ResultHandling;
        private __httpConfiguration;
        httpConfiguration: HttpConfiguration;
        private __isValidationRequired;
        isValidationRequired: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ActionActivity): WebServiceCallAction;
        static create(model: IModel): WebServiceCallAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IWebServiceOperationAdvancedParameterMapping extends internal.IElement {
        model: IModel;
        container: IAdvancedRequestHandling;
        load(): WebServiceOperationAdvancedParameterMapping;
        load(callback: (element: WebServiceOperationAdvancedParameterMapping) => void): any;
    }
    /**
     * TODO
     */
    class WebServiceOperationAdvancedParameterMapping extends internal.Element implements IWebServiceOperationAdvancedParameterMapping {
        model: IModel;
        static typeName: string;
        container: AdvancedRequestHandling;
        private __isChecked;
        isChecked: boolean;
        private __parameterName;
        parameterName: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        private __mapping;
        mapping: exportmappings.IExportMapping;
        mappingQualifiedName: string;
        private __mappingArgumentVariableName;
        mappingArgumentVariableName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AdvancedRequestHandling): WebServiceOperationAdvancedParameterMapping;
        static create(model: IModel): WebServiceOperationAdvancedParameterMapping;
        _initializeDefaultProperties(): void;
    }
    /**
     * TODO
     */
    interface IWebServiceOperationSimpleParameterMapping extends internal.IElement {
        model: IModel;
        container: ISimpleRequestHandling;
        load(): WebServiceOperationSimpleParameterMapping;
        load(callback: (element: WebServiceOperationSimpleParameterMapping) => void): any;
    }
    /**
     * TODO
     */
    class WebServiceOperationSimpleParameterMapping extends internal.Element implements IWebServiceOperationSimpleParameterMapping {
        model: IModel;
        static typeName: string;
        container: SimpleRequestHandling;
        private __isChecked;
        isChecked: boolean;
        private __parameterName;
        parameterName: string;
        private __parameterPath;
        /**
         * The value of this property is conceptually of type Mappings$ElementPath.
         */
        parameterPath: string;
        private __argument;
        /**
         * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
         */
        argument: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SimpleRequestHandling): WebServiceOperationSimpleParameterMapping;
        static create(model: IModel): WebServiceOperationSimpleParameterMapping;
        _initializeDefaultProperties(): void;
    }
}
import { appservices } from './appservices';
import { documenttemplates } from './documenttemplates';
import { domainmodels } from './domainmodels';
import { exportmappings } from './exportmappings';
import { importmappings } from './importmappings';
import { javaactions } from './javaactions';
import { pages } from './pages';
import { security } from './security';
import { texts } from './texts';
import { webservices } from './webservices';
import { IModel } from './base-model';
