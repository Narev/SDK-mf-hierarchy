var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var microflows;
(function (microflows) {
    var ActionActivityColor = (function (_super) {
        __extends(ActionActivityColor, _super);
        function ActionActivityColor() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.ActionActivityColor";
        }
        ActionActivityColor.Default = new ActionActivityColor("Default", {});
        ActionActivityColor.Red = new ActionActivityColor("Red", {});
        ActionActivityColor.Orange = new ActionActivityColor("Orange", {});
        ActionActivityColor.Yellow = new ActionActivityColor("Yellow", {});
        ActionActivityColor.Green = new ActionActivityColor("Green", {});
        ActionActivityColor.Blue = new ActionActivityColor("Blue", {});
        ActionActivityColor.Purple = new ActionActivityColor("Purple", {});
        ActionActivityColor.Gray = new ActionActivityColor("Gray", {});
        return ActionActivityColor;
    })(internal.IEnum);
    microflows.ActionActivityColor = ActionActivityColor;
    var AggregateFunctionEnum = (function (_super) {
        __extends(AggregateFunctionEnum, _super);
        function AggregateFunctionEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.AggregateFunctionEnum";
        }
        AggregateFunctionEnum.Sum = new AggregateFunctionEnum("Sum", {});
        AggregateFunctionEnum.Average = new AggregateFunctionEnum("Average", {});
        AggregateFunctionEnum.Count = new AggregateFunctionEnum("Count", {});
        AggregateFunctionEnum.Minimum = new AggregateFunctionEnum("Minimum", {});
        AggregateFunctionEnum.Maximum = new AggregateFunctionEnum("Maximum", {});
        return AggregateFunctionEnum;
    })(internal.IEnum);
    microflows.AggregateFunctionEnum = AggregateFunctionEnum;
    var ChangeActionItemType = (function (_super) {
        __extends(ChangeActionItemType, _super);
        function ChangeActionItemType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.ChangeActionItemType";
        }
        ChangeActionItemType.Set = new ChangeActionItemType("Set", {});
        ChangeActionItemType.Add = new ChangeActionItemType("Add", {});
        ChangeActionItemType.Remove = new ChangeActionItemType("Remove", {});
        return ChangeActionItemType;
    })(internal.IEnum);
    microflows.ChangeActionItemType = ChangeActionItemType;
    var ChangeListActionType = (function (_super) {
        __extends(ChangeListActionType, _super);
        function ChangeListActionType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.ChangeListActionType";
        }
        ChangeListActionType.Set = new ChangeListActionType("Set", {});
        ChangeListActionType.Add = new ChangeListActionType("Add", {});
        ChangeListActionType.Remove = new ChangeListActionType("Remove", {});
        ChangeListActionType.Clear = new ChangeListActionType("Clear", {});
        return ChangeListActionType;
    })(internal.IEnum);
    microflows.ChangeListActionType = ChangeListActionType;
    var CommitEnum = (function (_super) {
        __extends(CommitEnum, _super);
        function CommitEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.CommitEnum";
        }
        CommitEnum.Yes = new CommitEnum("Yes", {});
        CommitEnum.YesWithoutEvents = new CommitEnum("YesWithoutEvents", {});
        CommitEnum.No = new CommitEnum("No", {});
        return CommitEnum;
    })(internal.IEnum);
    microflows.CommitEnum = CommitEnum;
    var ErrorHandlingType = (function (_super) {
        __extends(ErrorHandlingType, _super);
        function ErrorHandlingType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.ErrorHandlingType";
        }
        ErrorHandlingType.Rollback = new ErrorHandlingType("Rollback", {});
        ErrorHandlingType.Custom = new ErrorHandlingType("Custom", {});
        ErrorHandlingType.CustomWithoutRollBack = new ErrorHandlingType("CustomWithoutRollBack", {});
        ErrorHandlingType.Continue = new ErrorHandlingType("Continue", {});
        return ErrorHandlingType;
    })(internal.IEnum);
    microflows.ErrorHandlingType = ErrorHandlingType;
    var LogLevel = (function (_super) {
        __extends(LogLevel, _super);
        function LogLevel() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.LogLevel";
        }
        LogLevel.Trace = new LogLevel("Trace", {});
        LogLevel.Debug = new LogLevel("Debug", {});
        LogLevel.Info = new LogLevel("Info", {});
        LogLevel.Warning = new LogLevel("Warning", {});
        LogLevel.Error = new LogLevel("Error", {});
        LogLevel.Critical = new LogLevel("Critical", {});
        return LogLevel;
    })(internal.IEnum);
    microflows.LogLevel = LogLevel;
    var SortOrderEnum = (function (_super) {
        __extends(SortOrderEnum, _super);
        function SortOrderEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.SortOrderEnum";
        }
        SortOrderEnum.Ascending = new SortOrderEnum("Ascending", {});
        SortOrderEnum.Descending = new SortOrderEnum("Descending", {});
        return SortOrderEnum;
    })(internal.IEnum);
    microflows.SortOrderEnum = SortOrderEnum;
    var LanguageSettingType = (function (_super) {
        __extends(LanguageSettingType, _super);
        function LanguageSettingType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.LanguageSettingType";
        }
        LanguageSettingType.CurrentUser = new LanguageSettingType("CurrentUser", {});
        LanguageSettingType.ProjectDefault = new LanguageSettingType("ProjectDefault", {});
        LanguageSettingType.Variable = new LanguageSettingType("Variable", {});
        return LanguageSettingType;
    })(internal.IEnum);
    microflows.LanguageSettingType = LanguageSettingType;
    var TargetDocumentType = (function (_super) {
        __extends(TargetDocumentType, _super);
        function TargetDocumentType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.TargetDocumentType";
        }
        TargetDocumentType.HTML = new TargetDocumentType("HTML", {});
        TargetDocumentType.PDF = new TargetDocumentType("PDF", {});
        TargetDocumentType.DOCX = new TargetDocumentType("DOCX", {});
        TargetDocumentType.DOC = new TargetDocumentType("DOC", {});
        TargetDocumentType.RTF = new TargetDocumentType("RTF", {});
        TargetDocumentType.ODT = new TargetDocumentType("ODT", {});
        return TargetDocumentType;
    })(internal.IEnum);
    microflows.TargetDocumentType = TargetDocumentType;
    var ShowMessageType = (function (_super) {
        __extends(ShowMessageType, _super);
        function ShowMessageType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.ShowMessageType";
        }
        ShowMessageType.Information = new ShowMessageType("Information", {});
        ShowMessageType.Warning = new ShowMessageType("Warning", {});
        ShowMessageType.Error = new ShowMessageType("Error", {});
        return ShowMessageType;
    })(internal.IEnum);
    microflows.ShowMessageType = ShowMessageType;
    var NullValueOption = (function (_super) {
        __extends(NullValueOption, _super);
        function NullValueOption() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "microflows.NullValueOption";
        }
        NullValueOption.SendAsNil = new NullValueOption("SendAsNil", {});
        NullValueOption.LeaveOutElement = new NullValueOption("LeaveOutElement", {});
        return NullValueOption;
    })(internal.IEnum);
    microflows.NullValueOption = NullValueOption;
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowObject = (function (_super) {
        __extends(MicroflowObject, _super);
        function MicroflowObject(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__relativeMiddlePoint = new internal.PrimitiveProperty(MicroflowObject, this, "relativeMiddlePoint", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            this.__size = new internal.PrimitiveProperty(MicroflowObject, this, "size", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            if (arguments.length < 4)
                throw new Error("new MicroflowObject() cannot be invoked directly, please use 'model.microflows.createMicroflowObject()'");
        }
        Object.defineProperty(MicroflowObject.prototype, "relativeMiddlePoint", {
            get: function () { return this.__relativeMiddlePoint.get(); },
            set: function (newValue) { this.__relativeMiddlePoint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowObject.prototype, "size", {
            get: function () { return this.__size.get(); },
            set: function (newValue) { this.__size.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowObject.typeName = "Microflows$MicroflowObject";
        MicroflowObject.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowObject;
    })(internal.Element);
    microflows.MicroflowObject = MicroflowObject;
    /**
     * TODO: abstract element
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Activity = (function (_super) {
        __extends(Activity, _super);
        function Activity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Activity() cannot be invoked directly, please use 'model.microflows.createActivity()'");
        }
        Activity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Activity.typeName = "Microflows$Activity";
        Activity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Activity;
    })(MicroflowObject);
    microflows.Activity = Activity;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Activities relevant section in reference guide}
     */
    var ActionActivity = (function (_super) {
        __extends(ActionActivity, _super);
        function ActionActivity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__action = new internal.PartProperty(ActionActivity, this, "action", null, false);
            this.__caption = new internal.PrimitiveProperty(ActionActivity, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__autoGenerateCaption = new internal.PrimitiveProperty(ActionActivity, this, "autoGenerateCaption", false, internal.PrimitiveTypeEnum.Boolean);
            this.__backgroundColor = new internal.EnumProperty(ActionActivity, this, "backgroundColor", ActionActivityColor.Default, ActionActivityColor);
            this.__documentation = new internal.PrimitiveProperty(ActionActivity, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ActionActivity() cannot be invoked directly, please use 'model.microflows.createActionActivity()'");
        }
        Object.defineProperty(ActionActivity.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "autoGenerateCaption", {
            get: function () { return this.__autoGenerateCaption.get(); },
            set: function (newValue) { this.__autoGenerateCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "backgroundColor", {
            get: function () { return this.__backgroundColor.get(); },
            set: function (newValue) { this.__backgroundColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ActionActivity instance in the SDK and on the server.
         * The new ActionActivity will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        ActionActivity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ActionActivity, "objects", true);
        };
        /*
         * Creates and returns a new ActionActivity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ActionActivity.create = function (model) {
            return internal.instancehelpers.createElement(model, ActionActivity);
        };
        ActionActivity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = "Activity";
            this.autoGenerateCaption = true;
            this.backgroundColor = ActionActivityColor.Default;
            this.size = { width: 120, height: 60 };
        };
        ActionActivity.typeName = "Microflows$ActionActivity";
        ActionActivity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ActionActivity;
    })(Activity);
    microflows.ActionActivity = ActionActivity;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var RequestHandling = (function (_super) {
        __extends(RequestHandling, _super);
        function RequestHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new RequestHandling() cannot be invoked directly, please use 'model.microflows.createRequestHandling()'");
        }
        RequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RequestHandling.typeName = "Microflows$RequestHandling";
        RequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RequestHandling;
    })(internal.Element);
    microflows.RequestHandling = RequestHandling;
    /**
     * TODO
     */
    var AdvancedRequestHandling = (function (_super) {
        __extends(AdvancedRequestHandling, _super);
        function AdvancedRequestHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterMappings = new internal.PartListProperty(AdvancedRequestHandling, this, "parameterMappings", []);
            if (arguments.length < 4)
                throw new Error("new AdvancedRequestHandling() cannot be invoked directly, please use 'model.microflows.createAdvancedRequestHandling()'");
        }
        Object.defineProperty(AdvancedRequestHandling.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * The new AdvancedRequestHandling will be automatically stored in the 'requestHeaderHandling' property of the parent WebServiceCallAction element passed as argument.
         */
        AdvancedRequestHandling.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AdvancedRequestHandling, "requestHeaderHandling", false);
        };
        /*
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AdvancedRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, AdvancedRequestHandling);
        };
        AdvancedRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AdvancedRequestHandling.typeName = "Microflows$AdvancedRequestHandling";
        AdvancedRequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AdvancedRequestHandling;
    })(RequestHandling);
    microflows.AdvancedRequestHandling = AdvancedRequestHandling;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowAction = (function (_super) {
        __extends(MicroflowAction, _super);
        function MicroflowAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__errorHandlingType = new internal.EnumProperty(MicroflowAction, this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            if (arguments.length < 4)
                throw new Error("new MicroflowAction() cannot be invoked directly, please use 'model.microflows.createMicroflowAction()'");
        }
        Object.defineProperty(MicroflowAction.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.errorHandlingType = ErrorHandlingType.Rollback;
        };
        MicroflowAction.typeName = "Microflows$MicroflowAction";
        MicroflowAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowAction;
    })(internal.Element);
    microflows.MicroflowAction = MicroflowAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Aggregate+List relevant section in reference guide}
     */
    var AggregateListAction = (function (_super) {
        __extends(AggregateListAction, _super);
        function AggregateListAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__inputListVariableName = new internal.PrimitiveProperty(AggregateListAction, this, "inputListVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__attribute = new internal.ByNameReferenceProperty(AggregateListAction, this, "attribute", null, "DomainModels$Attribute");
            this.__aggregateFunction = new internal.EnumProperty(AggregateListAction, this, "aggregateFunction", AggregateFunctionEnum.Sum, AggregateFunctionEnum);
            this.__outputVariableName = new internal.PrimitiveProperty(AggregateListAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new AggregateListAction() cannot be invoked directly, please use 'model.microflows.createAggregateListAction()'");
        }
        Object.defineProperty(AggregateListAction.prototype, "inputListVariableName", {
            get: function () { return this.__inputListVariableName.get(); },
            set: function (newValue) { this.__inputListVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AggregateListAction instance in the SDK and on the server.
         * The new AggregateListAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        AggregateListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AggregateListAction, "action", false);
        };
        /*
         * Creates and returns a new AggregateListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AggregateListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, AggregateListAction);
        };
        AggregateListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.aggregateFunction = AggregateFunctionEnum.Sum;
        };
        AggregateListAction.typeName = "Microflows$AggregateListAction";
        AggregateListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AggregateListAction;
    })(MicroflowAction);
    microflows.AggregateListAction = AggregateListAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation relevant section in reference guide}
     */
    var Annotation = (function (_super) {
        __extends(Annotation, _super);
        function Annotation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PrimitiveProperty(Annotation, this, "caption", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Annotation() cannot be invoked directly, please use 'model.microflows.createAnnotation()'");
        }
        Object.defineProperty(Annotation.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * The new Annotation will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        Annotation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Annotation, "objects", true);
        };
        /*
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Annotation.create = function (model) {
            return internal.instancehelpers.createElement(model, Annotation);
        };
        Annotation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 100, height: 40 };
        };
        Annotation.typeName = "Microflows$Annotation";
        Annotation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Annotation;
    })(MicroflowObject);
    microflows.Annotation = Annotation;
    /**
     * TODO abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Flow = (function (_super) {
        __extends(Flow, _super);
        function Flow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__origin = new internal.ByIdReferenceProperty(Flow, this, "origin", null);
            this.__destination = new internal.ByIdReferenceProperty(Flow, this, "destination", null);
            this.__originConnectionIndex = new internal.PrimitiveProperty(Flow, this, "originConnectionIndex", 0, internal.PrimitiveTypeEnum.Integer);
            this.__destinationConnectionIndex = new internal.PrimitiveProperty(Flow, this, "destinationConnectionIndex", 0, internal.PrimitiveTypeEnum.Integer);
            this.__originBezierVector = new internal.PrimitiveProperty(Flow, this, "originBezierVector", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            this.__destinationBezierVector = new internal.PrimitiveProperty(Flow, this, "destinationBezierVector", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            if (arguments.length < 4)
                throw new Error("new Flow() cannot be invoked directly, please use 'model.microflows.createFlow()'");
        }
        Object.defineProperty(Flow.prototype, "origin", {
            get: function () { return this.__origin.get(); },
            set: function (newValue) { this.__origin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destination", {
            get: function () { return this.__destination.get(); },
            set: function (newValue) { this.__destination.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "originConnectionIndex", {
            get: function () { return this.__originConnectionIndex.get(); },
            set: function (newValue) { this.__originConnectionIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destinationConnectionIndex", {
            get: function () { return this.__destinationConnectionIndex.get(); },
            set: function (newValue) { this.__destinationConnectionIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "originBezierVector", {
            get: function () { return this.__originBezierVector.get(); },
            set: function (newValue) { this.__originBezierVector.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destinationBezierVector", {
            get: function () { return this.__destinationBezierVector.get(); },
            set: function (newValue) { this.__destinationBezierVector.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Flow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Flow.typeName = "Microflows$Flow";
        Flow.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "origin": {
                    "required": {
                        "currentValue": true
                    }
                },
                "destination": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Flow;
    })(internal.Element);
    microflows.Flow = Flow;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Annotation+Flow relevant section in reference guide}
     */
    var AnnotationFlow = (function (_super) {
        __extends(AnnotationFlow, _super);
        function AnnotationFlow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new AnnotationFlow() cannot be invoked directly, please use 'model.microflows.createAnnotationFlow()'");
        }
        /*
         * Creates and returns a new AnnotationFlow instance in the SDK and on the server.
         * The new AnnotationFlow will be automatically stored in the 'flows' property of the parent MicroflowBase element passed as argument.
         */
        AnnotationFlow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AnnotationFlow, "flows", true);
        };
        /*
         * Creates and returns a new AnnotationFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AnnotationFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, AnnotationFlow);
        };
        AnnotationFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AnnotationFlow.typeName = "Microflows$AnnotationFlow";
        AnnotationFlow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AnnotationFlow;
    })(Flow);
    microflows.AnnotationFlow = AnnotationFlow;
    /**
     * TODO: Missing in ref guide ?
     */
    var AppServiceCallAction = (function (_super) {
        __extends(AppServiceCallAction, _super);
        function AppServiceCallAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__appServiceAction = new internal.ByNameReferenceProperty(AppServiceCallAction, this, "appServiceAction", null, "AppServices$AppServiceAction");
            this.__parameterMappings = new internal.PartListProperty(AppServiceCallAction, this, "parameterMappings", []);
            this.__useVariable = new internal.PrimitiveProperty(AppServiceCallAction, this, "useVariable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__outputVariableName = new internal.PrimitiveProperty(AppServiceCallAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new AppServiceCallAction() cannot be invoked directly, please use 'model.microflows.createAppServiceCallAction()'");
        }
        Object.defineProperty(AppServiceCallAction.prototype, "appServiceAction", {
            get: function () { return this.__appServiceAction.get(); },
            set: function (newValue) { this.__appServiceAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "appServiceActionQualifiedName", {
            get: function () { return this.__appServiceAction.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "useVariable", {
            get: function () { return this.__useVariable.get(); },
            set: function (newValue) { this.__useVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AppServiceCallAction instance in the SDK and on the server.
         * The new AppServiceCallAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        AppServiceCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceCallAction, "action", false);
        };
        /*
         * Creates and returns a new AppServiceCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceCallAction);
        };
        AppServiceCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.useVariable = true;
        };
        AppServiceCallAction.typeName = "Microflows$AppServiceCallAction";
        AppServiceCallAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AppServiceCallAction;
    })(MicroflowAction);
    microflows.AppServiceCallAction = AppServiceCallAction;
    /**
     * TODO: Missing in ref guide ?
     */
    var AppServiceCallParameterMapping = (function (_super) {
        __extends(AppServiceCallParameterMapping, _super);
        function AppServiceCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameter = new internal.ByNameReferenceProperty(AppServiceCallParameterMapping, this, "parameter", null, "AppServices$AppServiceActionParameter");
            this.__argument = new internal.PrimitiveProperty(AppServiceCallParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new AppServiceCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createAppServiceCallParameterMapping()'");
        }
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AppServiceCallParameterMapping instance in the SDK and on the server.
         * The new AppServiceCallParameterMapping will be automatically stored in the 'parameterMappings' property of the parent AppServiceCallAction element passed as argument.
         */
        AppServiceCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceCallParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new AppServiceCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceCallParameterMapping);
        };
        AppServiceCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AppServiceCallParameterMapping.typeName = "Microflows$AppServiceCallParameterMapping";
        AppServiceCallParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AppServiceCallParameterMapping;
    })(internal.Element);
    microflows.AppServiceCallParameterMapping = AppServiceCallParameterMapping;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var RetrieveSource = (function (_super) {
        __extends(RetrieveSource, _super);
        function RetrieveSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new RetrieveSource() cannot be invoked directly, please use 'model.microflows.createRetrieveSource()'");
        }
        RetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RetrieveSource.typeName = "Microflows$RetrieveSource";
        RetrieveSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RetrieveSource;
    })(internal.Element);
    microflows.RetrieveSource = RetrieveSource;
    /**
     * TODO
     */
    var AssociationRetrieveSource = (function (_super) {
        __extends(AssociationRetrieveSource, _super);
        function AssociationRetrieveSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__startVariableName = new internal.PrimitiveProperty(AssociationRetrieveSource, this, "startVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__association = new internal.ByNameReferenceProperty(AssociationRetrieveSource, this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4)
                throw new Error("new AssociationRetrieveSource() cannot be invoked directly, please use 'model.microflows.createAssociationRetrieveSource()'");
        }
        Object.defineProperty(AssociationRetrieveSource.prototype, "startVariableName", {
            get: function () { return this.__startVariableName.get(); },
            set: function (newValue) { this.__startVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRetrieveSource.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRetrieveSource.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new AssociationRetrieveSource instance in the SDK and on the server.
         * The new AssociationRetrieveSource will be automatically stored in the 'retrieveSource' property of the parent RetrieveAction element passed as argument.
         */
        AssociationRetrieveSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AssociationRetrieveSource, "retrieveSource", false);
        };
        /*
         * Creates and returns a new AssociationRetrieveSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationRetrieveSource.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationRetrieveSource);
        };
        AssociationRetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AssociationRetrieveSource.typeName = "Microflows$AssociationRetrieveSource";
        AssociationRetrieveSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AssociationRetrieveSource;
    })(RetrieveSource);
    microflows.AssociationRetrieveSource = AssociationRetrieveSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ListOperation = (function (_super) {
        __extends(ListOperation, _super);
        function ListOperation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__listVariableName = new internal.PrimitiveProperty(ListOperation, this, "listVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ListOperation() cannot be invoked directly, please use 'model.microflows.createListOperation()'");
        }
        Object.defineProperty(ListOperation.prototype, "listVariableName", {
            get: function () { return this.__listVariableName.get(); },
            set: function (newValue) { this.__listVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ListOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListOperation.typeName = "Microflows$ListOperation";
        ListOperation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListOperation;
    })(internal.Element);
    microflows.ListOperation = ListOperation;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var BinaryListOperation = (function (_super) {
        __extends(BinaryListOperation, _super);
        function BinaryListOperation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__secondListOrObjectVariableName = new internal.PrimitiveProperty(BinaryListOperation, this, "secondListOrObjectVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new BinaryListOperation() cannot be invoked directly, please use 'model.microflows.createBinaryListOperation()'");
        }
        Object.defineProperty(BinaryListOperation.prototype, "secondListOrObjectVariableName", {
            get: function () { return this.__secondListOrObjectVariableName.get(); },
            set: function (newValue) { this.__secondListOrObjectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        BinaryListOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BinaryListOperation.typeName = "Microflows$BinaryListOperation";
        BinaryListOperation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return BinaryListOperation;
    })(ListOperation);
    microflows.BinaryListOperation = BinaryListOperation;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Break+Event relevant section in reference guide}
     */
    var BreakEvent = (function (_super) {
        __extends(BreakEvent, _super);
        function BreakEvent(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new BreakEvent() cannot be invoked directly, please use 'model.microflows.createBreakEvent()'");
        }
        /*
         * Creates and returns a new BreakEvent instance in the SDK and on the server.
         * The new BreakEvent will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        BreakEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BreakEvent, "objects", true);
        };
        /*
         * Creates and returns a new BreakEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BreakEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, BreakEvent);
        };
        BreakEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        BreakEvent.typeName = "Microflows$BreakEvent";
        BreakEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return BreakEvent;
    })(MicroflowObject);
    microflows.BreakEvent = BreakEvent;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var CaseValue = (function (_super) {
        __extends(CaseValue, _super);
        function CaseValue(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new CaseValue() cannot be invoked directly, please use 'model.microflows.createCaseValue()'");
        }
        CaseValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CaseValue.typeName = "Microflows$CaseValue";
        CaseValue.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CaseValue;
    })(internal.Element);
    microflows.CaseValue = CaseValue;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cast+Object relevant section in reference guide}
     */
    var CastAction = (function (_super) {
        __extends(CastAction, _super);
        function CastAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__outputVariableName = new internal.PrimitiveProperty(CastAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new CastAction() cannot be invoked directly, please use 'model.microflows.createCastAction()'");
        }
        Object.defineProperty(CastAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CastAction instance in the SDK and on the server.
         * The new CastAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CastAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CastAction, "action", false);
        };
        /*
         * Creates and returns a new CastAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CastAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CastAction);
        };
        CastAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CastAction.typeName = "Microflows$CastAction";
        CastAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CastAction;
    })(MicroflowAction);
    microflows.CastAction = CastAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+List relevant section in reference guide}
     */
    var ChangeListAction = (function (_super) {
        __extends(ChangeListAction, _super);
        function ChangeListAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__changeVariableName = new internal.PrimitiveProperty(ChangeListAction, this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__value = new internal.PrimitiveProperty(ChangeListAction, this, "value", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.EnumProperty(ChangeListAction, this, "type", ChangeListActionType.Add, ChangeListActionType);
            if (arguments.length < 4)
                throw new Error("new ChangeListAction() cannot be invoked directly, please use 'model.microflows.createChangeListAction()'");
        }
        Object.defineProperty(ChangeListAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeListAction.prototype, "value", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeListAction.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ChangeListAction instance in the SDK and on the server.
         * The new ChangeListAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ChangeListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeListAction, "action", false);
        };
        /*
         * Creates and returns a new ChangeListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeListAction);
        };
        ChangeListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = ChangeListActionType.Add;
        };
        ChangeListAction.typeName = "Microflows$ChangeListAction";
        ChangeListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ChangeListAction;
    })(MicroflowAction);
    microflows.ChangeListAction = ChangeListAction;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ChangeMembersAction = (function (_super) {
        __extends(ChangeMembersAction, _super);
        function ChangeMembersAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(ChangeMembersAction, this, "items", []);
            this.__refreshInClient = new internal.PrimitiveProperty(ChangeMembersAction, this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            this.__commit = new internal.EnumProperty(ChangeMembersAction, this, "commit", CommitEnum.No, CommitEnum);
            if (arguments.length < 4)
                throw new Error("new ChangeMembersAction() cannot be invoked directly, please use 'model.microflows.createChangeMembersAction()'");
        }
        Object.defineProperty(ChangeMembersAction.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMembersAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMembersAction.prototype, "commit", {
            get: function () { return this.__commit.get(); },
            set: function (newValue) { this.__commit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ChangeMembersAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.commit = CommitEnum.No;
        };
        ChangeMembersAction.typeName = "Microflows$ChangeMembersAction";
        ChangeMembersAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ChangeMembersAction;
    })(MicroflowAction);
    microflows.ChangeMembersAction = ChangeMembersAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Object relevant section in reference guide}
     */
    var ChangeObjectAction = (function (_super) {
        __extends(ChangeObjectAction, _super);
        function ChangeObjectAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__changeVariableName = new internal.PrimitiveProperty(ChangeObjectAction, this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ChangeObjectAction() cannot be invoked directly, please use 'model.microflows.createChangeObjectAction()'");
        }
        Object.defineProperty(ChangeObjectAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ChangeObjectAction instance in the SDK and on the server.
         * The new ChangeObjectAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ChangeObjectAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeObjectAction, "action", false);
        };
        /*
         * Creates and returns a new ChangeObjectAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeObjectAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeObjectAction);
        };
        ChangeObjectAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ChangeObjectAction.typeName = "Microflows$ChangeObjectAction";
        ChangeObjectAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ChangeObjectAction;
    })(ChangeMembersAction);
    microflows.ChangeObjectAction = ChangeObjectAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Change+Variable relevant section in reference guide}
     */
    var ChangeVariableAction = (function (_super) {
        __extends(ChangeVariableAction, _super);
        function ChangeVariableAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__changeVariableName = new internal.PrimitiveProperty(ChangeVariableAction, this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__value = new internal.PrimitiveProperty(ChangeVariableAction, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ChangeVariableAction() cannot be invoked directly, please use 'model.microflows.createChangeVariableAction()'");
        }
        Object.defineProperty(ChangeVariableAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeVariableAction.prototype, "value", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ChangeVariableAction instance in the SDK and on the server.
         * The new ChangeVariableAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ChangeVariableAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeVariableAction, "action", false);
        };
        /*
         * Creates and returns a new ChangeVariableAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeVariableAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeVariableAction);
        };
        ChangeVariableAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ChangeVariableAction.typeName = "Microflows$ChangeVariableAction";
        ChangeVariableAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ChangeVariableAction;
    })(MicroflowAction);
    microflows.ChangeVariableAction = ChangeVariableAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Close+Form relevant section in reference guide}
     */
    var CloseFormAction = (function (_super) {
        __extends(CloseFormAction, _super);
        function CloseFormAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new CloseFormAction() cannot be invoked directly, please use 'model.microflows.createCloseFormAction()'");
        }
        /*
         * Creates and returns a new CloseFormAction instance in the SDK and on the server.
         * The new CloseFormAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CloseFormAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CloseFormAction, "action", false);
        };
        /*
         * Creates and returns a new CloseFormAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CloseFormAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CloseFormAction);
        };
        CloseFormAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CloseFormAction.typeName = "Microflows$CloseFormAction";
        CloseFormAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CloseFormAction;
    })(MicroflowAction);
    microflows.CloseFormAction = CloseFormAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Commit+Object(s) relevant section in reference guide}
     */
    var CommitAction = (function (_super) {
        __extends(CommitAction, _super);
        function CommitAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__withEvents = new internal.PrimitiveProperty(CommitAction, this, "withEvents", false, internal.PrimitiveTypeEnum.Boolean);
            this.__commitVariableName = new internal.PrimitiveProperty(CommitAction, this, "commitVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__refreshInClient = new internal.PrimitiveProperty(CommitAction, this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new CommitAction() cannot be invoked directly, please use 'model.microflows.createCommitAction()'");
        }
        Object.defineProperty(CommitAction.prototype, "withEvents", {
            get: function () { return this.__withEvents.get(); },
            set: function (newValue) { this.__withEvents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitAction.prototype, "commitVariableName", {
            get: function () { return this.__commitVariableName.get(); },
            set: function (newValue) { this.__commitVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CommitAction instance in the SDK and on the server.
         * The new CommitAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CommitAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CommitAction, "action", false);
        };
        /*
         * Creates and returns a new CommitAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CommitAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CommitAction);
        };
        CommitAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.withEvents = true;
        };
        CommitAction.typeName = "Microflows$CommitAction";
        CommitAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CommitAction;
    })(MicroflowAction);
    microflows.CommitAction = CommitAction;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Range = (function (_super) {
        __extends(Range, _super);
        function Range(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Range() cannot be invoked directly, please use 'model.microflows.createRange()'");
        }
        Range.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Range.typeName = "Microflows$Range";
        Range.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Range;
    })(internal.Element);
    microflows.Range = Range;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    var ConstantRange = (function (_super) {
        __extends(ConstantRange, _super);
        function ConstantRange(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__singleObject = new internal.PrimitiveProperty(ConstantRange, this, "singleObject", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ConstantRange() cannot be invoked directly, please use 'model.microflows.createConstantRange()'");
        }
        Object.defineProperty(ConstantRange.prototype, "singleObject", {
            get: function () { return this.__singleObject.get(); },
            set: function (newValue) { this.__singleObject.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ConstantRange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConstantRange.create = function (model) {
            return internal.instancehelpers.createElement(model, ConstantRange);
        };
        ConstantRange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConstantRange.typeName = "Microflows$ConstantRange";
        ConstantRange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConstantRange;
    })(Range);
    microflows.ConstantRange = ConstantRange;
    var Contains = (function (_super) {
        __extends(Contains, _super);
        function Contains(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Contains() cannot be invoked directly, please use 'model.microflows.createContains()'");
        }
        /*
         * Creates and returns a new Contains instance in the SDK and on the server.
         * The new Contains will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Contains.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Contains, "operation", false);
        };
        /*
         * Creates and returns a new Contains instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Contains.create = function (model) {
            return internal.instancehelpers.createElement(model, Contains);
        };
        Contains.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Contains.typeName = "Microflows$Contains";
        Contains.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Contains;
    })(BinaryListOperation);
    microflows.Contains = Contains;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Continue+Event relevant section in reference guide}
     */
    var ContinueEvent = (function (_super) {
        __extends(ContinueEvent, _super);
        function ContinueEvent(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ContinueEvent() cannot be invoked directly, please use 'model.microflows.createContinueEvent()'");
        }
        /*
         * Creates and returns a new ContinueEvent instance in the SDK and on the server.
         * The new ContinueEvent will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        ContinueEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ContinueEvent, "objects", true);
        };
        /*
         * Creates and returns a new ContinueEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ContinueEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, ContinueEvent);
        };
        ContinueEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        ContinueEvent.typeName = "Microflows$ContinueEvent";
        ContinueEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ContinueEvent;
    })(MicroflowObject);
    microflows.ContinueEvent = ContinueEvent;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+List relevant section in reference guide}
     */
    var CreateListAction = (function (_super) {
        __extends(CreateListAction, _super);
        function CreateListAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(CreateListAction, this, "entity", null, "DomainModels$Entity");
            this.__outputVariableName = new internal.PrimitiveProperty(CreateListAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new CreateListAction() cannot be invoked directly, please use 'model.microflows.createCreateListAction()'");
        }
        Object.defineProperty(CreateListAction.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateListAction.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateListAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CreateListAction instance in the SDK and on the server.
         * The new CreateListAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CreateListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateListAction, "action", false);
        };
        /*
         * Creates and returns a new CreateListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateListAction);
        };
        CreateListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CreateListAction.typeName = "Microflows$CreateListAction";
        CreateListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CreateListAction;
    })(MicroflowAction);
    microflows.CreateListAction = CreateListAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Object relevant section in reference guide}
     */
    var CreateObjectAction = (function (_super) {
        __extends(CreateObjectAction, _super);
        function CreateObjectAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(CreateObjectAction, this, "entity", null, "DomainModels$Entity");
            this.__outputVariableName = new internal.PrimitiveProperty(CreateObjectAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new CreateObjectAction() cannot be invoked directly, please use 'model.microflows.createCreateObjectAction()'");
        }
        Object.defineProperty(CreateObjectAction.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateObjectAction.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateObjectAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CreateObjectAction instance in the SDK and on the server.
         * The new CreateObjectAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CreateObjectAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateObjectAction, "action", false);
        };
        /*
         * Creates and returns a new CreateObjectAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateObjectAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateObjectAction);
        };
        CreateObjectAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CreateObjectAction.typeName = "Microflows$CreateObjectAction";
        CreateObjectAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CreateObjectAction;
    })(ChangeMembersAction);
    microflows.CreateObjectAction = CreateObjectAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Create+Variable relevant section in reference guide}
     */
    var CreateVariableAction = (function (_super) {
        __extends(CreateVariableAction, _super);
        function CreateVariableAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__variableName = new internal.PrimitiveProperty(CreateVariableAction, this, "variableName", "", internal.PrimitiveTypeEnum.String);
            this.__variableDataType = new internal.PrimitiveProperty(CreateVariableAction, this, "variableDataType", "", internal.PrimitiveTypeEnum.String);
            this.__initialValue = new internal.PrimitiveProperty(CreateVariableAction, this, "initialValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new CreateVariableAction() cannot be invoked directly, please use 'model.microflows.createCreateVariableAction()'");
        }
        Object.defineProperty(CreateVariableAction.prototype, "variableName", {
            get: function () { return this.__variableName.get(); },
            set: function (newValue) { this.__variableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateVariableAction.prototype, "variableDataType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__variableDataType.get(); },
            set: function (newValue) { this.__variableDataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateVariableAction.prototype, "initialValue", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__initialValue.get(); },
            set: function (newValue) { this.__initialValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CreateVariableAction instance in the SDK and on the server.
         * The new CreateVariableAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        CreateVariableAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateVariableAction, "action", false);
        };
        /*
         * Creates and returns a new CreateVariableAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateVariableAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateVariableAction);
        };
        CreateVariableAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.variableDataType = "Boolean";
        };
        CreateVariableAction.typeName = "Microflows$CreateVariableAction";
        CreateVariableAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CreateVariableAction;
    })(MicroflowAction);
    microflows.CreateVariableAction = CreateVariableAction;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    var CustomRange = (function (_super) {
        __extends(CustomRange, _super);
        function CustomRange(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__limitExpression = new internal.PrimitiveProperty(CustomRange, this, "limitExpression", "", internal.PrimitiveTypeEnum.String);
            this.__offsetExpression = new internal.PrimitiveProperty(CustomRange, this, "offsetExpression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new CustomRange() cannot be invoked directly, please use 'model.microflows.createCustomRange()'");
        }
        Object.defineProperty(CustomRange.prototype, "limitExpression", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__limitExpression.get(); },
            set: function (newValue) { this.__limitExpression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRange.prototype, "offsetExpression", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__offsetExpression.get(); },
            set: function (newValue) { this.__offsetExpression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CustomRange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomRange.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomRange);
        };
        CustomRange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CustomRange.typeName = "Microflows$CustomRange";
        CustomRange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CustomRange;
    })(Range);
    microflows.CustomRange = CustomRange;
    /**
     * TODO
     */
    var CustomRequestHandling = (function (_super) {
        __extends(CustomRequestHandling, _super);
        function CustomRequestHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__template = new internal.PartProperty(CustomRequestHandling, this, "template", null, true);
            if (arguments.length < 4)
                throw new Error("new CustomRequestHandling() cannot be invoked directly, please use 'model.microflows.createCustomRequestHandling()'");
        }
        Object.defineProperty(CustomRequestHandling.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * The new CustomRequestHandling will be automatically stored in the 'requestHeaderHandling' property of the parent WebServiceCallAction element passed as argument.
         */
        CustomRequestHandling.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CustomRequestHandling, "requestHeaderHandling", false);
        };
        /*
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomRequestHandling);
        };
        CustomRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.template = StringTemplate.create(this.model);
        };
        CustomRequestHandling.typeName = "Microflows$CustomRequestHandling";
        CustomRequestHandling.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "template": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return CustomRequestHandling;
    })(RequestHandling);
    microflows.CustomRequestHandling = CustomRequestHandling;
    /**
     * TODO
     */
    var DatabaseRetrieveSource = (function (_super) {
        __extends(DatabaseRetrieveSource, _super);
        function DatabaseRetrieveSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(DatabaseRetrieveSource, this, "entity", null, "DomainModels$Entity");
            this.__range = new internal.PartProperty(DatabaseRetrieveSource, this, "range", null, true);
            this.__xPathConstraint = new internal.PrimitiveProperty(DatabaseRetrieveSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__sortItemList = new internal.PartProperty(DatabaseRetrieveSource, this, "sortItemList", null, true);
            if (arguments.length < 4)
                throw new Error("new DatabaseRetrieveSource() cannot be invoked directly, please use 'model.microflows.createDatabaseRetrieveSource()'");
        }
        Object.defineProperty(DatabaseRetrieveSource.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "range", {
            get: function () { return this.__range.get(); },
            set: function (newValue) { this.__range.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "sortItemList", {
            get: function () { return this.__sortItemList.get(); },
            set: function (newValue) { this.__sortItemList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DatabaseRetrieveSource instance in the SDK and on the server.
         * The new DatabaseRetrieveSource will be automatically stored in the 'retrieveSource' property of the parent RetrieveAction element passed as argument.
         */
        DatabaseRetrieveSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DatabaseRetrieveSource, "retrieveSource", false);
        };
        /*
         * Creates and returns a new DatabaseRetrieveSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatabaseRetrieveSource.create = function (model) {
            return internal.instancehelpers.createElement(model, DatabaseRetrieveSource);
        };
        DatabaseRetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.range = ConstantRange.create(this.model);
            this.sortItemList = SortItemList.create(this.model);
        };
        DatabaseRetrieveSource.typeName = "Microflows$DatabaseRetrieveSource";
        DatabaseRetrieveSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "range": {
                    "required": {
                        "currentValue": true
                    }
                },
                "sortItemList": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DatabaseRetrieveSource;
    })(RetrieveSource);
    microflows.DatabaseRetrieveSource = DatabaseRetrieveSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Object(s) relevant section in reference guide}
     */
    var DeleteAction = (function (_super) {
        __extends(DeleteAction, _super);
        function DeleteAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__deleteVariableName = new internal.PrimitiveProperty(DeleteAction, this, "deleteVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__refreshInClient = new internal.PrimitiveProperty(DeleteAction, this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DeleteAction() cannot be invoked directly, please use 'model.microflows.createDeleteAction()'");
        }
        Object.defineProperty(DeleteAction.prototype, "deleteVariableName", {
            get: function () { return this.__deleteVariableName.get(); },
            set: function (newValue) { this.__deleteVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeleteAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DeleteAction instance in the SDK and on the server.
         * The new DeleteAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        DeleteAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DeleteAction, "action", false);
        };
        /*
         * Creates and returns a new DeleteAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DeleteAction.create = function (model) {
            return internal.instancehelpers.createElement(model, DeleteAction);
        };
        DeleteAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DeleteAction.typeName = "Microflows$DeleteAction";
        DeleteAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DeleteAction;
    })(MicroflowAction);
    microflows.DeleteAction = DeleteAction;
    var DocumentTemplateParameterMapping = (function (_super) {
        __extends(DocumentTemplateParameterMapping, _super);
        function DocumentTemplateParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widgetName = new internal.PrimitiveProperty(DocumentTemplateParameterMapping, this, "widgetName", "", internal.PrimitiveTypeEnum.String);
            this.__argument = new internal.PrimitiveProperty(DocumentTemplateParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new DocumentTemplateParameterMapping() cannot be invoked directly, please use 'model.microflows.createDocumentTemplateParameterMapping()'");
        }
        Object.defineProperty(DocumentTemplateParameterMapping.prototype, "widgetName", {
            get: function () { return this.__widgetName.get(); },
            set: function (newValue) { this.__widgetName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplateParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DocumentTemplateParameterMapping instance in the SDK and on the server.
         * The new DocumentTemplateParameterMapping will be automatically stored in the 'parameterMappings' property of the parent GenerateDocumentAction element passed as argument.
         */
        DocumentTemplateParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DocumentTemplateParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new DocumentTemplateParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DocumentTemplateParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, DocumentTemplateParameterMapping);
        };
        DocumentTemplateParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DocumentTemplateParameterMapping.typeName = "Microflows$DocumentTemplateParameterMapping";
        DocumentTemplateParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DocumentTemplateParameterMapping;
    })(internal.Element);
    microflows.DocumentTemplateParameterMapping = DocumentTemplateParameterMapping;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Download+File relevant section in reference guide}
     */
    var DownloadFileAction = (function (_super) {
        __extends(DownloadFileAction, _super);
        function DownloadFileAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__fileDocumentVariableName = new internal.PrimitiveProperty(DownloadFileAction, this, "fileDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__showFileInBrowser = new internal.PrimitiveProperty(DownloadFileAction, this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DownloadFileAction() cannot be invoked directly, please use 'model.microflows.createDownloadFileAction()'");
        }
        Object.defineProperty(DownloadFileAction.prototype, "fileDocumentVariableName", {
            get: function () { return this.__fileDocumentVariableName.get(); },
            set: function (newValue) { this.__fileDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DownloadFileAction.prototype, "showFileInBrowser", {
            get: function () { return this.__showFileInBrowser.get(); },
            set: function (newValue) { this.__showFileInBrowser.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DownloadFileAction instance in the SDK and on the server.
         * The new DownloadFileAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        DownloadFileAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DownloadFileAction, "action", false);
        };
        /*
         * Creates and returns a new DownloadFileAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DownloadFileAction.create = function (model) {
            return internal.instancehelpers.createElement(model, DownloadFileAction);
        };
        DownloadFileAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DownloadFileAction.typeName = "Microflows$DownloadFileAction";
        DownloadFileAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DownloadFileAction;
    })(MicroflowAction);
    microflows.DownloadFileAction = DownloadFileAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/End+Event relevant section in reference guide}
     */
    var EndEvent = (function (_super) {
        __extends(EndEvent, _super);
        function EndEvent(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__returnValue = new internal.PrimitiveProperty(EndEvent, this, "returnValue", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(EndEvent, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new EndEvent() cannot be invoked directly, please use 'model.microflows.createEndEvent()'");
        }
        Object.defineProperty(EndEvent.prototype, "returnValue", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__returnValue.get(); },
            set: function (newValue) { this.__returnValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EndEvent.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new EndEvent instance in the SDK and on the server.
         * The new EndEvent will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        EndEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EndEvent, "objects", true);
        };
        /*
         * Creates and returns a new EndEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EndEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, EndEvent);
        };
        EndEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        EndEvent.typeName = "Microflows$EndEvent";
        EndEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EndEvent;
    })(MicroflowObject);
    microflows.EndEvent = EndEvent;
    /**
     * TODO
     */
    var EnumerationCase = (function (_super) {
        __extends(EnumerationCase, _super);
        function EnumerationCase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__value = new internal.PrimitiveProperty(EnumerationCase, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new EnumerationCase() cannot be invoked directly, please use 'model.microflows.createEnumerationCase()'");
        }
        Object.defineProperty(EnumerationCase.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new EnumerationCase instance in the SDK and on the server.
         * The new EnumerationCase will be automatically stored in the 'caseValue' property of the parent SequenceFlow element passed as argument.
         */
        EnumerationCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EnumerationCase, "caseValue", false);
        };
        /*
         * Creates and returns a new EnumerationCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationCase.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationCase);
        };
        EnumerationCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EnumerationCase.typeName = "Microflows$EnumerationCase";
        EnumerationCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EnumerationCase;
    })(CaseValue);
    microflows.EnumerationCase = EnumerationCase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Error+Event relevant section in reference guide}
     */
    var ErrorEvent = (function (_super) {
        __extends(ErrorEvent, _super);
        function ErrorEvent(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ErrorEvent() cannot be invoked directly, please use 'model.microflows.createErrorEvent()'");
        }
        /*
         * Creates and returns a new ErrorEvent instance in the SDK and on the server.
         * The new ErrorEvent will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        ErrorEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ErrorEvent, "objects", true);
        };
        /*
         * Creates and returns a new ErrorEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ErrorEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, ErrorEvent);
        };
        ErrorEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        ErrorEvent.typeName = "Microflows$ErrorEvent";
        ErrorEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ErrorEvent;
    })(MicroflowObject);
    microflows.ErrorEvent = ErrorEvent;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Merge relevant section in reference guide}
     */
    var ExclusiveMerge = (function (_super) {
        __extends(ExclusiveMerge, _super);
        function ExclusiveMerge(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ExclusiveMerge() cannot be invoked directly, please use 'model.microflows.createExclusiveMerge()'");
        }
        /*
         * Creates and returns a new ExclusiveMerge instance in the SDK and on the server.
         * The new ExclusiveMerge will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        ExclusiveMerge.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExclusiveMerge, "objects", true);
        };
        /*
         * Creates and returns a new ExclusiveMerge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExclusiveMerge.create = function (model) {
            return internal.instancehelpers.createElement(model, ExclusiveMerge);
        };
        ExclusiveMerge.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 60, height: 40 };
        };
        ExclusiveMerge.typeName = "Microflows$ExclusiveMerge";
        ExclusiveMerge.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ExclusiveMerge;
    })(MicroflowObject);
    microflows.ExclusiveMerge = ExclusiveMerge;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Exclusive+Split relevant section in reference guide}
     */
    var ExclusiveSplit = (function (_super) {
        __extends(ExclusiveSplit, _super);
        function ExclusiveSplit(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__splitCondition = new internal.PartProperty(ExclusiveSplit, this, "splitCondition", null, true);
            this.__caption = new internal.PrimitiveProperty(ExclusiveSplit, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__errorHandlingType = new internal.EnumProperty(ExclusiveSplit, this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            this.__documentation = new internal.PrimitiveProperty(ExclusiveSplit, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ExclusiveSplit() cannot be invoked directly, please use 'model.microflows.createExclusiveSplit()'");
        }
        Object.defineProperty(ExclusiveSplit.prototype, "splitCondition", {
            get: function () { return this.__splitCondition.get(); },
            set: function (newValue) { this.__splitCondition.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ExclusiveSplit instance in the SDK and on the server.
         * The new ExclusiveSplit will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        ExclusiveSplit.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExclusiveSplit, "objects", true);
        };
        /*
         * Creates and returns a new ExclusiveSplit instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExclusiveSplit.create = function (model) {
            return internal.instancehelpers.createElement(model, ExclusiveSplit);
        };
        ExclusiveSplit.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.splitCondition = ExpressionSplitCondition.create(this.model);
            this.errorHandlingType = ErrorHandlingType.Rollback;
            this.size = { width: 60, height: 40 };
        };
        ExclusiveSplit.typeName = "Microflows$ExclusiveSplit";
        ExclusiveSplit.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "splitCondition": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ExclusiveSplit;
    })(MicroflowObject);
    microflows.ExclusiveSplit = ExclusiveSplit;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+XML relevant section in reference guide}
     */
    var ExportXmlAction = (function (_super) {
        __extends(ExportXmlAction, _super);
        function ExportXmlAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__mapping = new internal.ByNameReferenceProperty(ExportXmlAction, this, "mapping", null, "ExportMappings$ExportMapping");
            this.__mappingArgumentVariableName = new internal.PrimitiveProperty(ExportXmlAction, this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__outputMethod = new internal.PartProperty(ExportXmlAction, this, "outputMethod", null, true);
            this.__isValidationRequired = new internal.PrimitiveProperty(ExportXmlAction, this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ExportXmlAction() cannot be invoked directly, please use 'model.microflows.createExportXmlAction()'");
        }
        Object.defineProperty(ExportXmlAction.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "outputMethod", {
            get: function () { return this.__outputMethod.get(); },
            set: function (newValue) { this.__outputMethod.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ExportXmlAction instance in the SDK and on the server.
         * The new ExportXmlAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ExportXmlAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExportXmlAction, "action", false);
        };
        /*
         * Creates and returns a new ExportXmlAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExportXmlAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ExportXmlAction);
        };
        ExportXmlAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.outputMethod = FileDocumentExport.create(this.model);
        };
        ExportXmlAction.typeName = "Microflows$ExportXmlAction";
        ExportXmlAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "outputMethod": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ExportXmlAction;
    })(MicroflowAction);
    microflows.ExportXmlAction = ExportXmlAction;
    /**
     * TODO : Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SplitCondition = (function (_super) {
        __extends(SplitCondition, _super);
        function SplitCondition(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SplitCondition() cannot be invoked directly, please use 'model.microflows.createSplitCondition()'");
        }
        SplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SplitCondition.typeName = "Microflows$SplitCondition";
        SplitCondition.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SplitCondition;
    })(internal.Element);
    microflows.SplitCondition = SplitCondition;
    var ExpressionSplitCondition = (function (_super) {
        __extends(ExpressionSplitCondition, _super);
        function ExpressionSplitCondition(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__expression = new internal.PrimitiveProperty(ExpressionSplitCondition, this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ExpressionSplitCondition() cannot be invoked directly, please use 'model.microflows.createExpressionSplitCondition()'");
        }
        Object.defineProperty(ExpressionSplitCondition.prototype, "expression", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ExpressionSplitCondition instance in the SDK and on the server.
         * The new ExpressionSplitCondition will be automatically stored in the 'splitCondition' property of the parent ExclusiveSplit element passed as argument.
         */
        ExpressionSplitCondition.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExpressionSplitCondition, "splitCondition", false);
        };
        /*
         * Creates and returns a new ExpressionSplitCondition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExpressionSplitCondition.create = function (model) {
            return internal.instancehelpers.createElement(model, ExpressionSplitCondition);
        };
        ExpressionSplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExpressionSplitCondition.typeName = "Microflows$ExpressionSplitCondition";
        ExpressionSplitCondition.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ExpressionSplitCondition;
    })(SplitCondition);
    microflows.ExpressionSplitCondition = ExpressionSplitCondition;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var OutputMethod = (function (_super) {
        __extends(OutputMethod, _super);
        function OutputMethod(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new OutputMethod() cannot be invoked directly, please use 'model.microflows.createOutputMethod()'");
        }
        OutputMethod.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OutputMethod.typeName = "Microflows$OutputMethod";
        OutputMethod.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OutputMethod;
    })(internal.Element);
    microflows.OutputMethod = OutputMethod;
    /**
     * TODO
     */
    var FileDocumentExport = (function (_super) {
        __extends(FileDocumentExport, _super);
        function FileDocumentExport(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__targetDocumentVariableName = new internal.PrimitiveProperty(FileDocumentExport, this, "targetDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new FileDocumentExport() cannot be invoked directly, please use 'model.microflows.createFileDocumentExport()'");
        }
        Object.defineProperty(FileDocumentExport.prototype, "targetDocumentVariableName", {
            get: function () { return this.__targetDocumentVariableName.get(); },
            set: function (newValue) { this.__targetDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new FileDocumentExport instance in the SDK and on the server.
         * The new FileDocumentExport will be automatically stored in the 'outputMethod' property of the parent ExportXmlAction element passed as argument.
         */
        FileDocumentExport.createIn = function (container) {
            return internal.instancehelpers.createElement(container, FileDocumentExport, "outputMethod", false);
        };
        /*
         * Creates and returns a new FileDocumentExport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FileDocumentExport.create = function (model) {
            return internal.instancehelpers.createElement(model, FileDocumentExport);
        };
        FileDocumentExport.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FileDocumentExport.typeName = "Microflows$FileDocumentExport";
        FileDocumentExport.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return FileDocumentExport;
    })(OutputMethod);
    microflows.FileDocumentExport = FileDocumentExport;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var InspectAttribute = (function (_super) {
        __extends(InspectAttribute, _super);
        function InspectAttribute(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__expression = new internal.PrimitiveProperty(InspectAttribute, this, "expression", "", internal.PrimitiveTypeEnum.String);
            this.__attribute = new internal.ByNameReferenceProperty(InspectAttribute, this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4)
                throw new Error("new InspectAttribute() cannot be invoked directly, please use 'model.microflows.createInspectAttribute()'");
        }
        Object.defineProperty(InspectAttribute.prototype, "expression", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        InspectAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        InspectAttribute.typeName = "Microflows$InspectAttribute";
        InspectAttribute.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return InspectAttribute;
    })(ListOperation);
    microflows.InspectAttribute = InspectAttribute;
    var Filter = (function (_super) {
        __extends(Filter, _super);
        function Filter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Filter() cannot be invoked directly, please use 'model.microflows.createFilter()'");
        }
        /*
         * Creates and returns a new Filter instance in the SDK and on the server.
         * The new Filter will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Filter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Filter, "operation", false);
        };
        /*
         * Creates and returns a new Filter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Filter.create = function (model) {
            return internal.instancehelpers.createElement(model, Filter);
        };
        Filter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Filter.typeName = "Microflows$Filter";
        Filter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Filter;
    })(InspectAttribute);
    microflows.Filter = Filter;
    var Find = (function (_super) {
        __extends(Find, _super);
        function Find(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Find() cannot be invoked directly, please use 'model.microflows.createFind()'");
        }
        /*
         * Creates and returns a new Find instance in the SDK and on the server.
         * The new Find will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Find.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Find, "operation", false);
        };
        /*
         * Creates and returns a new Find instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Find.create = function (model) {
            return internal.instancehelpers.createElement(model, Find);
        };
        Find.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Find.typeName = "Microflows$Find";
        Find.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Find;
    })(InspectAttribute);
    microflows.Find = Find;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Generate+Document relevant section in reference guide}
     */
    var GenerateDocumentAction = (function (_super) {
        __extends(GenerateDocumentAction, _super);
        function GenerateDocumentAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterMappings = new internal.PartListProperty(GenerateDocumentAction, this, "parameterMappings", []);
            this.__fileVariableName = new internal.PrimitiveProperty(GenerateDocumentAction, this, "fileVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__languageVariableName = new internal.PrimitiveProperty(GenerateDocumentAction, this, "languageVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__documentType = new internal.EnumProperty(GenerateDocumentAction, this, "documentType", TargetDocumentType.HTML, TargetDocumentType);
            this.__languageSetting = new internal.EnumProperty(GenerateDocumentAction, this, "languageSetting", LanguageSettingType.CurrentUser, LanguageSettingType);
            this.__documentTemplate = new internal.ByNameReferenceProperty(GenerateDocumentAction, this, "documentTemplate", null, "DocumentTemplates$DocumentTemplate");
            this.__overrideTopMargin = new internal.PrimitiveProperty(GenerateDocumentAction, this, "overrideTopMargin", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideBottomMargin = new internal.PrimitiveProperty(GenerateDocumentAction, this, "overrideBottomMargin", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideLeftMargin = new internal.PrimitiveProperty(GenerateDocumentAction, this, "overrideLeftMargin", false, internal.PrimitiveTypeEnum.Boolean);
            this.__overrideRightMargin = new internal.PrimitiveProperty(GenerateDocumentAction, this, "overrideRightMargin", false, internal.PrimitiveTypeEnum.Boolean);
            this.__marginLeftInInch = new internal.PrimitiveProperty(GenerateDocumentAction, this, "marginLeftInInch", "", internal.PrimitiveTypeEnum.String);
            this.__marginRightInInch = new internal.PrimitiveProperty(GenerateDocumentAction, this, "marginRightInInch", "", internal.PrimitiveTypeEnum.String);
            this.__marginTopInInch = new internal.PrimitiveProperty(GenerateDocumentAction, this, "marginTopInInch", "", internal.PrimitiveTypeEnum.String);
            this.__marginBottomInInch = new internal.PrimitiveProperty(GenerateDocumentAction, this, "marginBottomInInch", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new GenerateDocumentAction() cannot be invoked directly, please use 'model.microflows.createGenerateDocumentAction()'");
        }
        Object.defineProperty(GenerateDocumentAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "fileVariableName", {
            get: function () { return this.__fileVariableName.get(); },
            set: function (newValue) { this.__fileVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "languageVariableName", {
            get: function () { return this.__languageVariableName.get(); },
            set: function (newValue) { this.__languageVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentType", {
            get: function () { return this.__documentType.get(); },
            set: function (newValue) { this.__documentType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "languageSetting", {
            get: function () { return this.__languageSetting.get(); },
            set: function (newValue) { this.__languageSetting.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentTemplate", {
            get: function () { return this.__documentTemplate.get(); },
            set: function (newValue) { this.__documentTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentTemplateQualifiedName", {
            get: function () { return this.__documentTemplate.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideTopMargin", {
            get: function () { return this.__overrideTopMargin.get(); },
            set: function (newValue) { this.__overrideTopMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideBottomMargin", {
            get: function () { return this.__overrideBottomMargin.get(); },
            set: function (newValue) { this.__overrideBottomMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideLeftMargin", {
            get: function () { return this.__overrideLeftMargin.get(); },
            set: function (newValue) { this.__overrideLeftMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideRightMargin", {
            get: function () { return this.__overrideRightMargin.get(); },
            set: function (newValue) { this.__overrideRightMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginLeftInInch", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__marginLeftInInch.get(); },
            set: function (newValue) { this.__marginLeftInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginRightInInch", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__marginRightInInch.get(); },
            set: function (newValue) { this.__marginRightInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginTopInInch", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__marginTopInInch.get(); },
            set: function (newValue) { this.__marginTopInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginBottomInInch", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__marginBottomInInch.get(); },
            set: function (newValue) { this.__marginBottomInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GenerateDocumentAction instance in the SDK and on the server.
         * The new GenerateDocumentAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        GenerateDocumentAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GenerateDocumentAction, "action", false);
        };
        /*
         * Creates and returns a new GenerateDocumentAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GenerateDocumentAction.create = function (model) {
            return internal.instancehelpers.createElement(model, GenerateDocumentAction);
        };
        GenerateDocumentAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.documentType = TargetDocumentType.HTML;
            this.languageSetting = LanguageSettingType.CurrentUser;
            this.marginLeftInInch = "0";
            this.marginRightInInch = "0";
            this.marginTopInInch = "0";
            this.marginBottomInInch = "0";
        };
        GenerateDocumentAction.typeName = "Microflows$GenerateDocumentAction";
        GenerateDocumentAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GenerateDocumentAction;
    })(MicroflowAction);
    microflows.GenerateDocumentAction = GenerateDocumentAction;
    var Head = (function (_super) {
        __extends(Head, _super);
        function Head(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Head() cannot be invoked directly, please use 'model.microflows.createHead()'");
        }
        /*
         * Creates and returns a new Head instance in the SDK and on the server.
         * The new Head will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Head.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Head, "operation", false);
        };
        /*
         * Creates and returns a new Head instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Head.create = function (model) {
            return internal.instancehelpers.createElement(model, Head);
        };
        Head.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Head.typeName = "Microflows$Head";
        Head.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Head;
    })(ListOperation);
    microflows.Head = Head;
    var HttpConfiguration = (function (_super) {
        __extends(HttpConfiguration, _super);
        function HttpConfiguration(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__overrideLocation = new internal.PrimitiveProperty(HttpConfiguration, this, "overrideLocation", false, internal.PrimitiveTypeEnum.Boolean);
            this.__customLocation = new internal.PrimitiveProperty(HttpConfiguration, this, "customLocation", "", internal.PrimitiveTypeEnum.String);
            this.__useAuthentication = new internal.PrimitiveProperty(HttpConfiguration, this, "useAuthentication", false, internal.PrimitiveTypeEnum.Boolean);
            this.__httpAuthenticationUserName = new internal.PrimitiveProperty(HttpConfiguration, this, "httpAuthenticationUserName", "", internal.PrimitiveTypeEnum.String);
            this.__authenticationPassword = new internal.PrimitiveProperty(HttpConfiguration, this, "authenticationPassword", "", internal.PrimitiveTypeEnum.String);
            this.__headerEntries = new internal.PartListProperty(HttpConfiguration, this, "headerEntries", []);
            if (arguments.length < 4)
                throw new Error("new HttpConfiguration() cannot be invoked directly, please use 'model.microflows.createHttpConfiguration()'");
        }
        Object.defineProperty(HttpConfiguration.prototype, "overrideLocation", {
            get: function () { return this.__overrideLocation.get(); },
            set: function (newValue) { this.__overrideLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "customLocation", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__customLocation.get(); },
            set: function (newValue) { this.__customLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "useAuthentication", {
            get: function () { return this.__useAuthentication.get(); },
            set: function (newValue) { this.__useAuthentication.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "httpAuthenticationUserName", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__httpAuthenticationUserName.get(); },
            set: function (newValue) { this.__httpAuthenticationUserName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "authenticationPassword", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__authenticationPassword.get(); },
            set: function (newValue) { this.__authenticationPassword.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "headerEntries", {
            get: function () { return this.__headerEntries.get(); },
            set: function (newValue) { this.__headerEntries.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * The new HttpConfiguration will be automatically stored in the 'httpConfiguration' property of the parent WebServiceCallAction element passed as argument.
         */
        HttpConfiguration.createIn = function (container) {
            return internal.instancehelpers.createElement(container, HttpConfiguration, "httpConfiguration", false);
        };
        /*
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HttpConfiguration.create = function (model) {
            return internal.instancehelpers.createElement(model, HttpConfiguration);
        };
        HttpConfiguration.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        HttpConfiguration.typeName = "Microflows$HttpConfiguration";
        HttpConfiguration.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return HttpConfiguration;
    })(internal.Element);
    microflows.HttpConfiguration = HttpConfiguration;
    /**
     * TODO
     */
    var HttpHeaderEntry = (function (_super) {
        __extends(HttpHeaderEntry, _super);
        function HttpHeaderEntry(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__key = new internal.PrimitiveProperty(HttpHeaderEntry, this, "key", "", internal.PrimitiveTypeEnum.String);
            this.__value = new internal.PrimitiveProperty(HttpHeaderEntry, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new HttpHeaderEntry() cannot be invoked directly, please use 'model.microflows.createHttpHeaderEntry()'");
        }
        Object.defineProperty(HttpHeaderEntry.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpHeaderEntry.prototype, "value", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new HttpHeaderEntry instance in the SDK and on the server.
         * The new HttpHeaderEntry will be automatically stored in the 'headerEntries' property of the parent HttpConfiguration element passed as argument.
         */
        HttpHeaderEntry.createIn = function (container) {
            return internal.instancehelpers.createElement(container, HttpHeaderEntry, "headerEntries", true);
        };
        /*
         * Creates and returns a new HttpHeaderEntry instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HttpHeaderEntry.create = function (model) {
            return internal.instancehelpers.createElement(model, HttpHeaderEntry);
        };
        HttpHeaderEntry.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        HttpHeaderEntry.typeName = "Microflows$HttpHeaderEntry";
        HttpHeaderEntry.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return HttpHeaderEntry;
    })(internal.Element);
    microflows.HttpHeaderEntry = HttpHeaderEntry;
    /**
     * TODO
     */
    var ImportMappingCall = (function (_super) {
        __extends(ImportMappingCall, _super);
        function ImportMappingCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__mapping = new internal.ByNameReferenceProperty(ImportMappingCall, this, "mapping", null, "ImportMappings$ImportMapping");
            this.__mappingArgumentVariableName = new internal.PrimitiveProperty(ImportMappingCall, this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__range = new internal.PartProperty(ImportMappingCall, this, "range", null, true);
            if (arguments.length < 4)
                throw new Error("new ImportMappingCall() cannot be invoked directly, please use 'model.microflows.createImportMappingCall()'");
        }
        Object.defineProperty(ImportMappingCall.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "range", {
            get: function () { return this.__range.get(); },
            set: function (newValue) { this.__range.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ImportMappingCall instance in the SDK and on the server.
         * The new ImportMappingCall will be automatically stored in the 'importMappingCall' property of the parent ResultHandling element passed as argument.
         */
        ImportMappingCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImportMappingCall, "importMappingCall", false);
        };
        /*
         * Creates and returns a new ImportMappingCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportMappingCall.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportMappingCall);
        };
        ImportMappingCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.range = ConstantRange.create(this.model);
        };
        ImportMappingCall.typeName = "Microflows$ImportMappingCall";
        ImportMappingCall.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "range": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ImportMappingCall;
    })(internal.Element);
    microflows.ImportMappingCall = ImportMappingCall;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Import+XML relevant section in reference guide}
     */
    var ImportXmlAction = (function (_super) {
        __extends(ImportXmlAction, _super);
        function ImportXmlAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__xmlDocumentVariableName = new internal.PrimitiveProperty(ImportXmlAction, this, "xmlDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__resultHandling = new internal.PartProperty(ImportXmlAction, this, "resultHandling", null, true);
            this.__isValidationRequired = new internal.PrimitiveProperty(ImportXmlAction, this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ImportXmlAction() cannot be invoked directly, please use 'model.microflows.createImportXmlAction()'");
        }
        Object.defineProperty(ImportXmlAction.prototype, "xmlDocumentVariableName", {
            get: function () { return this.__xmlDocumentVariableName.get(); },
            set: function (newValue) { this.__xmlDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportXmlAction.prototype, "resultHandling", {
            get: function () { return this.__resultHandling.get(); },
            set: function (newValue) { this.__resultHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportXmlAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ImportXmlAction instance in the SDK and on the server.
         * The new ImportXmlAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ImportXmlAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImportXmlAction, "action", false);
        };
        /*
         * Creates and returns a new ImportXmlAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportXmlAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportXmlAction);
        };
        ImportXmlAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.resultHandling = ResultHandling.create(this.model);
        };
        ImportXmlAction.typeName = "Microflows$ImportXmlAction";
        ImportXmlAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "resultHandling": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ImportXmlAction;
    })(MicroflowAction);
    microflows.ImportXmlAction = ImportXmlAction;
    /**
     * TODO
     */
    var InheritanceCase = (function (_super) {
        __extends(InheritanceCase, _super);
        function InheritanceCase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__value = new internal.ByNameReferenceProperty(InheritanceCase, this, "value", null, "DomainModels$Entity");
            if (arguments.length < 4)
                throw new Error("new InheritanceCase() cannot be invoked directly, please use 'model.microflows.createInheritanceCase()'");
        }
        Object.defineProperty(InheritanceCase.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceCase.prototype, "valueQualifiedName", {
            get: function () { return this.__value.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new InheritanceCase instance in the SDK and on the server.
         * The new InheritanceCase will be automatically stored in the 'caseValue' property of the parent SequenceFlow element passed as argument.
         */
        InheritanceCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, InheritanceCase, "caseValue", false);
        };
        /*
         * Creates and returns a new InheritanceCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InheritanceCase.create = function (model) {
            return internal.instancehelpers.createElement(model, InheritanceCase);
        };
        InheritanceCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        InheritanceCase.typeName = "Microflows$InheritanceCase";
        InheritanceCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return InheritanceCase;
    })(CaseValue);
    microflows.InheritanceCase = InheritanceCase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Inheritance+Split relevant section in reference guide}
     */
    var InheritanceSplit = (function (_super) {
        __extends(InheritanceSplit, _super);
        function InheritanceSplit(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__splitVariableName = new internal.PrimitiveProperty(InheritanceSplit, this, "splitVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PrimitiveProperty(InheritanceSplit, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(InheritanceSplit, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new InheritanceSplit() cannot be invoked directly, please use 'model.microflows.createInheritanceSplit()'");
        }
        Object.defineProperty(InheritanceSplit.prototype, "splitVariableName", {
            get: function () { return this.__splitVariableName.get(); },
            set: function (newValue) { this.__splitVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceSplit.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceSplit.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new InheritanceSplit instance in the SDK and on the server.
         * The new InheritanceSplit will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        InheritanceSplit.createIn = function (container) {
            return internal.instancehelpers.createElement(container, InheritanceSplit, "objects", true);
        };
        /*
         * Creates and returns a new InheritanceSplit instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InheritanceSplit.create = function (model) {
            return internal.instancehelpers.createElement(model, InheritanceSplit);
        };
        InheritanceSplit.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 60, height: 40 };
        };
        InheritanceSplit.typeName = "Microflows$InheritanceSplit";
        InheritanceSplit.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return InheritanceSplit;
    })(MicroflowObject);
    microflows.InheritanceSplit = InheritanceSplit;
    var Intersect = (function (_super) {
        __extends(Intersect, _super);
        function Intersect(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Intersect() cannot be invoked directly, please use 'model.microflows.createIntersect()'");
        }
        /*
         * Creates and returns a new Intersect instance in the SDK and on the server.
         * The new Intersect will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Intersect.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Intersect, "operation", false);
        };
        /*
         * Creates and returns a new Intersect instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Intersect.create = function (model) {
            return internal.instancehelpers.createElement(model, Intersect);
        };
        Intersect.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Intersect.typeName = "Microflows$Intersect";
        Intersect.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Intersect;
    })(BinaryListOperation);
    microflows.Intersect = Intersect;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Java+Action+Call relevant section in reference guide}
     */
    var JavaActionCallAction = (function (_super) {
        __extends(JavaActionCallAction, _super);
        function JavaActionCallAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__javaAction = new internal.ByNameReferenceProperty(JavaActionCallAction, this, "javaAction", null, "JavaActions$JavaAction");
            this.__parameterMappings = new internal.PartListProperty(JavaActionCallAction, this, "parameterMappings", []);
            this.__outputVariableName = new internal.PrimitiveProperty(JavaActionCallAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new JavaActionCallAction() cannot be invoked directly, please use 'model.microflows.createJavaActionCallAction()'");
        }
        Object.defineProperty(JavaActionCallAction.prototype, "javaAction", {
            get: function () { return this.__javaAction.get(); },
            set: function (newValue) { this.__javaAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "javaActionQualifiedName", {
            get: function () { return this.__javaAction.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new JavaActionCallAction instance in the SDK and on the server.
         * The new JavaActionCallAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        JavaActionCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionCallAction, "action", false);
        };
        /*
         * Creates and returns a new JavaActionCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionCallAction);
        };
        JavaActionCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        JavaActionCallAction.typeName = "Microflows$JavaActionCallAction";
        JavaActionCallAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return JavaActionCallAction;
    })(MicroflowAction);
    microflows.JavaActionCallAction = JavaActionCallAction;
    var JavaActionParameterMapping = (function (_super) {
        __extends(JavaActionParameterMapping, _super);
        function JavaActionParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameter = new internal.ByNameReferenceProperty(JavaActionParameterMapping, this, "parameter", null, "JavaActions$JavaActionParameter");
            this.__argument = new internal.PrimitiveProperty(JavaActionParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new JavaActionParameterMapping() cannot be invoked directly, please use 'model.microflows.createJavaActionParameterMapping()'");
        }
        Object.defineProperty(JavaActionParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new JavaActionParameterMapping instance in the SDK and on the server.
         * The new JavaActionParameterMapping will be automatically stored in the 'parameterMappings' property of the parent JavaActionCallAction element passed as argument.
         */
        JavaActionParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new JavaActionParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionParameterMapping);
        };
        JavaActionParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        JavaActionParameterMapping.typeName = "Microflows$JavaActionParameterMapping";
        JavaActionParameterMapping.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "parameter": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return JavaActionParameterMapping;
    })(internal.Element);
    microflows.JavaActionParameterMapping = JavaActionParameterMapping;
    var ListEquals = (function (_super) {
        __extends(ListEquals, _super);
        function ListEquals(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ListEquals() cannot be invoked directly, please use 'model.microflows.createListEquals()'");
        }
        /*
         * Creates and returns a new ListEquals instance in the SDK and on the server.
         * The new ListEquals will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        ListEquals.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListEquals, "operation", false);
        };
        /*
         * Creates and returns a new ListEquals instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListEquals.create = function (model) {
            return internal.instancehelpers.createElement(model, ListEquals);
        };
        ListEquals.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListEquals.typeName = "Microflows$ListEquals";
        ListEquals.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListEquals;
    })(BinaryListOperation);
    microflows.ListEquals = ListEquals;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+Operation relevant section in reference guide}
     */
    var ListOperationAction = (function (_super) {
        __extends(ListOperationAction, _super);
        function ListOperationAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__operation = new internal.PartProperty(ListOperationAction, this, "operation", null, false);
            this.__outputVariableName = new internal.PrimitiveProperty(ListOperationAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ListOperationAction() cannot be invoked directly, please use 'model.microflows.createListOperationAction()'");
        }
        Object.defineProperty(ListOperationAction.prototype, "operation", {
            get: function () { return this.__operation.get(); },
            set: function (newValue) { this.__operation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListOperationAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListOperationAction instance in the SDK and on the server.
         * The new ListOperationAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ListOperationAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListOperationAction, "action", false);
        };
        /*
         * Creates and returns a new ListOperationAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListOperationAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ListOperationAction);
        };
        ListOperationAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListOperationAction.typeName = "Microflows$ListOperationAction";
        ListOperationAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListOperationAction;
    })(MicroflowAction);
    microflows.ListOperationAction = ListOperationAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Log+Message relevant section in reference guide}
     */
    var LogMessageAction = (function (_super) {
        __extends(LogMessageAction, _super);
        function LogMessageAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__level = new internal.EnumProperty(LogMessageAction, this, "level", LogLevel.Info, LogLevel);
            this.__node = new internal.PrimitiveProperty(LogMessageAction, this, "node", "", internal.PrimitiveTypeEnum.String);
            this.__messageTemplate = new internal.PartProperty(LogMessageAction, this, "messageTemplate", null, true);
            this.__includeLatestStackTrace = new internal.PrimitiveProperty(LogMessageAction, this, "includeLatestStackTrace", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new LogMessageAction() cannot be invoked directly, please use 'model.microflows.createLogMessageAction()'");
        }
        Object.defineProperty(LogMessageAction.prototype, "level", {
            get: function () { return this.__level.get(); },
            set: function (newValue) { this.__level.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "node", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__node.get(); },
            set: function (newValue) { this.__node.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "messageTemplate", {
            get: function () { return this.__messageTemplate.get(); },
            set: function (newValue) { this.__messageTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "includeLatestStackTrace", {
            get: function () { return this.__includeLatestStackTrace.get(); },
            set: function (newValue) { this.__includeLatestStackTrace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LogMessageAction instance in the SDK and on the server.
         * The new LogMessageAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        LogMessageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LogMessageAction, "action", false);
        };
        /*
         * Creates and returns a new LogMessageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LogMessageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, LogMessageAction);
        };
        LogMessageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.level = LogLevel.Info;
            this.messageTemplate = StringTemplate.create(this.model);
        };
        LogMessageAction.typeName = "Microflows$LogMessageAction";
        LogMessageAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "messageTemplate": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return LogMessageAction;
    })(MicroflowAction);
    microflows.LogMessageAction = LogMessageAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Loop relevant section in reference guide}
     */
    var LoopedActivity = (function (_super) {
        __extends(LoopedActivity, _super);
        function LoopedActivity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__objectCollection = new internal.PartProperty(LoopedActivity, this, "objectCollection", null, true);
            this.__iteratedListVariableName = new internal.PrimitiveProperty(LoopedActivity, this, "iteratedListVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__loopVariableName = new internal.PrimitiveProperty(LoopedActivity, this, "loopVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__errorHandlingType = new internal.EnumProperty(LoopedActivity, this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            this.__documentation = new internal.PrimitiveProperty(LoopedActivity, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new LoopedActivity() cannot be invoked directly, please use 'model.microflows.createLoopedActivity()'");
        }
        Object.defineProperty(LoopedActivity.prototype, "objectCollection", {
            get: function () { return this.__objectCollection.get(); },
            set: function (newValue) { this.__objectCollection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "iteratedListVariableName", {
            get: function () { return this.__iteratedListVariableName.get(); },
            set: function (newValue) { this.__iteratedListVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "loopVariableName", {
            get: function () { return this.__loopVariableName.get(); },
            set: function (newValue) { this.__loopVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LoopedActivity instance in the SDK and on the server.
         * The new LoopedActivity will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        LoopedActivity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LoopedActivity, "objects", true);
        };
        /*
         * Creates and returns a new LoopedActivity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LoopedActivity.create = function (model) {
            return internal.instancehelpers.createElement(model, LoopedActivity);
        };
        LoopedActivity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectCollection = MicroflowObjectCollection.create(this.model);
            this.errorHandlingType = ErrorHandlingType.Rollback;
        };
        LoopedActivity.typeName = "Microflows$LoopedActivity";
        LoopedActivity.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "objectCollection": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return LoopedActivity;
    })(Activity);
    microflows.LoopedActivity = LoopedActivity;
    /**
     * TODO
     */
    var MappingRequestHandling = (function (_super) {
        __extends(MappingRequestHandling, _super);
        function MappingRequestHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__mapping = new internal.ByNameReferenceProperty(MappingRequestHandling, this, "mapping", null, "ExportMappings$ExportMapping");
            this.__mappingArgumentVariableName = new internal.PrimitiveProperty(MappingRequestHandling, this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MappingRequestHandling() cannot be invoked directly, please use 'model.microflows.createMappingRequestHandling()'");
        }
        Object.defineProperty(MappingRequestHandling.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * The new MappingRequestHandling will be automatically stored in the 'requestHeaderHandling' property of the parent WebServiceCallAction element passed as argument.
         */
        MappingRequestHandling.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MappingRequestHandling, "requestHeaderHandling", false);
        };
        /*
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MappingRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, MappingRequestHandling);
        };
        MappingRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MappingRequestHandling.typeName = "Microflows$MappingRequestHandling";
        MappingRequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MappingRequestHandling;
    })(RequestHandling);
    microflows.MappingRequestHandling = MappingRequestHandling;
    /**
     * TODO
     */
    var MemberChange = (function (_super) {
        __extends(MemberChange, _super);
        function MemberChange(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attribute = new internal.ByNameReferenceProperty(MemberChange, this, "attribute", null, "DomainModels$Attribute");
            this.__association = new internal.ByNameReferenceProperty(MemberChange, this, "association", null, "DomainModels$AssociationBase");
            this.__type = new internal.EnumProperty(MemberChange, this, "type", ChangeActionItemType.Set, ChangeActionItemType);
            this.__value = new internal.PrimitiveProperty(MemberChange, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MemberChange() cannot be invoked directly, please use 'model.microflows.createMemberChange()'");
        }
        Object.defineProperty(MemberChange.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "value", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MemberChange instance in the SDK and on the server.
         * The new MemberChange will be automatically stored in the 'items' property of the parent ChangeMembersAction element passed as argument.
         */
        MemberChange.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MemberChange, "items", true);
        };
        /*
         * Creates and returns a new MemberChange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MemberChange.create = function (model) {
            return internal.instancehelpers.createElement(model, MemberChange);
        };
        MemberChange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = ChangeActionItemType.Set;
        };
        MemberChange.typeName = "Microflows$MemberChange";
        MemberChange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MemberChange;
    })(internal.Element);
    microflows.MemberChange = MemberChange;
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowBase = (function (_super) {
        __extends(MicroflowBase, _super);
        function MicroflowBase(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__objectCollection = new internal.PartProperty(MicroflowBase, this, "objectCollection", null, true);
            this.__flows = new internal.PartListProperty(MicroflowBase, this, "flows", []);
            this.__returnType = new internal.PrimitiveProperty(MicroflowBase, this, "returnType", "", internal.PrimitiveTypeEnum.String);
            this.__applyEntityAccess = new internal.PrimitiveProperty(MicroflowBase, this, "applyEntityAccess", false, internal.PrimitiveTypeEnum.Boolean);
            this.__markAsUsed = new internal.PrimitiveProperty(MicroflowBase, this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
            this._containmentName = "documents";
        }
        Object.defineProperty(MicroflowBase.prototype, "objectCollection", {
            get: function () { return this.__objectCollection.get(); },
            set: function (newValue) { this.__objectCollection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "flows", {
            get: function () { return this.__flows.get(); },
            set: function (newValue) { this.__flows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "applyEntityAccess", {
            get: function () { return this.__applyEntityAccess.get(); },
            set: function (newValue) { this.__applyEntityAccess.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "markAsUsed", {
            get: function () { return this.__markAsUsed.get(); },
            set: function (newValue) { this.__markAsUsed.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectCollection = MicroflowObjectCollection.create(this.model);
        };
        MicroflowBase.typeName = "Microflows$MicroflowBase";
        MicroflowBase.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "objectCollection": {
                    "required": {
                        "currentValue": true
                    }
                },
                "returnType": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return MicroflowBase;
    })(projects_1.projects.Document);
    microflows.MicroflowBase = MicroflowBase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflows relevant section in reference guide}
     */
    var Microflow = (function (_super) {
        __extends(Microflow, _super);
        function Microflow(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__allowedModuleRoles = new internal.ByNameReferenceListProperty(Microflow, this, "allowedModuleRoles", [], "Security$ModuleRole");
            this.__allowConcurrentExecution = new internal.PrimitiveProperty(Microflow, this, "allowConcurrentExecution", false, internal.PrimitiveTypeEnum.Boolean);
            this.__concurrencyErrorMessage = new internal.PartProperty(Microflow, this, "concurrencyErrorMessage", null, true);
            this.__concurrencyErrorMicroflow = new internal.ByNameReferenceProperty(Microflow, this, "concurrencyErrorMicroflow", null, "Microflows$Microflow");
            this._containmentName = "documents";
        }
        Object.defineProperty(Microflow.prototype, "allowedModuleRoles", {
            get: function () { return this.__allowedModuleRoles.get(); },
            set: function (newValue) { this.__allowedModuleRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "allowedModuleRolesQualifiedNames", {
            get: function () { return this.__allowedModuleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "allowConcurrentExecution", {
            get: function () { return this.__allowConcurrentExecution.get(); },
            set: function (newValue) { this.__allowConcurrentExecution.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMessage", {
            get: function () { return this.__concurrencyErrorMessage.get(); },
            set: function (newValue) { this.__concurrencyErrorMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMicroflow", {
            get: function () { return this.__concurrencyErrorMicroflow.get(); },
            set: function (newValue) { this.__concurrencyErrorMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMicroflowQualifiedName", {
            get: function () { return this.__concurrencyErrorMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Microflow unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Microflow.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Microflow);
        };
        Microflow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.allowConcurrentExecution = true;
            this.concurrencyErrorMessage = texts_1.texts.Text.create(this.model);
            this.returnType = "Void";
        };
        Microflow.typeName = "Microflows$Microflow";
        Microflow.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "concurrencyErrorMessage": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Microflow;
    })(MicroflowBase);
    microflows.Microflow = Microflow;
    var MicroflowCall = (function (_super) {
        __extends(MicroflowCall, _super);
        function MicroflowCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflow = new internal.ByNameReferenceProperty(MicroflowCall, this, "microflow", null, "Microflows$Microflow");
            this.__parameterMappings = new internal.PartListProperty(MicroflowCall, this, "parameterMappings", []);
            if (arguments.length < 4)
                throw new Error("new MicroflowCall() cannot be invoked directly, please use 'model.microflows.createMicroflowCall()'");
        }
        Object.defineProperty(MicroflowCall.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCall.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCall.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowCall instance in the SDK and on the server.
         * The new MicroflowCall will be automatically stored in the 'microflowCall' property of the parent MicroflowCallAction element passed as argument.
         */
        MicroflowCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCall, "microflowCall", false);
        };
        /*
         * Creates and returns a new MicroflowCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCall.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCall);
        };
        MicroflowCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowCall.typeName = "Microflows$MicroflowCall";
        MicroflowCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowCall;
    })(internal.Element);
    microflows.MicroflowCall = MicroflowCall;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Microflow+Call relevant section in reference guide}
     */
    var MicroflowCallAction = (function (_super) {
        __extends(MicroflowCallAction, _super);
        function MicroflowCallAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflowCall = new internal.PartProperty(MicroflowCallAction, this, "microflowCall", null, false);
            this.__useReturnVariable = new internal.PrimitiveProperty(MicroflowCallAction, this, "useReturnVariable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__outputVariableName = new internal.PrimitiveProperty(MicroflowCallAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MicroflowCallAction() cannot be invoked directly, please use 'model.microflows.createMicroflowCallAction()'");
        }
        Object.defineProperty(MicroflowCallAction.prototype, "microflowCall", {
            get: function () { return this.__microflowCall.get(); },
            set: function (newValue) { this.__microflowCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallAction.prototype, "useReturnVariable", {
            get: function () { return this.__useReturnVariable.get(); },
            set: function (newValue) { this.__useReturnVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowCallAction instance in the SDK and on the server.
         * The new MicroflowCallAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        MicroflowCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCallAction, "action", false);
        };
        /*
         * Creates and returns a new MicroflowCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCallAction);
        };
        MicroflowCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.useReturnVariable = true;
        };
        MicroflowCallAction.typeName = "Microflows$MicroflowCallAction";
        MicroflowCallAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowCallAction;
    })(MicroflowAction);
    microflows.MicroflowCallAction = MicroflowCallAction;
    var MicroflowCallParameterMapping = (function (_super) {
        __extends(MicroflowCallParameterMapping, _super);
        function MicroflowCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameter = new internal.ByNameReferenceProperty(MicroflowCallParameterMapping, this, "parameter", null, "Microflows$MicroflowParameter");
            this.__argument = new internal.PrimitiveProperty(MicroflowCallParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MicroflowCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createMicroflowCallParameterMapping()'");
        }
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowCallParameterMapping instance in the SDK and on the server.
         * The new MicroflowCallParameterMapping will be automatically stored in the 'parameterMappings' property of the parent MicroflowCall element passed as argument.
         */
        MicroflowCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCallParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new MicroflowCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCallParameterMapping);
        };
        MicroflowCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowCallParameterMapping.typeName = "Microflows$MicroflowCallParameterMapping";
        MicroflowCallParameterMapping.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "parameter": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return MicroflowCallParameterMapping;
    })(internal.Element);
    microflows.MicroflowCallParameterMapping = MicroflowCallParameterMapping;
    /**
     * TODO: artificial object
     */
    var MicroflowObjectCollection = (function (_super) {
        __extends(MicroflowObjectCollection, _super);
        function MicroflowObjectCollection(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__objects = new internal.PartListProperty(MicroflowObjectCollection, this, "objects", []);
            if (arguments.length < 4)
                throw new Error("new MicroflowObjectCollection() cannot be invoked directly, please use 'model.microflows.createMicroflowObjectCollection()'");
        }
        Object.defineProperty(MicroflowObjectCollection.prototype, "objects", {
            get: function () { return this.__objects.get(); },
            set: function (newValue) { this.__objects.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowObjectCollection instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowObjectCollection.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowObjectCollection);
        };
        MicroflowObjectCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowObjectCollection.typeName = "Microflows$MicroflowObjectCollection";
        MicroflowObjectCollection.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowObjectCollection;
    })(internal.Element);
    microflows.MicroflowObjectCollection = MicroflowObjectCollection;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowParameterBase = (function (_super) {
        __extends(MicroflowParameterBase, _super);
        function MicroflowParameterBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MicroflowParameterBase, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(MicroflowParameterBase, this, "type", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MicroflowParameterBase() cannot be invoked directly, please use 'model.microflows.createMicroflowParameterBase()'");
        }
        Object.defineProperty(MicroflowParameterBase.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterBase.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowParameterBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
        };
        MicroflowParameterBase.typeName = "Microflows$MicroflowParameterBase";
        MicroflowParameterBase.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return MicroflowParameterBase;
    })(internal.Element);
    microflows.MicroflowParameterBase = MicroflowParameterBase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    var MicroflowParameter = (function (_super) {
        __extends(MicroflowParameter, _super);
        function MicroflowParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new MicroflowParameter() cannot be invoked directly, please use 'model.microflows.createMicroflowParameter()'");
        }
        MicroflowParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MicroflowParameter.typeName = "Microflows$MicroflowParameter";
        MicroflowParameter.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return MicroflowParameter;
    })(MicroflowParameterBase);
    microflows.MicroflowParameter = MicroflowParameter;
    var MicroflowParameterObject = (function (_super) {
        __extends(MicroflowParameterObject, _super);
        function MicroflowParameterObject(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(MicroflowParameterObject, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(MicroflowParameterObject, this, "type", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(MicroflowParameterObject, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MicroflowParameterObject() cannot be invoked directly, please use 'model.microflows.createMicroflowParameterObject()'");
        }
        Object.defineProperty(MicroflowParameterObject.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterObject.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterObject.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowParameterObject instance in the SDK and on the server.
         * The new MicroflowParameterObject will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        MicroflowParameterObject.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowParameterObject, "objects", true);
        };
        /*
         * Creates and returns a new MicroflowParameterObject instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowParameterObject.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowParameterObject);
        };
        MicroflowParameterObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
            this.size = { width: 30, height: 30 };
        };
        MicroflowParameterObject.typeName = "Microflows$MicroflowParameterObject";
        MicroflowParameterObject.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowParameterObject;
    })(MicroflowObject);
    microflows.MicroflowParameterObject = MicroflowParameterObject;
    /**
     * TODO
     */
    var NoCase = (function (_super) {
        __extends(NoCase, _super);
        function NoCase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new NoCase() cannot be invoked directly, please use 'model.microflows.createNoCase()'");
        }
        /*
         * Creates and returns a new NoCase instance in the SDK and on the server.
         * The new NoCase will be automatically stored in the 'caseValue' property of the parent SequenceFlow element passed as argument.
         */
        NoCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NoCase, "caseValue", false);
        };
        /*
         * Creates and returns a new NoCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoCase.create = function (model) {
            return internal.instancehelpers.createElement(model, NoCase);
        };
        NoCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NoCase.typeName = "Microflows$NoCase";
        NoCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NoCase;
    })(CaseValue);
    microflows.NoCase = NoCase;
    /**
     * TODO
     */
    var ResultHandling = (function (_super) {
        __extends(ResultHandling, _super);
        function ResultHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__importMappingCall = new internal.PartProperty(ResultHandling, this, "importMappingCall", null, false);
            this.__storeInVariable = new internal.PrimitiveProperty(ResultHandling, this, "storeInVariable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__outputVariableName = new internal.PrimitiveProperty(ResultHandling, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ResultHandling() cannot be invoked directly, please use 'model.microflows.createResultHandling()'");
        }
        Object.defineProperty(ResultHandling.prototype, "importMappingCall", {
            get: function () { return this.__importMappingCall.get(); },
            set: function (newValue) { this.__importMappingCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "storeInVariable", {
            get: function () { return this.__storeInVariable.get(); },
            set: function (newValue) { this.__storeInVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ResultHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ResultHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, ResultHandling);
        };
        ResultHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ResultHandling.typeName = "Microflows$ResultHandling";
        ResultHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ResultHandling;
    })(internal.Element);
    microflows.ResultHandling = ResultHandling;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Retrieve relevant section in reference guide}
     */
    var RetrieveAction = (function (_super) {
        __extends(RetrieveAction, _super);
        function RetrieveAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__retrieveSource = new internal.PartProperty(RetrieveAction, this, "retrieveSource", null, true);
            this.__outputVariableName = new internal.PrimitiveProperty(RetrieveAction, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new RetrieveAction() cannot be invoked directly, please use 'model.microflows.createRetrieveAction()'");
        }
        Object.defineProperty(RetrieveAction.prototype, "retrieveSource", {
            get: function () { return this.__retrieveSource.get(); },
            set: function (newValue) { this.__retrieveSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RetrieveAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RetrieveAction instance in the SDK and on the server.
         * The new RetrieveAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        RetrieveAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RetrieveAction, "action", false);
        };
        /*
         * Creates and returns a new RetrieveAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RetrieveAction.create = function (model) {
            return internal.instancehelpers.createElement(model, RetrieveAction);
        };
        RetrieveAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.retrieveSource = AssociationRetrieveSource.create(this.model);
        };
        RetrieveAction.typeName = "Microflows$RetrieveAction";
        RetrieveAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "retrieveSource": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return RetrieveAction;
    })(MicroflowAction);
    microflows.RetrieveAction = RetrieveAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rollback+Object relevant section in reference guide}
     */
    var RollbackAction = (function (_super) {
        __extends(RollbackAction, _super);
        function RollbackAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__rollbackVariableName = new internal.PrimitiveProperty(RollbackAction, this, "rollbackVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__refreshInClient = new internal.PrimitiveProperty(RollbackAction, this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new RollbackAction() cannot be invoked directly, please use 'model.microflows.createRollbackAction()'");
        }
        Object.defineProperty(RollbackAction.prototype, "rollbackVariableName", {
            get: function () { return this.__rollbackVariableName.get(); },
            set: function (newValue) { this.__rollbackVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RollbackAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RollbackAction instance in the SDK and on the server.
         * The new RollbackAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        RollbackAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RollbackAction, "action", false);
        };
        /*
         * Creates and returns a new RollbackAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RollbackAction.create = function (model) {
            return internal.instancehelpers.createElement(model, RollbackAction);
        };
        RollbackAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RollbackAction.typeName = "Microflows$RollbackAction";
        RollbackAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RollbackAction;
    })(MicroflowAction);
    microflows.RollbackAction = RollbackAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Rules relevant section in reference guide}
     */
    var Rule = (function (_super) {
        __extends(Rule, _super);
        function Rule(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this._containmentName = "documents";
        }
        /**
         * Creates a new Rule unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Rule.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Rule);
        };
        Rule.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.returnType = "Boolean";
        };
        Rule.typeName = "Microflows$Rule";
        Rule.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return Rule;
    })(MicroflowBase);
    microflows.Rule = Rule;
    /**
     * TODO
     */
    var RuleCall = (function (_super) {
        __extends(RuleCall, _super);
        function RuleCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__rule = new internal.ByNameReferenceProperty(RuleCall, this, "rule", null, "Microflows$Rule");
            this.__parameterMappings = new internal.PartListProperty(RuleCall, this, "parameterMappings", []);
            if (arguments.length < 4)
                throw new Error("new RuleCall() cannot be invoked directly, please use 'model.microflows.createRuleCall()'");
        }
        Object.defineProperty(RuleCall.prototype, "rule", {
            get: function () { return this.__rule.get(); },
            set: function (newValue) { this.__rule.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCall.prototype, "ruleQualifiedName", {
            get: function () { return this.__rule.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCall.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RuleCall instance in the SDK and on the server.
         * The new RuleCall will be automatically stored in the 'ruleCall' property of the parent RuleSplitCondition element passed as argument.
         */
        RuleCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleCall, "ruleCall", false);
        };
        /*
         * Creates and returns a new RuleCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleCall.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleCall);
        };
        RuleCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RuleCall.typeName = "Microflows$RuleCall";
        RuleCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RuleCall;
    })(internal.Element);
    microflows.RuleCall = RuleCall;
    /**
     * TODO
     */
    var RuleCallParameterMapping = (function (_super) {
        __extends(RuleCallParameterMapping, _super);
        function RuleCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameter = new internal.ByNameReferenceProperty(RuleCallParameterMapping, this, "parameter", null, "Microflows$RuleParameter");
            this.__argument = new internal.PrimitiveProperty(RuleCallParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new RuleCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createRuleCallParameterMapping()'");
        }
        Object.defineProperty(RuleCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RuleCallParameterMapping instance in the SDK and on the server.
         * The new RuleCallParameterMapping will be automatically stored in the 'parameterMappings' property of the parent RuleCall element passed as argument.
         */
        RuleCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleCallParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new RuleCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleCallParameterMapping);
        };
        RuleCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RuleCallParameterMapping.typeName = "Microflows$RuleCallParameterMapping";
        RuleCallParameterMapping.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "parameter": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return RuleCallParameterMapping;
    })(internal.Element);
    microflows.RuleCallParameterMapping = RuleCallParameterMapping;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Parameter relevant section in reference guide}
     */
    var RuleParameter = (function (_super) {
        __extends(RuleParameter, _super);
        function RuleParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new RuleParameter() cannot be invoked directly, please use 'model.microflows.createRuleParameter()'");
        }
        RuleParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RuleParameter.typeName = "Microflows$RuleParameter";
        RuleParameter.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return RuleParameter;
    })(MicroflowParameterBase);
    microflows.RuleParameter = RuleParameter;
    var RuleSplitCondition = (function (_super) {
        __extends(RuleSplitCondition, _super);
        function RuleSplitCondition(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__ruleCall = new internal.PartProperty(RuleSplitCondition, this, "ruleCall", null, true);
            if (arguments.length < 4)
                throw new Error("new RuleSplitCondition() cannot be invoked directly, please use 'model.microflows.createRuleSplitCondition()'");
        }
        Object.defineProperty(RuleSplitCondition.prototype, "ruleCall", {
            get: function () { return this.__ruleCall.get(); },
            set: function (newValue) { this.__ruleCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RuleSplitCondition instance in the SDK and on the server.
         * The new RuleSplitCondition will be automatically stored in the 'splitCondition' property of the parent ExclusiveSplit element passed as argument.
         */
        RuleSplitCondition.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleSplitCondition, "splitCondition", false);
        };
        /*
         * Creates and returns a new RuleSplitCondition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleSplitCondition.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleSplitCondition);
        };
        RuleSplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.ruleCall = RuleCall.create(this.model);
        };
        RuleSplitCondition.typeName = "Microflows$RuleSplitCondition";
        RuleSplitCondition.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "ruleCall": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return RuleSplitCondition;
    })(SplitCondition);
    microflows.RuleSplitCondition = RuleSplitCondition;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sequence+Flow relevant section in reference guide}
     */
    var SequenceFlow = (function (_super) {
        __extends(SequenceFlow, _super);
        function SequenceFlow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caseValue = new internal.PartProperty(SequenceFlow, this, "caseValue", null, true);
            this.__isErrorHandler = new internal.PrimitiveProperty(SequenceFlow, this, "isErrorHandler", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new SequenceFlow() cannot be invoked directly, please use 'model.microflows.createSequenceFlow()'");
        }
        Object.defineProperty(SequenceFlow.prototype, "caseValue", {
            get: function () { return this.__caseValue.get(); },
            set: function (newValue) { this.__caseValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SequenceFlow.prototype, "isErrorHandler", {
            get: function () { return this.__isErrorHandler.get(); },
            set: function (newValue) { this.__isErrorHandler.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SequenceFlow instance in the SDK and on the server.
         * The new SequenceFlow will be automatically stored in the 'flows' property of the parent MicroflowBase element passed as argument.
         */
        SequenceFlow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SequenceFlow, "flows", true);
        };
        /*
         * Creates and returns a new SequenceFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SequenceFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, SequenceFlow);
        };
        SequenceFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caseValue = NoCase.create(this.model);
        };
        SequenceFlow.typeName = "Microflows$SequenceFlow";
        SequenceFlow.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caseValue": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SequenceFlow;
    })(Flow);
    microflows.SequenceFlow = SequenceFlow;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Home+Page TODO: Page does not exist, should be created.}
     */
    var ShowHomePageAction = (function (_super) {
        __extends(ShowHomePageAction, _super);
        function ShowHomePageAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ShowHomePageAction() cannot be invoked directly, please use 'model.microflows.createShowHomePageAction()'");
        }
        /*
         * Creates and returns a new ShowHomePageAction instance in the SDK and on the server.
         * The new ShowHomePageAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ShowHomePageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowHomePageAction, "action", false);
        };
        /*
         * Creates and returns a new ShowHomePageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowHomePageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowHomePageAction);
        };
        ShowHomePageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ShowHomePageAction.typeName = "Microflows$ShowHomePageAction";
        ShowHomePageAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ShowHomePageAction;
    })(MicroflowAction);
    microflows.ShowHomePageAction = ShowHomePageAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Message relevant section in reference guide}
     */
    var ShowMessageAction = (function (_super) {
        __extends(ShowMessageAction, _super);
        function ShowMessageAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__template = new internal.PartProperty(ShowMessageAction, this, "template", null, true);
            this.__type = new internal.EnumProperty(ShowMessageAction, this, "type", ShowMessageType.Information, ShowMessageType);
            this.__blocking = new internal.PrimitiveProperty(ShowMessageAction, this, "blocking", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ShowMessageAction() cannot be invoked directly, please use 'model.microflows.createShowMessageAction()'");
        }
        Object.defineProperty(ShowMessageAction.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowMessageAction.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowMessageAction.prototype, "blocking", {
            get: function () { return this.__blocking.get(); },
            set: function (newValue) { this.__blocking.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ShowMessageAction instance in the SDK and on the server.
         * The new ShowMessageAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ShowMessageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowMessageAction, "action", false);
        };
        /*
         * Creates and returns a new ShowMessageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowMessageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowMessageAction);
        };
        ShowMessageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.template = TextTemplate.create(this.model);
            this.type = ShowMessageType.Information;
            this.blocking = true;
        };
        ShowMessageAction.typeName = "Microflows$ShowMessageAction";
        ShowMessageAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "template": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ShowMessageAction;
    })(MicroflowAction);
    microflows.ShowMessageAction = ShowMessageAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Show+Page relevant section in reference guide}
     */
    var ShowPageAction = (function (_super) {
        __extends(ShowPageAction, _super);
        function ShowPageAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__pageSettings = new internal.PartProperty(ShowPageAction, this, "pageSettings", null, true);
            this.__passedObjectVariableName = new internal.PrimitiveProperty(ShowPageAction, this, "passedObjectVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ShowPageAction() cannot be invoked directly, please use 'model.microflows.createShowPageAction()'");
        }
        Object.defineProperty(ShowPageAction.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowPageAction.prototype, "passedObjectVariableName", {
            get: function () { return this.__passedObjectVariableName.get(); },
            set: function (newValue) { this.__passedObjectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ShowPageAction instance in the SDK and on the server.
         * The new ShowPageAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ShowPageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowPageAction, "action", false);
        };
        /*
         * Creates and returns a new ShowPageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowPageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowPageAction);
        };
        ShowPageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = pages_1.pages.PageSettings.create(this.model);
        };
        ShowPageAction.typeName = "Microflows$ShowPageAction";
        ShowPageAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ShowPageAction;
    })(MicroflowAction);
    microflows.ShowPageAction = ShowPageAction;
    /**
     * TODO
     */
    var SimpleRequestHandling = (function (_super) {
        __extends(SimpleRequestHandling, _super);
        function SimpleRequestHandling(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterMappings = new internal.PartListProperty(SimpleRequestHandling, this, "parameterMappings", []);
            if (arguments.length < 4)
                throw new Error("new SimpleRequestHandling() cannot be invoked directly, please use 'model.microflows.createSimpleRequestHandling()'");
        }
        Object.defineProperty(SimpleRequestHandling.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * The new SimpleRequestHandling will be automatically stored in the 'requestHeaderHandling' property of the parent WebServiceCallAction element passed as argument.
         */
        SimpleRequestHandling.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SimpleRequestHandling, "requestHeaderHandling", false);
        };
        /*
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SimpleRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, SimpleRequestHandling);
        };
        SimpleRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SimpleRequestHandling.typeName = "Microflows$SimpleRequestHandling";
        SimpleRequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SimpleRequestHandling;
    })(RequestHandling);
    microflows.SimpleRequestHandling = SimpleRequestHandling;
    var Sort = (function (_super) {
        __extends(Sort, _super);
        function Sort(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortItemList = new internal.PartProperty(Sort, this, "sortItemList", null, true);
            if (arguments.length < 4)
                throw new Error("new Sort() cannot be invoked directly, please use 'model.microflows.createSort()'");
        }
        Object.defineProperty(Sort.prototype, "sortItemList", {
            get: function () { return this.__sortItemList.get(); },
            set: function (newValue) { this.__sortItemList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Sort instance in the SDK and on the server.
         * The new Sort will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Sort.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Sort, "operation", false);
        };
        /*
         * Creates and returns a new Sort instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Sort.create = function (model) {
            return internal.instancehelpers.createElement(model, Sort);
        };
        Sort.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortItemList = SortItemList.create(this.model);
        };
        Sort.typeName = "Microflows$Sort";
        Sort.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "sortItemList": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Sort;
    })(ListOperation);
    microflows.Sort = Sort;
    /**
     * TODO
     */
    var SortItem = (function (_super) {
        __extends(SortItem, _super);
        function SortItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(SortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__sortOrder = new internal.EnumProperty(SortItem, this, "sortOrder", SortOrderEnum.Ascending, SortOrderEnum);
            if (arguments.length < 4)
                throw new Error("new SortItem() cannot be invoked directly, please use 'model.microflows.createSortItem()'");
        }
        Object.defineProperty(SortItem.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortItem.prototype, "sortOrder", {
            get: function () { return this.__sortOrder.get(); },
            set: function (newValue) { this.__sortOrder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SortItem instance in the SDK and on the server.
         * The new SortItem will be automatically stored in the 'items' property of the parent SortItemList element passed as argument.
         */
        SortItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SortItem, "items", true);
        };
        /*
         * Creates and returns a new SortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SortItem.create = function (model) {
            return internal.instancehelpers.createElement(model, SortItem);
        };
        SortItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.attributePath = "";
            this.sortOrder = SortOrderEnum.Ascending;
        };
        SortItem.typeName = "Microflows$SortItem";
        SortItem.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "attributePath": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SortItem;
    })(internal.Element);
    microflows.SortItem = SortItem;
    /**
     * TODO
     */
    var SortItemList = (function (_super) {
        __extends(SortItemList, _super);
        function SortItemList(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(SortItemList, this, "items", []);
            if (arguments.length < 4)
                throw new Error("new SortItemList() cannot be invoked directly, please use 'model.microflows.createSortItemList()'");
        }
        Object.defineProperty(SortItemList.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SortItemList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SortItemList.create = function (model) {
            return internal.instancehelpers.createElement(model, SortItemList);
        };
        SortItemList.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SortItemList.typeName = "Microflows$SortItemList";
        SortItemList.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SortItemList;
    })(internal.Element);
    microflows.SortItemList = SortItemList;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Start+Event relevant section in reference guide}
     */
    var StartEvent = (function (_super) {
        __extends(StartEvent, _super);
        function StartEvent(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new StartEvent() cannot be invoked directly, please use 'model.microflows.createStartEvent()'");
        }
        /*
         * Creates and returns a new StartEvent instance in the SDK and on the server.
         * The new StartEvent will be automatically stored in the 'objects' property of the parent MicroflowObjectCollection element passed as argument.
         */
        StartEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StartEvent, "objects", true);
        };
        /*
         * Creates and returns a new StartEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StartEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, StartEvent);
        };
        StartEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        StartEvent.typeName = "Microflows$StartEvent";
        StartEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return StartEvent;
    })(MicroflowObject);
    microflows.StartEvent = StartEvent;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Template = (function (_super) {
        __extends(Template, _super);
        function Template(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__arguments = new internal.PartListProperty(Template, this, "arguments", []);
            if (arguments.length < 4)
                throw new Error("new Template() cannot be invoked directly, please use 'model.microflows.createTemplate()'");
        }
        Object.defineProperty(Template.prototype, "arguments", {
            get: function () { return this.__arguments.get(); },
            set: function (newValue) { this.__arguments.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Template.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Template.typeName = "Microflows$Template";
        Template.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Template;
    })(internal.Element);
    microflows.Template = Template;
    /**
     * TODO
     */
    var StringTemplate = (function (_super) {
        __extends(StringTemplate, _super);
        function StringTemplate(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__text = new internal.PrimitiveProperty(StringTemplate, this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new StringTemplate() cannot be invoked directly, please use 'model.microflows.createStringTemplate()'");
        }
        Object.defineProperty(StringTemplate.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StringTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, StringTemplate);
        };
        StringTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StringTemplate.typeName = "Microflows$StringTemplate";
        StringTemplate.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return StringTemplate;
    })(Template);
    microflows.StringTemplate = StringTemplate;
    var Subtract = (function (_super) {
        __extends(Subtract, _super);
        function Subtract(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Subtract() cannot be invoked directly, please use 'model.microflows.createSubtract()'");
        }
        /*
         * Creates and returns a new Subtract instance in the SDK and on the server.
         * The new Subtract will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Subtract.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Subtract, "operation", false);
        };
        /*
         * Creates and returns a new Subtract instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Subtract.create = function (model) {
            return internal.instancehelpers.createElement(model, Subtract);
        };
        Subtract.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Subtract.typeName = "Microflows$Subtract";
        Subtract.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Subtract;
    })(BinaryListOperation);
    microflows.Subtract = Subtract;
    var Tail = (function (_super) {
        __extends(Tail, _super);
        function Tail(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Tail() cannot be invoked directly, please use 'model.microflows.createTail()'");
        }
        /*
         * Creates and returns a new Tail instance in the SDK and on the server.
         * The new Tail will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Tail.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Tail, "operation", false);
        };
        /*
         * Creates and returns a new Tail instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Tail.create = function (model) {
            return internal.instancehelpers.createElement(model, Tail);
        };
        Tail.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Tail.typeName = "Microflows$Tail";
        Tail.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Tail;
    })(ListOperation);
    microflows.Tail = Tail;
    /**
     * TODO
     */
    var TemplateArgument = (function (_super) {
        __extends(TemplateArgument, _super);
        function TemplateArgument(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__expression = new internal.PrimitiveProperty(TemplateArgument, this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new TemplateArgument() cannot be invoked directly, please use 'model.microflows.createTemplateArgument()'");
        }
        Object.defineProperty(TemplateArgument.prototype, "expression", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TemplateArgument instance in the SDK and on the server.
         * The new TemplateArgument will be automatically stored in the 'arguments' property of the parent Template element passed as argument.
         */
        TemplateArgument.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TemplateArgument, "arguments", true);
        };
        /*
         * Creates and returns a new TemplateArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateArgument.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateArgument);
        };
        TemplateArgument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TemplateArgument.typeName = "Microflows$TemplateArgument";
        TemplateArgument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TemplateArgument;
    })(internal.Element);
    microflows.TemplateArgument = TemplateArgument;
    /**
     * TODO
     */
    var TextTemplate = (function (_super) {
        __extends(TextTemplate, _super);
        function TextTemplate(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__text = new internal.PartProperty(TextTemplate, this, "text", null, true);
            if (arguments.length < 4)
                throw new Error("new TextTemplate() cannot be invoked directly, please use 'model.microflows.createTextTemplate()'");
        }
        Object.defineProperty(TextTemplate.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TextTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, TextTemplate);
        };
        TextTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.text = texts_1.texts.Text.create(this.model);
        };
        TextTemplate.typeName = "Microflows$TextTemplate";
        TextTemplate.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "text": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TextTemplate;
    })(Template);
    microflows.TextTemplate = TextTemplate;
    var Union = (function (_super) {
        __extends(Union, _super);
        function Union(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Union() cannot be invoked directly, please use 'model.microflows.createUnion()'");
        }
        /*
         * Creates and returns a new Union instance in the SDK and on the server.
         * The new Union will be automatically stored in the 'operation' property of the parent ListOperationAction element passed as argument.
         */
        Union.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Union, "operation", false);
        };
        /*
         * Creates and returns a new Union instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Union.create = function (model) {
            return internal.instancehelpers.createElement(model, Union);
        };
        Union.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Union.typeName = "Microflows$Union";
        Union.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Union;
    })(BinaryListOperation);
    microflows.Union = Union;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback relevant section in reference guide}
     */
    var ValidationFeedbackAction = (function (_super) {
        __extends(ValidationFeedbackAction, _super);
        function ValidationFeedbackAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__feedbackTemplate = new internal.PartProperty(ValidationFeedbackAction, this, "feedbackTemplate", null, true);
            this.__objectVariableName = new internal.PrimitiveProperty(ValidationFeedbackAction, this, "objectVariableName", "", internal.PrimitiveTypeEnum.String);
            this.__attribute = new internal.ByNameReferenceProperty(ValidationFeedbackAction, this, "attribute", null, "DomainModels$Attribute");
            this.__association = new internal.ByNameReferenceProperty(ValidationFeedbackAction, this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4)
                throw new Error("new ValidationFeedbackAction() cannot be invoked directly, please use 'model.microflows.createValidationFeedbackAction()'");
        }
        Object.defineProperty(ValidationFeedbackAction.prototype, "feedbackTemplate", {
            get: function () { return this.__feedbackTemplate.get(); },
            set: function (newValue) { this.__feedbackTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "objectVariableName", {
            get: function () { return this.__objectVariableName.get(); },
            set: function (newValue) { this.__objectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "attribute", {
            /**
             * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback See 'Member' section in reference guide}
             */
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "association", {
            /**
             * See: {@link https://world.mendix.com/display/refguide6/Validation+Feedback See 'Member' section in reference guide}
             */
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ValidationFeedbackAction instance in the SDK and on the server.
         * The new ValidationFeedbackAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        ValidationFeedbackAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ValidationFeedbackAction, "action", false);
        };
        /*
         * Creates and returns a new ValidationFeedbackAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ValidationFeedbackAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ValidationFeedbackAction);
        };
        ValidationFeedbackAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.feedbackTemplate = TextTemplate.create(this.model);
        };
        ValidationFeedbackAction.typeName = "Microflows$ValidationFeedbackAction";
        ValidationFeedbackAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "feedbackTemplate": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ValidationFeedbackAction;
    })(MicroflowAction);
    microflows.ValidationFeedbackAction = ValidationFeedbackAction;
    /**
     * TODO
     */
    var VariableExport = (function (_super) {
        __extends(VariableExport, _super);
        function VariableExport(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__outputVariableName = new internal.PrimitiveProperty(VariableExport, this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new VariableExport() cannot be invoked directly, please use 'model.microflows.createVariableExport()'");
        }
        Object.defineProperty(VariableExport.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new VariableExport instance in the SDK and on the server.
         * The new VariableExport will be automatically stored in the 'outputMethod' property of the parent ExportXmlAction element passed as argument.
         */
        VariableExport.createIn = function (container) {
            return internal.instancehelpers.createElement(container, VariableExport, "outputMethod", false);
        };
        /*
         * Creates and returns a new VariableExport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VariableExport.create = function (model) {
            return internal.instancehelpers.createElement(model, VariableExport);
        };
        VariableExport.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VariableExport.typeName = "Microflows$VariableExport";
        VariableExport.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return VariableExport;
    })(OutputMethod);
    microflows.VariableExport = VariableExport;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Call+Web+Service relevant section in reference guide}
     */
    var WebServiceCallAction = (function (_super) {
        __extends(WebServiceCallAction, _super);
        function WebServiceCallAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__importedWebService = new internal.ByNameReferenceProperty(WebServiceCallAction, this, "importedWebService", null, "WebServices$ImportedWebService");
            this.__serviceName = new internal.PrimitiveProperty(WebServiceCallAction, this, "serviceName", "", internal.PrimitiveTypeEnum.String);
            this.__operationName = new internal.PrimitiveProperty(WebServiceCallAction, this, "operationName", "", internal.PrimitiveTypeEnum.String);
            this.__useRequestTimeOut = new internal.PrimitiveProperty(WebServiceCallAction, this, "useRequestTimeOut", false, internal.PrimitiveTypeEnum.Boolean);
            this.__timeOut = new internal.PrimitiveProperty(WebServiceCallAction, this, "timeOut", 0, internal.PrimitiveTypeEnum.Integer);
            this.__sendNullValueChoice = new internal.EnumProperty(WebServiceCallAction, this, "sendNullValueChoice", NullValueOption.LeaveOutElement, NullValueOption);
            this.__requestHeaderHandling = new internal.PartProperty(WebServiceCallAction, this, "requestHeaderHandling", null, true);
            this.__requestBodyHandling = new internal.PartProperty(WebServiceCallAction, this, "requestBodyHandling", null, true);
            this.__resultHandling = new internal.PartProperty(WebServiceCallAction, this, "resultHandling", null, true);
            this.__httpConfiguration = new internal.PartProperty(WebServiceCallAction, this, "httpConfiguration", null, true);
            this.__isValidationRequired = new internal.PrimitiveProperty(WebServiceCallAction, this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new WebServiceCallAction() cannot be invoked directly, please use 'model.microflows.createWebServiceCallAction()'");
        }
        Object.defineProperty(WebServiceCallAction.prototype, "importedWebService", {
            get: function () { return this.__importedWebService.get(); },
            set: function (newValue) { this.__importedWebService.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "importedWebServiceQualifiedName", {
            get: function () { return this.__importedWebService.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "serviceName", {
            get: function () { return this.__serviceName.get(); },
            set: function (newValue) { this.__serviceName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "operationName", {
            get: function () { return this.__operationName.get(); },
            set: function (newValue) { this.__operationName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "useRequestTimeOut", {
            get: function () { return this.__useRequestTimeOut.get(); },
            set: function (newValue) { this.__useRequestTimeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "timeOut", {
            get: function () { return this.__timeOut.get(); },
            set: function (newValue) { this.__timeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "sendNullValueChoice", {
            get: function () { return this.__sendNullValueChoice.get(); },
            set: function (newValue) { this.__sendNullValueChoice.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "requestHeaderHandling", {
            get: function () { return this.__requestHeaderHandling.get(); },
            set: function (newValue) { this.__requestHeaderHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "requestBodyHandling", {
            get: function () { return this.__requestBodyHandling.get(); },
            set: function (newValue) { this.__requestBodyHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "resultHandling", {
            get: function () { return this.__resultHandling.get(); },
            set: function (newValue) { this.__resultHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "httpConfiguration", {
            get: function () { return this.__httpConfiguration.get(); },
            set: function (newValue) { this.__httpConfiguration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WebServiceCallAction instance in the SDK and on the server.
         * The new WebServiceCallAction will be automatically stored in the 'action' property of the parent ActionActivity element passed as argument.
         */
        WebServiceCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceCallAction, "action", false);
        };
        /*
         * Creates and returns a new WebServiceCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceCallAction);
        };
        WebServiceCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.timeOut = 30;
            this.sendNullValueChoice = NullValueOption.LeaveOutElement;
            this.requestHeaderHandling = SimpleRequestHandling.create(this.model);
            this.requestBodyHandling = SimpleRequestHandling.create(this.model);
            this.resultHandling = ResultHandling.create(this.model);
            this.httpConfiguration = HttpConfiguration.create(this.model);
        };
        WebServiceCallAction.typeName = "Microflows$WebServiceCallAction";
        WebServiceCallAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "requestHeaderHandling": {
                    "required": {
                        "currentValue": true
                    }
                },
                "requestBodyHandling": {
                    "required": {
                        "currentValue": true
                    }
                },
                "resultHandling": {
                    "required": {
                        "currentValue": true
                    }
                },
                "httpConfiguration": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return WebServiceCallAction;
    })(MicroflowAction);
    microflows.WebServiceCallAction = WebServiceCallAction;
    /**
     * TODO
     */
    var WebServiceOperationAdvancedParameterMapping = (function (_super) {
        __extends(WebServiceOperationAdvancedParameterMapping, _super);
        function WebServiceOperationAdvancedParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isChecked = new internal.PrimitiveProperty(WebServiceOperationAdvancedParameterMapping, this, "isChecked", false, internal.PrimitiveTypeEnum.Boolean);
            this.__parameterName = new internal.PrimitiveProperty(WebServiceOperationAdvancedParameterMapping, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            this.__argument = new internal.PrimitiveProperty(WebServiceOperationAdvancedParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            this.__mapping = new internal.ByNameReferenceProperty(WebServiceOperationAdvancedParameterMapping, this, "mapping", null, "ExportMappings$ExportMapping");
            this.__mappingArgumentVariableName = new internal.PrimitiveProperty(WebServiceOperationAdvancedParameterMapping, this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WebServiceOperationAdvancedParameterMapping() cannot be invoked directly, please use 'model.microflows.createWebServiceOperationAdvancedParameterMapping()'");
        }
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "isChecked", {
            get: function () { return this.__isChecked.get(); },
            set: function (newValue) { this.__isChecked.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WebServiceOperationAdvancedParameterMapping instance in the SDK and on the server.
         * The new WebServiceOperationAdvancedParameterMapping will be automatically stored in the 'parameterMappings' property of the parent AdvancedRequestHandling element passed as argument.
         */
        WebServiceOperationAdvancedParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceOperationAdvancedParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new WebServiceOperationAdvancedParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceOperationAdvancedParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceOperationAdvancedParameterMapping);
        };
        WebServiceOperationAdvancedParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.isChecked = true;
        };
        WebServiceOperationAdvancedParameterMapping.typeName = "Microflows$WebServiceOperationAdvancedParameterMapping";
        WebServiceOperationAdvancedParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WebServiceOperationAdvancedParameterMapping;
    })(internal.Element);
    microflows.WebServiceOperationAdvancedParameterMapping = WebServiceOperationAdvancedParameterMapping;
    /**
     * TODO
     */
    var WebServiceOperationSimpleParameterMapping = (function (_super) {
        __extends(WebServiceOperationSimpleParameterMapping, _super);
        function WebServiceOperationSimpleParameterMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isChecked = new internal.PrimitiveProperty(WebServiceOperationSimpleParameterMapping, this, "isChecked", false, internal.PrimitiveTypeEnum.Boolean);
            this.__parameterName = new internal.PrimitiveProperty(WebServiceOperationSimpleParameterMapping, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            this.__parameterPath = new internal.PrimitiveProperty(WebServiceOperationSimpleParameterMapping, this, "parameterPath", "", internal.PrimitiveTypeEnum.String);
            this.__argument = new internal.PrimitiveProperty(WebServiceOperationSimpleParameterMapping, this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WebServiceOperationSimpleParameterMapping() cannot be invoked directly, please use 'model.microflows.createWebServiceOperationSimpleParameterMapping()'");
        }
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "isChecked", {
            get: function () { return this.__isChecked.get(); },
            set: function (newValue) { this.__isChecked.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "parameterPath", {
            /**
             * The value of this property is conceptually of type Mappings$ElementPath.
             */
            get: function () { return this.__parameterPath.get(); },
            set: function (newValue) { this.__parameterPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type MicroflowExpressions$MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WebServiceOperationSimpleParameterMapping instance in the SDK and on the server.
         * The new WebServiceOperationSimpleParameterMapping will be automatically stored in the 'parameterMappings' property of the parent SimpleRequestHandling element passed as argument.
         */
        WebServiceOperationSimpleParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceOperationSimpleParameterMapping, "parameterMappings", true);
        };
        /*
         * Creates and returns a new WebServiceOperationSimpleParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceOperationSimpleParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceOperationSimpleParameterMapping);
        };
        WebServiceOperationSimpleParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.isChecked = true;
        };
        WebServiceOperationSimpleParameterMapping.typeName = "Microflows$WebServiceOperationSimpleParameterMapping";
        WebServiceOperationSimpleParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WebServiceOperationSimpleParameterMapping;
    })(internal.Element);
    microflows.WebServiceOperationSimpleParameterMapping = WebServiceOperationSimpleParameterMapping;
})(microflows = exports.microflows || (exports.microflows = {}));
var pages_1 = require('./pages');
var texts_1 = require('./texts');
