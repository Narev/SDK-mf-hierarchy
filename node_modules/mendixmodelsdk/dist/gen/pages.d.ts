import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from '../common';
import { projects } from './projects';
export declare namespace pages {
    class FormLocation extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Content: FormLocation;
        static Popup: FormLocation;
        static ModalPopup: FormLocation;
    }
    class ProgressBarType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: ProgressBarType;
        static NonBlocking: ProgressBarType;
        static Blocking: ProgressBarType;
    }
    class FormValidations extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: FormValidations;
        static Widget: FormValidations;
        static All: FormValidations;
    }
    class EnumFormat extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Text: EnumFormat;
        static Image: EnumFormat;
    }
    class DateFormat extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Date: DateFormat;
        static Time: DateFormat;
        static DateTime: DateFormat;
        static Custom: DateFormat;
    }
    class EditableEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Always: EditableEnum;
        static Never: EditableEnum;
        static Conditional: EditableEnum;
    }
    class UnitEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Weight: UnitEnum;
        static Pixels: UnitEnum;
    }
    class SortDirection extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Ascending: SortDirection;
        static Descending: SortDirection;
    }
    class RenderType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Button: RenderType;
        static Link: RenderType;
    }
    class ButtonStyle extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: ButtonStyle;
        static Inverse: ButtonStyle;
        static Primary: ButtonStyle;
        static Info: ButtonStyle;
        static Success: ButtonStyle;
        static Warning: ButtonStyle;
        static Danger: ButtonStyle;
    }
    class DatabaseConstraintOperator extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Equals: DatabaseConstraintOperator;
        static NotEquals: DatabaseConstraintOperator;
        static Contains: DatabaseConstraintOperator;
        static NotContains: DatabaseConstraintOperator;
        static LessThan: DatabaseConstraintOperator;
        static LessThanOrEquals: DatabaseConstraintOperator;
        static GreaterThan: DatabaseConstraintOperator;
        static GreaterThanOrEquals: DatabaseConstraintOperator;
    }
    class AggregateFunction extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: AggregateFunction;
        static Average: AggregateFunction;
        static Maximum: AggregateFunction;
        static Minimum: AggregateFunction;
        static Sum: AggregateFunction;
        static Count: AggregateFunction;
    }
    class AlignmentEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Left: AlignmentEnum;
        static Center: AlignmentEnum;
        static Right: AlignmentEnum;
    }
    class ClickTypeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Single: ClickTypeType;
        static Double: ClickTypeType;
    }
    class ContainerWidth extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static FullWidth: ContainerWidth;
        static FixedWidth: ContainerWidth;
    }
    class FileManagerType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Upload: FileManagerType;
        static Download: FileManagerType;
        static Both: FileManagerType;
    }
    class GridSelectionMode extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: GridSelectionMode;
        static Single: GridSelectionMode;
        static SingleAndMaintain: GridSelectionMode;
        static Multi: GridSelectionMode;
        static SimpleMulti: GridSelectionMode;
    }
    class GroupBoxCollapsible extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static No: GroupBoxCollapsible;
        static YesInitiallyExpanded: GroupBoxCollapsible;
        static YesInitiallyCollapsed: GroupBoxCollapsible;
    }
    class ImageSizeUnit extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Auto: ImageSizeUnit;
        static Pixels: ImageSizeUnit;
        static Percentage: ImageSizeUnit;
    }
    class LayoutModeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Headline: LayoutModeType;
        static Sidebar: LayoutModeType;
    }
    class LayoutType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Responsive: LayoutType;
        static Tablet: LayoutType;
        static Phone: LayoutType;
        static ModalPopup: LayoutType;
        static Popup: LayoutType;
        static Legacy: LayoutType;
    }
    class LinkType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Web: LinkType;
        static Email: LinkType;
        static Call: LinkType;
        static Text: LinkType;
    }
    class MobileFooterType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: MobileFooterType;
        static MenuBar: MobileFooterType;
        static Custom: MobileFooterType;
    }
    class NewButtonEditLocation extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static InlineAtTop: NewButtonEditLocation;
        static InlineAtBottom: NewButtonEditLocation;
        static Form: NewButtonEditLocation;
    }
    class ReferenceSelectorRenderModeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Form: ReferenceSelectorRenderModeType;
        static DropDown: ReferenceSelectorRenderModeType;
    }
    class RenderModeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Button: RenderModeType;
        static Link: RenderModeType;
    }
    class ScrollBehavior extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static PerRegion: ScrollBehavior;
        static FullWidget: ScrollBehavior;
    }
    class SearchBarTypeEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: SearchBarTypeEnum;
        static FoldableOpen: SearchBarTypeEnum;
        static FoldableClosed: SearchBarTypeEnum;
        static AlwaysOpen: SearchBarTypeEnum;
    }
    class SearchFieldOperator extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Contains: SearchFieldOperator;
        static StartsWith: SearchFieldOperator;
        static Greater: SearchFieldOperator;
        static GreaterOrEqual: SearchFieldOperator;
        static Equal: SearchFieldOperator;
        static NotEqual: SearchFieldOperator;
        static SmallerOrEqual: SearchFieldOperator;
        static Smaller: SearchFieldOperator;
    }
    class SearchFieldType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Normal: SearchFieldType;
        static Hidden: SearchFieldType;
        static ReadOnly: SearchFieldType;
    }
    class SelectionType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static SelectPage: SelectionType;
        static SelectAll: SelectionType;
    }
    class SidebarToggleMode extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static PushContentAside: SidebarToggleMode;
        static SlideOverContent: SidebarToggleMode;
        static ShrinkContent: SidebarToggleMode;
    }
    class SidebarToggleRegion extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Left: SidebarToggleRegion;
        static Right: SidebarToggleRegion;
    }
    class SimpleMenuBarOrientation extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Horizontal: SimpleMenuBarOrientation;
        static Vertical: SimpleMenuBarOrientation;
    }
    class SizeMode extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Auto: SizeMode;
        static Pixels: SizeMode;
        static Percentage: SizeMode;
    }
    class TableCellRenderModeType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: TableCellRenderModeType;
        static Header: TableCellRenderModeType;
        static Title: TableCellRenderModeType;
    }
    class TextRenderMode extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Text: TextRenderMode;
        static Paragraph: TextRenderMode;
        static H1: TextRenderMode;
        static H2: TextRenderMode;
        static H3: TextRenderMode;
        static H4: TextRenderMode;
        static H5: TextRenderMode;
        static H6: TextRenderMode;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
     */
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     */
    interface IWidget extends internal.IElement {
        model: IModel;
        load(): Widget;
        load(callback: (element: Widget) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Widget extends internal.Element implements IWidget {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        private __class;
        class: string;
        private __style;
        style: string;
        private __tabIndex;
        tabIndex: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IConditionallyVisibleWidget extends IWidget {
        model: IModel;
        load(): ConditionallyVisibleWidget;
        load(callback: (element: ConditionallyVisibleWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionallyVisibleWidget extends Widget implements IConditionallyVisibleWidget {
        model: IModel;
        static typeName: string;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Button+Widgets relevant section in reference guide}
     */
    interface IButton extends IConditionallyVisibleWidget {
        model: IModel;
        load(): Button;
        load(callback: (element: Button) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Button+Widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Button extends ConditionallyVisibleWidget implements IButton {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: ClientTemplate;
        private __tooltip;
        tooltip: texts.Text;
        private __icon;
        icon: Icon;
        private __renderType;
        renderType: RenderType;
        private __buttonStyle;
        buttonStyle: ButtonStyle;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Action+Button relevant section in reference guide}
     */
    interface IActionButton extends IButton {
        model: IModel;
        load(): ActionButton;
        load(callback: (element: ActionButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Action+Button relevant section in reference guide}
     */
    class ActionButton extends Button implements IActionButton {
        model: IModel;
        static typeName: string;
        private __action;
        action: ClientAction;
        private __disabledDuringAction;
        disabledDuringAction: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ActionButton;
        _initializeDefaultProperties(): void;
    }
    interface IActionItem extends internal.IElement {
        model: IModel;
        container: IConditionallyVisibleWidget;
        load(): ActionItem;
        load(callback: (element: ActionItem) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ActionItem extends internal.Element implements IActionItem {
        model: IModel;
        static typeName: string;
        container: ConditionallyVisibleWidget;
        private __action;
        action: ClientAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Sources relevant section in reference guide}
     */
    interface IDataSource extends internal.IElement {
        model: IModel;
        container: IEntityWidget;
        load(): DataSource;
        load(callback: (element: DataSource) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Sources relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSource extends internal.Element implements IDataSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IEntityPathSource extends IDataSource {
        model: IModel;
        container: IEntityWidget;
        load(): EntityPathSource;
        load(callback: (element: EntityPathSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityPathSource extends DataSource implements IEntityPathSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __entityPath;
        /**
         * The value of this property is conceptually of type Paths$EntityPath.
         */
        entityPath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAssociationSource extends IEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): AssociationSource;
        load(callback: (element: AssociationSource) => void): any;
    }
    class AssociationSource extends EntityPathSource implements IAssociationSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): AssociationSource;
        static create(model: IModel): AssociationSource;
        _initializeDefaultProperties(): void;
    }
    interface IConditionallyEditableWidget extends IConditionallyVisibleWidget {
        model: IModel;
        load(): ConditionallyEditableWidget;
        load(callback: (element: ConditionallyEditableWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionallyEditableWidget extends ConditionallyVisibleWidget implements IConditionallyEditableWidget {
        model: IModel;
        static typeName: string;
        private __conditionalEditabilitySettings;
        conditionalEditabilitySettings: ConditionalEditabilitySettings;
        private __editable;
        editable: EditableEnum;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IInputWidget extends IConditionallyEditableWidget {
        model: IModel;
        load(): InputWidget;
        load(callback: (element: InputWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class InputWidget extends ConditionallyEditableWidget implements IInputWidget {
        model: IModel;
        static typeName: string;
        private __label;
        label: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IMemberWidget extends IInputWidget {
        model: IModel;
        load(): MemberWidget;
        load(callback: (element: MemberWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MemberWidget extends InputWidget implements IMemberWidget {
        model: IModel;
        static typeName: string;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAssociationWidget extends IMemberWidget {
        model: IModel;
        load(): AssociationWidget;
        load(callback: (element: AssociationWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AssociationWidget extends MemberWidget implements IAssociationWidget {
        model: IModel;
        static typeName: string;
        private __selectorSource;
        selectorSource: SelectorSource;
        private __selectPageSettings;
        selectPageSettings: PageSettings;
        private __onChangeMicroflowSettings;
        onChangeMicroflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAttributeWidget extends IMemberWidget {
        model: IModel;
        load(): AttributeWidget;
        load(callback: (element: AttributeWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidget extends MemberWidget implements IAttributeWidget {
        model: IModel;
        static typeName: string;
        private __required;
        required: boolean;
        private __requiredMessage;
        requiredMessage: texts.Text;
        private __onChangeMicroflowSettings;
        onChangeMicroflowSettings: MicroflowSettings;
        private __onEnterMicroflowSettings;
        onEnterMicroflowSettings: MicroflowSettings;
        private __onLeaveMicroflowSettings;
        onLeaveMicroflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAttributeWidgetWithPlaceholder extends IAttributeWidget {
        model: IModel;
        load(): AttributeWidgetWithPlaceholder;
        load(callback: (element: AttributeWidgetWithPlaceholder) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidgetWithPlaceholder extends AttributeWidget implements IAttributeWidgetWithPlaceholder {
        model: IModel;
        static typeName: string;
        private __placeholder;
        placeholder: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Back+Button relevant section in reference guide}
     */
    interface IBackButton extends IButton {
        model: IModel;
        load(): BackButton;
        load(callback: (element: BackButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Back+Button relevant section in reference guide}
     */
    class BackButton extends Button implements IBackButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): BackButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cancel+Button relevant section in reference guide}
     */
    interface ICancelButton extends IButton {
        model: IModel;
        load(): CancelButton;
        load(callback: (element: CancelButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cancel+Button relevant section in reference guide}
     */
    class CancelButton extends Button implements ICancelButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): CancelButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Check+Box relevant section in reference guide}
     */
    interface ICheckBox extends IAttributeWidget {
        model: IModel;
        load(): CheckBox;
        load(callback: (element: CheckBox) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Check+Box relevant section in reference guide}
     */
    class CheckBox extends AttributeWidget implements ICheckBox {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): CheckBox;
        _initializeDefaultProperties(): void;
    }
    interface IClientAction extends internal.IElement {
        model: IModel;
        load(): ClientAction;
        load(callback: (element: ClientAction) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ClientAction extends internal.Element implements IClientAction {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IClientTemplate extends internal.IElement {
        model: IModel;
        load(): ClientTemplate;
        load(callback: (element: ClientTemplate) => void): any;
    }
    class ClientTemplate extends internal.Element implements IClientTemplate {
        model: IModel;
        static typeName: string;
        private __template;
        template: texts.Text;
        private __parameters;
        parameters: internal.IList<ClientTemplateParameter>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ClientTemplate;
        _initializeDefaultProperties(): void;
    }
    interface IClientTemplateParameter extends internal.IElement {
        model: IModel;
        container: IClientTemplate;
        load(): ClientTemplateParameter;
        load(callback: (element: ClientTemplateParameter) => void): any;
    }
    class ClientTemplateParameter extends internal.Element implements IClientTemplateParameter {
        model: IModel;
        static typeName: string;
        container: ClientTemplate;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ClientTemplate): ClientTemplateParameter;
        static create(model: IModel): ClientTemplateParameter;
        _initializeDefaultProperties(): void;
    }
    interface IEntityWidget extends IConditionallyVisibleWidget {
        model: IModel;
        load(): EntityWidget;
        load(callback: (element: EntityWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityWidget extends ConditionallyVisibleWidget implements IEntityWidget {
        model: IModel;
        static typeName: string;
        private __dataSource;
        dataSource: DataSource;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IListenTargetWidget extends IEntityWidget {
        model: IModel;
        load(): ListenTargetWidget;
        load(callback: (element: ListenTargetWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ListenTargetWidget extends EntityWidget implements IListenTargetWidget {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IGrid extends IListenTargetWidget {
        model: IModel;
        load(): Grid;
        load(callback: (element: Grid) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Grid extends ListenTargetWidget implements IGrid {
        model: IModel;
        static typeName: string;
        private __isControlBarVisible;
        isControlBarVisible: boolean;
        private __isPagingEnabled;
        isPagingEnabled: boolean;
        private __selectionMode;
        selectionMode: GridSelectionMode;
        private __selectFirst;
        selectFirst: boolean;
        private __defaultButtonTrigger;
        defaultButtonTrigger: ClickTypeType;
        private __refreshTime;
        refreshTime: number;
        private __controlBar;
        controlBar: GridControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IColumnGrid extends IGrid {
        model: IModel;
        load(): ColumnGrid;
        load(callback: (element: ColumnGrid) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ColumnGrid extends Grid implements IColumnGrid {
        model: IModel;
        static typeName: string;
        private __columns;
        columns: internal.IList<GridColumn>;
        private __numberOfRows;
        numberOfRows: number;
        private __showEmptyRows;
        showEmptyRows: boolean;
        private __widthUnit;
        widthUnit: UnitEnum;
        private __tooltipPage;
        tooltipPage: IPage;
        tooltipPageQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IControlBarItem extends internal.IElement {
        model: IModel;
        load(): ControlBarItem;
        load(callback: (element: ControlBarItem) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBarItem extends internal.Element implements IControlBarItem {
        model: IModel;
        static typeName: string;
        private __name;
        name: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ISearchField extends IControlBarItem {
        model: IModel;
        container: IControlBar;
        load(): SearchField;
        load(callback: (element: SearchField) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SearchField extends ControlBarItem implements ISearchField {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __caption;
        caption: texts.Text;
        private __type;
        type: SearchFieldType;
        private __defaultValue;
        defaultValue: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ISingleSearchField extends ISearchField {
        model: IModel;
        container: IControlBar;
        load(): SingleSearchField;
        load(callback: (element: SingleSearchField) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SingleSearchField extends SearchField implements ISingleSearchField {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __operator;
        operator: SearchFieldOperator;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Comparison+Search+Field relevant section in reference guide}
     */
    interface IComparisonSearchField extends ISingleSearchField {
        model: IModel;
        container: IControlBar;
        load(): ComparisonSearchField;
        load(callback: (element: ComparisonSearchField) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Comparison+Search+Field relevant section in reference guide}
     */
    class ComparisonSearchField extends SingleSearchField implements IComparisonSearchField {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): ComparisonSearchField;
        static create(model: IModel): ComparisonSearchField;
        _initializeDefaultProperties(): void;
    }
    interface IConditionalSettings extends internal.IElement {
        model: IModel;
        load(): ConditionalSettings;
        load(callback: (element: ConditionalSettings) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionalSettings extends internal.Element implements IConditionalSettings {
        model: IModel;
        static typeName: string;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __conditions;
        conditions: internal.IList<enumerations.Condition>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IConditionalEditabilitySettings extends IConditionalSettings {
        model: IModel;
        container: IConditionallyEditableWidget;
        load(): ConditionalEditabilitySettings;
        load(callback: (element: ConditionalEditabilitySettings) => void): any;
    }
    class ConditionalEditabilitySettings extends ConditionalSettings implements IConditionalEditabilitySettings {
        model: IModel;
        static typeName: string;
        container: ConditionallyEditableWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ConditionallyEditableWidget): ConditionalEditabilitySettings;
        static create(model: IModel): ConditionalEditabilitySettings;
        _initializeDefaultProperties(): void;
    }
    interface IConditionalVisibilitySettings extends IConditionalSettings {
        model: IModel;
        load(): ConditionalVisibilitySettings;
        load(callback: (element: ConditionalVisibilitySettings) => void): any;
    }
    class ConditionalVisibilitySettings extends ConditionalSettings implements IConditionalVisibilitySettings {
        model: IModel;
        static typeName: string;
        private __moduleRoles;
        moduleRoles: internal.IList<security.IModuleRole>;
        moduleRolesQualifiedNames: string[];
        private __ignoreSecurity;
        ignoreSecurity: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ConditionalVisibilitySettings;
        _initializeDefaultProperties(): void;
    }
    interface IConfirmationInfo extends internal.IElement {
        model: IModel;
        container: IMicroflowSettings;
        load(): ConfirmationInfo;
        load(callback: (element: ConfirmationInfo) => void): any;
    }
    class ConfirmationInfo extends internal.Element implements IConfirmationInfo {
        model: IModel;
        static typeName: string;
        container: MicroflowSettings;
        private __question;
        question: texts.Text;
        private __proceedButtonCaption;
        proceedButtonCaption: texts.Text;
        private __cancelButtonCaption;
        cancelButtonCaption: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MicroflowSettings): ConfirmationInfo;
        static create(model: IModel): ConfirmationInfo;
        _initializeDefaultProperties(): void;
    }
    interface IControlBar extends internal.IElement {
        model: IModel;
        load(): ControlBar;
        load(callback: (element: ControlBar) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBar extends internal.Element implements IControlBar {
        model: IModel;
        static typeName: string;
        private __items;
        items: internal.IList<ControlBarItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IControlBarButton extends IControlBarItem {
        model: IModel;
        load(): ControlBarButton;
        load(callback: (element: ControlBarButton) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBarButton extends ControlBarItem implements IControlBarButton {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: ClientTemplate;
        private __tooltip;
        tooltip: texts.Text;
        private __icon;
        icon: Icon;
        private __class;
        class: string;
        private __style;
        style: string;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        private __buttonStyle;
        buttonStyle: ButtonStyle;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid relevant section in reference guide}
     */
    interface IDataGrid extends IColumnGrid {
        model: IModel;
        load(): DataGrid;
        load(callback: (element: DataGrid) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid relevant section in reference guide}
     */
    class DataGrid extends ColumnGrid implements IDataGrid {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DataGrid;
        _initializeDefaultProperties(): void;
    }
    interface IGridControlBarButton extends IControlBarButton {
        model: IModel;
        load(): GridControlBarButton;
        load(callback: (element: GridControlBarButton) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class GridControlBarButton extends ControlBarButton implements IGridControlBarButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Add+Button relevant section in reference guide}
     */
    interface IDataGridAddButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataGridAddButton;
        load(callback: (element: DataGridAddButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Add+Button relevant section in reference guide}
     */
    class DataGridAddButton extends GridControlBarButton implements IDataGridAddButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __pageSettings;
        pageSettings: PageSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataGridAddButton;
        static create(model: IModel): DataGridAddButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+CSV+Button relevant section in reference guide}
     */
    interface IDataGridExportToCSVButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataGridExportToCSVButton;
        load(callback: (element: DataGridExportToCSVButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+CSV+Button relevant section in reference guide}
     */
    class DataGridExportToCSVButton extends GridControlBarButton implements IDataGridExportToCSVButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __maxNumberOfRows;
        maxNumberOfRows: number;
        private __decimalSeparator;
        decimalSeparator: string;
        private __groupSeparator;
        groupSeparator: string;
        private __delimiter;
        delimiter: string;
        private __generateExcelHint;
        generateExcelHint: boolean;
        private __useGridDateFormat;
        useGridDateFormat: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataGridExportToCSVButton;
        static create(model: IModel): DataGridExportToCSVButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+Excel+Button relevant section in reference guide}
     */
    interface IDataGridExportToExcelButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataGridExportToExcelButton;
        load(callback: (element: DataGridExportToExcelButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+Excel+Button relevant section in reference guide}
     */
    class DataGridExportToExcelButton extends GridControlBarButton implements IDataGridExportToExcelButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __maxNumberOfRows;
        maxNumberOfRows: number;
        private __useExcelDateType;
        useExcelDateType: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataGridExportToExcelButton;
        static create(model: IModel): DataGridExportToExcelButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Remove+Button relevant section in reference guide}
     */
    interface IDataGridRemoveButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataGridRemoveButton;
        load(callback: (element: DataGridRemoveButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Remove+Button relevant section in reference guide}
     */
    class DataGridRemoveButton extends GridControlBarButton implements IDataGridRemoveButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataGridRemoveButton;
        static create(model: IModel): DataGridRemoveButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View relevant section in reference guide}
     */
    interface IDataView extends IEntityWidget {
        model: IModel;
        load(): DataView;
        load(callback: (element: DataView) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View relevant section in reference guide}
     */
    class DataView extends EntityWidget implements IDataView {
        model: IModel;
        static typeName: string;
        private __widget;
        widget: Widget;
        private __editable;
        editable: boolean;
        private __showControlBar;
        showControlBar: boolean;
        private __closeOnSaveOrCancel;
        closeOnSaveOrCancel: boolean;
        private __useSchema;
        useSchema: boolean;
        private __noEntityMessage;
        noEntityMessage: texts.Text;
        private __labelWidth;
        labelWidth: number;
        private __controlBar;
        controlBar: DataViewControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DataView;
        _initializeDefaultProperties(): void;
    }
    interface IDataViewControlBarButton extends IControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataViewControlBarButton;
        load(callback: (element: DataViewControlBarButton) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataViewControlBarButton extends ControlBarButton implements IDataViewControlBarButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __tabIndex;
        tabIndex: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+view+action+button relevant section in reference guide}
     */
    interface IDataViewActionButton extends IDataViewControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataViewActionButton;
        load(callback: (element: DataViewActionButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+view+action+button relevant section in reference guide}
     */
    class DataViewActionButton extends DataViewControlBarButton implements IDataViewActionButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __action;
        action: ClientAction;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataViewActionButton;
        static create(model: IModel): DataViewActionButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Cancel+Button relevant section in reference guide}
     */
    interface IDataViewCancelButton extends IDataViewControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataViewCancelButton;
        load(callback: (element: DataViewCancelButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Cancel+Button relevant section in reference guide}
     */
    class DataViewCancelButton extends DataViewControlBarButton implements IDataViewCancelButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataViewCancelButton;
        static create(model: IModel): DataViewCancelButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Close+Button relevant section in reference guide}
     */
    interface IDataViewCloseButton extends IDataViewControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataViewCloseButton;
        load(callback: (element: DataViewCloseButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Close+Button relevant section in reference guide}
     */
    class DataViewCloseButton extends DataViewControlBarButton implements IDataViewCloseButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataViewCloseButton;
        static create(model: IModel): DataViewCloseButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Control+Bar relevant section in reference guide}
     */
    interface IDataViewControlBar extends IControlBar {
        model: IModel;
        container: IDataView;
        load(): DataViewControlBar;
        load(callback: (element: DataViewControlBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Control+Bar relevant section in reference guide}
     */
    class DataViewControlBar extends ControlBar implements IDataViewControlBar {
        model: IModel;
        static typeName: string;
        container: DataView;
        private __closeButton;
        closeButton: ControlBarItem;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataView): DataViewControlBar;
        static create(model: IModel): DataViewControlBar;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Save+Button relevant section in reference guide}
     */
    interface IDataViewSaveButton extends IDataViewControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): DataViewSaveButton;
        load(callback: (element: DataViewSaveButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Save+Button relevant section in reference guide}
     */
    class DataViewSaveButton extends DataViewControlBarButton implements IDataViewSaveButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DataViewSaveButton;
        static create(model: IModel): DataViewSaveButton;
        _initializeDefaultProperties(): void;
    }
    interface IDataViewSource extends IEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): DataViewSource;
        load(callback: (element: DataViewSource) => void): any;
    }
    class DataViewSource extends EntityPathSource implements IDataViewSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): DataViewSource;
        static create(model: IModel): DataViewSource;
        _initializeDefaultProperties(): void;
    }
    interface IDatabaseConstraint extends internal.IElement {
        model: IModel;
        container: IDatabaseSourceBase;
        load(): DatabaseConstraint;
        load(callback: (element: DatabaseConstraint) => void): any;
    }
    class DatabaseConstraint extends internal.Element implements IDatabaseConstraint {
        model: IModel;
        static typeName: string;
        container: DatabaseSourceBase;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        private __operator;
        operator: DatabaseConstraintOperator;
        private __value;
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DatabaseSourceBase): DatabaseConstraint;
        static create(model: IModel): DatabaseConstraint;
        _initializeDefaultProperties(): void;
    }
    interface ISortableEntityPathSource extends IEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): SortableEntityPathSource;
        load(callback: (element: SortableEntityPathSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SortableEntityPathSource extends EntityPathSource implements ISortableEntityPathSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __sortBar;
        sortBar: GridSortBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IDatabaseSourceBase extends ISortableEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): DatabaseSourceBase;
        load(callback: (element: DatabaseSourceBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DatabaseSourceBase extends SortableEntityPathSource implements IDatabaseSourceBase {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __databaseConstraints;
        databaseConstraints: internal.IList<DatabaseConstraint>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Date+Picker relevant section in reference guide}
     */
    interface IDatePicker extends IAttributeWidgetWithPlaceholder {
        model: IModel;
        load(): DatePicker;
        load(callback: (element: DatePicker) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Date+Picker relevant section in reference guide}
     */
    class DatePicker extends AttributeWidgetWithPlaceholder implements IDatePicker {
        model: IModel;
        static typeName: string;
        private __formattingInfo;
        formattingInfo: FormattingInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DatePicker;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Container relevant section in reference guide}
     */
    interface IDivContainer extends IConditionallyVisibleWidget {
        model: IModel;
        load(): DivContainer;
        load(callback: (element: DivContainer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Container relevant section in reference guide}
     */
    class DivContainer extends ConditionallyVisibleWidget implements IDivContainer {
        model: IModel;
        static typeName: string;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DivContainer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-Down+Widget relevant section in reference guide}
     */
    interface IDropDown extends IAttributeWidget {
        model: IModel;
        load(): DropDown;
        load(callback: (element: DropDown) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-Down+Widget relevant section in reference guide}
     */
    class DropDown extends AttributeWidget implements IDropDown {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DropDown;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop+Down+Button relevant section in reference guide}
     */
    interface IDropDownButton extends IButton {
        model: IModel;
        load(): DropDownButton;
        load(callback: (element: DropDownButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop+Down+Button relevant section in reference guide}
     */
    class DropDownButton extends Button implements IDropDownButton {
        model: IModel;
        static typeName: string;
        private __items;
        items: internal.IList<DropDownButtonItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DropDownButton;
        _initializeDefaultProperties(): void;
    }
    interface IDropDownButtonItem extends IActionItem {
        model: IModel;
        container: IDropDownButton;
        load(): DropDownButtonItem;
        load(callback: (element: DropDownButtonItem) => void): any;
    }
    class DropDownButtonItem extends ActionItem implements IDropDownButtonItem {
        model: IModel;
        static typeName: string;
        container: DropDownButton;
        private __caption;
        caption: texts.Text;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DropDownButton): DropDownButtonItem;
        static create(model: IModel): DropDownButtonItem;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-down+Search+Field relevant section in reference guide}
     */
    interface IDropDownSearchField extends ISingleSearchField {
        model: IModel;
        container: IControlBar;
        load(): DropDownSearchField;
        load(callback: (element: DropDownSearchField) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-down+Search+Field relevant section in reference guide}
     */
    class DropDownSearchField extends SingleSearchField implements IDropDownSearchField {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __sortBar;
        sortBar: GridSortBar;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __allowMultipleSelect;
        allowMultipleSelect: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): DropDownSearchField;
        static create(model: IModel): DropDownSearchField;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Viewer relevant section in reference guide}
     */
    interface IDynamicImageViewer extends IEntityWidget {
        model: IModel;
        load(): DynamicImageViewer;
        load(callback: (element: DynamicImageViewer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Viewer relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
        model: IModel;
        static typeName: string;
        private __defaultImage;
        defaultImage: images.IImage;
        defaultImageQualifiedName: string;
        private __widthUnit;
        widthUnit: ImageSizeUnit;
        private __heightUnit;
        heightUnit: ImageSizeUnit;
        private __width;
        width: number;
        private __height;
        height: number;
        private __responsive;
        responsive: boolean;
        private __showAsThumbnail;
        showAsThumbnail: boolean;
        private __onClickBehavior;
        onClickBehavior: OnClickBehavior;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DynamicImageViewer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text relevant section in reference guide}
     */
    interface IDynamicText extends IConditionallyVisibleWidget {
        model: IModel;
        load(): DynamicText;
        load(callback: (element: DynamicText) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text relevant section in reference guide}
     */
    class DynamicText extends ConditionallyVisibleWidget implements IDynamicText {
        model: IModel;
        static typeName: string;
        private __content;
        content: ClientTemplate;
        private __renderMode;
        renderMode: TextRenderMode;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DynamicText;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/File+Manager relevant section in reference guide}
     */
    interface IFileManager extends IInputWidget {
        model: IModel;
        load(): FileManager;
        load(callback: (element: FileManager) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/File+Manager relevant section in reference guide}
     */
    class FileManager extends InputWidget implements IFileManager {
        model: IModel;
        static typeName: string;
        private __allowedExtensions;
        allowedExtensions: string;
        private __type;
        type: FileManagerType;
        private __maxFileSize;
        maxFileSize: number;
        private __showFileInBrowser;
        showFileInBrowser: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): FileManager;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     */
    interface IFormBase extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): FormBase;
        load(callback: (element: FormBase) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class FormBase extends projects.Document implements IFormBase {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __canvasWidth;
        canvasWidth: number;
        private __canvasHeight;
        canvasHeight: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        _initializeDefaultProperties(): void;
    }
    interface IFormattingInfo extends internal.IElement {
        model: IModel;
        load(): FormattingInfo;
        load(callback: (element: FormattingInfo) => void): any;
    }
    class FormattingInfo extends internal.Element implements IFormattingInfo {
        model: IModel;
        static typeName: string;
        private __decimalPrecision;
        decimalPrecision: number;
        private __groupDigits;
        groupDigits: boolean;
        private __enumFormat;
        enumFormat: EnumFormat;
        private __dateFormat;
        dateFormat: DateFormat;
        private __customDateFormat;
        customDateFormat: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): FormattingInfo;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Property relevant section in reference guide}
     */
    interface IIcon extends internal.IElement {
        model: IModel;
        load(): Icon;
        load(callback: (element: Icon) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Property relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Icon extends internal.Element implements IIcon {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IGlyphIcon extends IIcon {
        model: IModel;
        load(): GlyphIcon;
        load(callback: (element: GlyphIcon) => void): any;
    }
    class GlyphIcon extends Icon implements IGlyphIcon {
        model: IModel;
        static typeName: string;
        private __code;
        code: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): GlyphIcon;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+action+button relevant section in reference guide}
     */
    interface IGridActionButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridActionButton;
        load(callback: (element: GridActionButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+action+button relevant section in reference guide}
     */
    class GridActionButton extends GridControlBarButton implements IGridActionButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __action;
        action: ClientAction;
        private __maintainSelectionAfterMicroflow;
        maintainSelectionAfterMicroflow: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridActionButton;
        static create(model: IModel): GridActionButton;
        _initializeDefaultProperties(): void;
    }
    interface IGridBaseSource extends ISortableEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): GridBaseSource;
        load(callback: (element: GridBaseSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class GridBaseSource extends SortableEntityPathSource implements IGridBaseSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __searchBar;
        searchBar: SearchBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns relevant section in reference guide}
     */
    interface IGridColumn extends internal.IElement {
        model: IModel;
        container: IColumnGrid;
        load(): GridColumn;
        load(callback: (element: GridColumn) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns relevant section in reference guide}
     */
    class GridColumn extends internal.Element implements IGridColumn {
        model: IModel;
        static typeName: string;
        container: ColumnGrid;
        private __name;
        name: string;
        private __caption;
        caption: texts.Text;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __formattingInfo;
        formattingInfo: FormattingInfo;
        private __showTooltip;
        showTooltip: boolean;
        private __aggregateCaption;
        aggregateCaption: texts.Text;
        private __aggregateFunction;
        aggregateFunction: AggregateFunction;
        private __editable;
        editable: boolean;
        private __width;
        width: number;
        private __class;
        class: string;
        private __style;
        style: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ColumnGrid): GridColumn;
        static create(model: IModel): GridColumn;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Control+Bar relevant section in reference guide}
     */
    interface IGridControlBar extends IControlBar {
        model: IModel;
        container: IGrid;
        load(): GridControlBar;
        load(callback: (element: GridControlBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Control+Bar relevant section in reference guide}
     */
    class GridControlBar extends ControlBar implements IGridControlBar {
        model: IModel;
        static typeName: string;
        container: Grid;
        private __searchButton;
        searchButton: GridSearchButton;
        private __defaultButton;
        defaultButton: ControlBarItem;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Grid): GridControlBar;
        static create(model: IModel): GridControlBar;
        _initializeDefaultProperties(): void;
    }
    interface IGridDatabaseSource extends IDatabaseSourceBase {
        model: IModel;
        container: IEntityWidget;
        load(): GridDatabaseSource;
        load(callback: (element: GridDatabaseSource) => void): any;
    }
    class GridDatabaseSource extends DatabaseSourceBase implements IGridDatabaseSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __searchBar;
        searchBar: SearchBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): GridDatabaseSource;
        static create(model: IModel): GridDatabaseSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Button relevant section in reference guide}
     */
    interface IGridDeleteButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridDeleteButton;
        load(callback: (element: GridDeleteButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Button relevant section in reference guide}
     */
    class GridDeleteButton extends GridControlBarButton implements IGridDeleteButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridDeleteButton;
        static create(model: IModel): GridDeleteButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Deselect+All+Button relevant section in reference guide}
     */
    interface IGridDeselectAllButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridDeselectAllButton;
        load(callback: (element: GridDeselectAllButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Deselect+All+Button relevant section in reference guide}
     */
    class GridDeselectAllButton extends GridControlBarButton implements IGridDeselectAllButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridDeselectAllButton;
        static create(model: IModel): GridDeselectAllButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Edit+Button relevant section in reference guide}
     */
    interface IGridEditButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridEditButton;
        load(callback: (element: GridEditButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Edit+Button relevant section in reference guide}
     */
    class GridEditButton extends GridControlBarButton implements IGridEditButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __pageSettings;
        pageSettings: PageSettings;
        private __pagesForSpecializations;
        pagesForSpecializations: internal.IList<PageForSpecialization>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridEditButton;
        static create(model: IModel): GridEditButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+New+Button relevant section in reference guide}
     */
    interface IGridNewButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridNewButton;
        load(callback: (element: GridNewButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+New+Button relevant section in reference guide}
     */
    class GridNewButton extends GridControlBarButton implements IGridNewButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __editLocation;
        editLocation: NewButtonEditLocation;
        private __pageSettings;
        pageSettings: PageSettings;
        private __isPersistent;
        isPersistent: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridNewButton;
        static create(model: IModel): GridNewButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Button relevant section in reference guide}
     */
    interface IGridSearchButton extends IGridControlBarButton {
        model: IModel;
        load(): GridSearchButton;
        load(callback: (element: GridSearchButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Button relevant section in reference guide}
     */
    class GridSearchButton extends GridControlBarButton implements IGridSearchButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): GridSearchButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+All+Button relevant section in reference guide}
     */
    interface IGridSelectAllButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): GridSelectAllButton;
        load(callback: (element: GridSelectAllButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+All+Button relevant section in reference guide}
     */
    class GridSelectAllButton extends GridControlBarButton implements IGridSelectAllButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __selectionType;
        selectionType: SelectionType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): GridSelectAllButton;
        static create(model: IModel): GridSelectAllButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    interface IGridSortBar extends internal.IElement {
        model: IModel;
        load(): GridSortBar;
        load(callback: (element: GridSortBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element implements IGridSortBar {
        model: IModel;
        static typeName: string;
        private __sortItems;
        sortItems: internal.IList<GridSortItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): GridSortBar;
        _initializeDefaultProperties(): void;
    }
    interface IGridSortItem extends internal.IElement {
        model: IModel;
        container: IGridSortBar;
        load(): GridSortItem;
        load(callback: (element: GridSortItem) => void): any;
    }
    class GridSortItem extends internal.Element implements IGridSortItem {
        model: IModel;
        static typeName: string;
        container: GridSortBar;
        private __attributePath;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attributePath: string;
        private __sortDirection;
        sortDirection: SortDirection;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: GridSortBar): GridSortItem;
        static create(model: IModel): GridSortItem;
        _initializeDefaultProperties(): void;
    }
    interface IGridXPathSource extends IGridBaseSource {
        model: IModel;
        container: IEntityWidget;
        load(): GridXPathSource;
        load(callback: (element: GridXPathSource) => void): any;
    }
    class GridXPathSource extends GridBaseSource implements IGridXPathSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __applyContext;
        applyContext: boolean;
        private __removeAllFromContext;
        removeAllFromContext: boolean;
        private __removeFromContextIds;
        removeFromContextIds: internal.IList<domainmodels.IEntity>;
        removeFromContextIdsQualifiedNames: string[];
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): GridXPathSource;
        static create(model: IModel): GridXPathSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Group+Box relevant section in reference guide}
     */
    interface IGroupBox extends IConditionallyVisibleWidget {
        model: IModel;
        load(): GroupBox;
        load(callback: (element: GroupBox) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Group+Box relevant section in reference guide}
     */
    class GroupBox extends ConditionallyVisibleWidget implements IGroupBox {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: ClientTemplate;
        private __collapsible;
        collapsible: GroupBoxCollapsible;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): GroupBox;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header relevant section in reference guide}
     */
    interface IHeader extends IWidget {
        model: IModel;
        load(): Header;
        load(callback: (element: Header) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header relevant section in reference guide}
     */
    class Header extends Widget implements IHeader {
        model: IModel;
        static typeName: string;
        private __leftWidget;
        leftWidget: Widget;
        private __rightWidget;
        rightWidget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Header;
        _initializeDefaultProperties(): void;
    }
    interface ISplitPane extends IWidget {
        model: IModel;
        load(): SplitPane;
        load(callback: (element: SplitPane) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SplitPane extends Widget implements ISplitPane {
        model: IModel;
        static typeName: string;
        private __firstWidget;
        firstWidget: Widget;
        private __secondWidget;
        secondWidget: Widget;
        private __animatedResize;
        animatedResize: boolean;
        private __height;
        height: number;
        private __position;
        position: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Horizontal+Split+Pane relevant section in reference guide}
     */
    interface IHorizontalSplitPane extends ISplitPane {
        model: IModel;
        load(): HorizontalSplitPane;
        load(callback: (element: HorizontalSplitPane) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Horizontal+Split+Pane relevant section in reference guide}
     */
    class HorizontalSplitPane extends SplitPane implements IHorizontalSplitPane {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): HorizontalSplitPane;
        _initializeDefaultProperties(): void;
    }
    interface IImageIcon extends IIcon {
        model: IModel;
        load(): ImageIcon;
        load(callback: (element: ImageIcon) => void): any;
    }
    class ImageIcon extends Icon implements IImageIcon {
        model: IModel;
        static typeName: string;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ImageIcon;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Uploader relevant section in reference guide}
     */
    interface IImageUploader extends IInputWidget {
        model: IModel;
        load(): ImageUploader;
        load(callback: (element: ImageUploader) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Uploader relevant section in reference guide}
     */
    class ImageUploader extends InputWidget implements IImageUploader {
        model: IModel;
        static typeName: string;
        private __allowedExtensions;
        allowedExtensions: string;
        private __thumbnailSize;
        thumbnailSize: common.ISize;
        private __maxFileSize;
        maxFileSize: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ImageUploader;
        _initializeDefaultProperties(): void;
    }
    interface IImageViewerSource extends IEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): ImageViewerSource;
        load(callback: (element: ImageViewerSource) => void): any;
    }
    class ImageViewerSource extends EntityPathSource implements IImageViewerSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): ImageViewerSource;
        static create(model: IModel): ImageViewerSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Input+Reference+Set+Selector relevant section in reference guide}
     */
    interface IInputReferenceSetSelector extends IAssociationWidget {
        model: IModel;
        load(): InputReferenceSetSelector;
        load(callback: (element: InputReferenceSetSelector) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Input+Reference+Set+Selector relevant section in reference guide}
     */
    class InputReferenceSetSelector extends AssociationWidget implements IInputReferenceSetSelector {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): InputReferenceSetSelector;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Label relevant section in reference guide}
     */
    interface ILabel extends IConditionallyVisibleWidget {
        model: IModel;
        load(): Label;
        load(callback: (element: Label) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Label relevant section in reference guide}
     */
    class Label extends ConditionallyVisibleWidget implements ILabel {
        model: IModel;
        static typeName: string;
        private __caption;
        caption: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Label;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout relevant section in reference guide}
     */
    interface ILayout extends IFormBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): Layout;
        load(callback: (element: Layout) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout relevant section in reference guide}
     */
    class Layout extends FormBase implements ILayout {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __widget;
        widget: Widget;
        private __layoutCall;
        layoutCall: LayoutCall;
        private __layoutType;
        layoutType: LayoutType;
        private __mainPlaceholder;
        mainPlaceholder: ILayoutParameter;
        mainPlaceholderQualifiedName: string;
        private __acceptButtonPlaceholder;
        acceptButtonPlaceholder: ILayoutParameter;
        acceptButtonPlaceholderQualifiedName: string;
        private __cancelButtonPlaceholder;
        cancelButtonPlaceholder: ILayoutParameter;
        cancelButtonPlaceholderQualifiedName: string;
        private __useMainPlaceholderForPopups;
        useMainPlaceholderForPopups: boolean;
        private __class;
        class: string;
        private __style;
        style: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Layout;
        _initializeDefaultProperties(): void;
    }
    interface ILayoutCall extends internal.IElement {
        model: IModel;
        load(): LayoutCall;
        load(callback: (element: LayoutCall) => void): any;
    }
    class LayoutCall extends internal.Element implements ILayoutCall {
        model: IModel;
        static typeName: string;
        private __layout;
        layout: ILayout;
        layoutQualifiedName: string;
        private __arguments;
        arguments: internal.IList<LayoutCallArgument>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): LayoutCall;
        _initializeDefaultProperties(): void;
    }
    interface ILayoutCallArgument extends internal.IElement {
        model: IModel;
        container: ILayoutCall;
        load(): LayoutCallArgument;
        load(callback: (element: LayoutCallArgument) => void): any;
    }
    class LayoutCallArgument extends internal.Element implements ILayoutCallArgument {
        model: IModel;
        static typeName: string;
        container: LayoutCall;
        private __parameterName;
        parameterName: string;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: LayoutCall): LayoutCallArgument;
        static create(model: IModel): LayoutCallArgument;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout+Grid relevant section in reference guide}
     */
    interface ILayoutGrid extends IConditionallyVisibleWidget {
        model: IModel;
        load(): LayoutGrid;
        load(callback: (element: LayoutGrid) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout+Grid relevant section in reference guide}
     */
    class LayoutGrid extends ConditionallyVisibleWidget implements ILayoutGrid {
        model: IModel;
        static typeName: string;
        private __width;
        width: ContainerWidth;
        private __rows;
        rows: internal.IList<LayoutGridRow>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): LayoutGrid;
        _initializeDefaultProperties(): void;
    }
    interface ILayoutGridColumn extends internal.IElement {
        model: IModel;
        container: ILayoutGridRow;
        load(): LayoutGridColumn;
        load(callback: (element: LayoutGridColumn) => void): any;
    }
    class LayoutGridColumn extends internal.Element implements ILayoutGridColumn {
        model: IModel;
        static typeName: string;
        container: LayoutGridRow;
        private __weight;
        weight: number;
        private __widget;
        widget: Widget;
        private __class;
        class: string;
        private __style;
        style: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: LayoutGridRow): LayoutGridColumn;
        static create(model: IModel): LayoutGridColumn;
        _initializeDefaultProperties(): void;
    }
    interface ILayoutGridRow extends internal.IElement {
        model: IModel;
        container: ILayoutGrid;
        load(): LayoutGridRow;
        load(callback: (element: LayoutGridRow) => void): any;
    }
    class LayoutGridRow extends internal.Element implements ILayoutGridRow {
        model: IModel;
        static typeName: string;
        container: LayoutGrid;
        private __columns;
        columns: internal.IList<LayoutGridColumn>;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        private __class;
        class: string;
        private __style;
        style: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: LayoutGrid): LayoutGridRow;
        static create(model: IModel): LayoutGridRow;
        _initializeDefaultProperties(): void;
    }
    interface ILayoutParameter extends internal.IElement {
        model: IModel;
        container: ILayout;
        load(): LayoutParameter;
        load(callback: (element: LayoutParameter) => void): any;
        name: string;
    }
    class LayoutParameter extends internal.Element implements ILayoutParameter {
        model: IModel;
        static typeName: string;
        container: Layout;
        private __name;
        name: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Link+Button relevant section in reference guide}
     */
    interface ILinkButton extends IButton {
        model: IModel;
        load(): LinkButton;
        load(callback: (element: LinkButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Link+Button relevant section in reference guide}
     */
    class LinkButton extends Button implements ILinkButton {
        model: IModel;
        static typeName: string;
        private __linkType;
        linkType: LinkType;
        private __address;
        address: StaticOrDynamicString;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): LinkButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+View relevant section in reference guide}
     */
    interface IListView extends IListenTargetWidget {
        model: IModel;
        load(): ListView;
        load(callback: (element: ListView) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+View relevant section in reference guide}
     */
    class ListView extends ListenTargetWidget implements IListView {
        model: IModel;
        static typeName: string;
        private __widget;
        widget: Widget;
        private __pageSize;
        pageSize: number;
        private __clickAction;
        clickAction: ClientAction;
        private __editable;
        editable: boolean;
        private __templates;
        templates: internal.IList<ListViewTemplate>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ListView;
        _initializeDefaultProperties(): void;
    }
    interface IListViewDatabaseSource extends IDatabaseSourceBase {
        model: IModel;
        container: IEntityWidget;
        load(): ListViewDatabaseSource;
        load(callback: (element: ListViewDatabaseSource) => void): any;
    }
    class ListViewDatabaseSource extends DatabaseSourceBase implements IListViewDatabaseSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __search;
        search: ListViewSearch;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): ListViewDatabaseSource;
        static create(model: IModel): ListViewDatabaseSource;
        _initializeDefaultProperties(): void;
    }
    interface IListViewSearch extends internal.IElement {
        model: IModel;
        load(): ListViewSearch;
        load(callback: (element: ListViewSearch) => void): any;
    }
    class ListViewSearch extends internal.Element implements IListViewSearch {
        model: IModel;
        static typeName: string;
        private __searchPaths;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        searchPaths: internal.IList<string>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ListViewSearch;
        _initializeDefaultProperties(): void;
    }
    interface IListViewTemplate extends internal.IElement {
        model: IModel;
        container: IListView;
        load(): ListViewTemplate;
        load(callback: (element: ListViewTemplate) => void): any;
    }
    class ListViewTemplate extends internal.Element implements IListViewTemplate {
        model: IModel;
        static typeName: string;
        container: ListView;
        private __specialization;
        specialization: domainmodels.IEntity;
        specializationQualifiedName: string;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ListView): ListViewTemplate;
        static create(model: IModel): ListViewTemplate;
        _initializeDefaultProperties(): void;
    }
    interface IListViewXPathSource extends ISortableEntityPathSource {
        model: IModel;
        container: IEntityWidget;
        load(): ListViewXPathSource;
        load(callback: (element: ListViewXPathSource) => void): any;
    }
    class ListViewXPathSource extends SortableEntityPathSource implements IListViewXPathSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __search;
        search: ListViewSearch;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): ListViewXPathSource;
        static create(model: IModel): ListViewXPathSource;
        _initializeDefaultProperties(): void;
    }
    interface IListenTargetSource extends IDataSource {
        model: IModel;
        container: IEntityWidget;
        load(): ListenTargetSource;
        load(callback: (element: ListenTargetSource) => void): any;
    }
    class ListenTargetSource extends DataSource implements IListenTargetSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __listenTarget;
        listenTarget: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): ListenTargetSource;
        static create(model: IModel): ListenTargetSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sign+Out+Button relevant section in reference guide}
     */
    interface ILogoutButton extends IButton {
        model: IModel;
        load(): LogoutButton;
        load(callback: (element: LogoutButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sign+Out+Button relevant section in reference guide}
     */
    class LogoutButton extends Button implements ILogoutButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): LogoutButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Widgets relevant section in reference guide}
     */
    interface IMenuWidget extends IWidget {
        model: IModel;
        load(): MenuWidget;
        load(callback: (element: MenuWidget) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MenuWidget extends Widget implements IMenuWidget {
        model: IModel;
        static typeName: string;
        private __menuSource;
        menuSource: MenuSource;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Bar relevant section in reference guide}
     */
    interface IMenuBar extends IMenuWidget {
        model: IModel;
        load(): MenuBar;
        load(callback: (element: MenuBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Bar relevant section in reference guide}
     */
    class MenuBar extends MenuWidget implements IMenuBar {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MenuBar;
        _initializeDefaultProperties(): void;
    }
    interface IMenuSource extends internal.IElement {
        model: IModel;
        container: IMenuWidget;
        load(): MenuSource;
        load(callback: (element: MenuSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MenuSource extends internal.Element implements IMenuSource {
        model: IModel;
        static typeName: string;
        container: MenuWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IMenuDocumentSource extends IMenuSource {
        model: IModel;
        container: IMenuWidget;
        load(): MenuDocumentSource;
        load(callback: (element: MenuDocumentSource) => void): any;
    }
    class MenuDocumentSource extends MenuSource implements IMenuDocumentSource {
        model: IModel;
        static typeName: string;
        container: MenuWidget;
        private __menu;
        menu: menus.IMenuDocument;
        menuQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MenuWidget): MenuDocumentSource;
        static create(model: IModel): MenuDocumentSource;
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowClientAction extends IClientAction {
        model: IModel;
        load(): MicroflowClientAction;
        load(callback: (element: MicroflowClientAction) => void): any;
    }
    class MicroflowClientAction extends ClientAction implements IMicroflowClientAction {
        model: IModel;
        static typeName: string;
        private __microflowSettings;
        microflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MicroflowClientAction;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Starting+Microflows relevant section in reference guide}
     */
    interface IMicroflowSettings extends internal.IElement {
        model: IModel;
        load(): MicroflowSettings;
        load(callback: (element: MicroflowSettings) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Starting+Microflows relevant section in reference guide}
     */
    class MicroflowSettings extends internal.Element implements IMicroflowSettings {
        model: IModel;
        static typeName: string;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __useAllPages;
        useAllPages: boolean;
        private __progressBar;
        progressBar: ProgressBarType;
        private __progressMessage;
        progressMessage: texts.Text;
        private __asynchronous;
        asynchronous: boolean;
        private __formValidations;
        formValidations: FormValidations;
        private __confirmationInfo;
        confirmationInfo: ConfirmationInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): MicroflowSettings;
        _initializeDefaultProperties(): void;
    }
    interface IMicroflowSource extends IDataSource {
        model: IModel;
        container: IEntityWidget;
        load(): MicroflowSource;
        load(callback: (element: MicroflowSource) => void): any;
    }
    class MicroflowSource extends DataSource implements IMicroflowSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        private __microflowSettings;
        microflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): MicroflowSource;
        static create(model: IModel): MicroflowSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+List relevant section in reference guide}
     */
    interface INavigationList extends IConditionallyVisibleWidget {
        model: IModel;
        load(): NavigationList;
        load(callback: (element: NavigationList) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+List relevant section in reference guide}
     */
    class NavigationList extends ConditionallyVisibleWidget implements INavigationList {
        model: IModel;
        static typeName: string;
        private __items;
        items: internal.IList<NavigationListItem>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): NavigationList;
        _initializeDefaultProperties(): void;
    }
    interface INavigationListItem extends IActionItem {
        model: IModel;
        container: INavigationList;
        load(): NavigationListItem;
        load(callback: (element: NavigationListItem) => void): any;
    }
    class NavigationListItem extends ActionItem implements INavigationListItem {
        model: IModel;
        static typeName: string;
        container: NavigationList;
        private __widget;
        widget: Widget;
        private __class;
        class: string;
        private __style;
        style: string;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: NavigationList): NavigationListItem;
        static create(model: IModel): NavigationListItem;
        _initializeDefaultProperties(): void;
    }
    interface INavigationSource extends IMenuSource {
        model: IModel;
        container: IMenuWidget;
        load(): NavigationSource;
        load(callback: (element: NavigationSource) => void): any;
    }
    class NavigationSource extends MenuSource implements INavigationSource {
        model: IModel;
        static typeName: string;
        container: MenuWidget;
        private __profileType;
        profileType: navigation.ProfileType;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: MenuWidget): NavigationSource;
        static create(model: IModel): NavigationSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+Tree relevant section in reference guide}
     */
    interface INavigationTree extends IMenuWidget {
        model: IModel;
        load(): NavigationTree;
        load(callback: (element: NavigationTree) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+Tree relevant section in reference guide}
     */
    class NavigationTree extends MenuWidget implements INavigationTree {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): NavigationTree;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/New+Button relevant section in reference guide}
     */
    interface INewButton extends IButton {
        model: IModel;
        load(): NewButton;
        load(callback: (element: NewButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/New+Button relevant section in reference guide}
     */
    class NewButton extends Button implements INewButton {
        model: IModel;
        static typeName: string;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __pageSettings;
        pageSettings: PageSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): NewButton;
        _initializeDefaultProperties(): void;
    }
    interface INoClientAction extends IClientAction {
        model: IModel;
        load(): NoClientAction;
        load(callback: (element: NoClientAction) => void): any;
    }
    class NoClientAction extends ClientAction implements INoClientAction {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): NoClientAction;
        _initializeDefaultProperties(): void;
    }
    interface IOfflineSchema extends internal.IElement {
        model: IModel;
        load(): OfflineSchema;
        load(callback: (element: OfflineSchema) => void): any;
    }
    class OfflineSchema extends internal.Element implements IOfflineSchema {
        model: IModel;
        static typeName: string;
        private __role;
        role: security.IUserRole;
        roleQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): OfflineSchema;
        _initializeDefaultProperties(): void;
    }
    interface IOfflineSchemaFetchInstruction extends internal.IElement {
        model: IModel;
        load(): OfflineSchemaFetchInstruction;
        load(callback: (element: OfflineSchemaFetchInstruction) => void): any;
    }
    class OfflineSchemaFetchInstruction extends internal.Element implements IOfflineSchemaFetchInstruction {
        model: IModel;
        static typeName: string;
        private __tableName;
        tableName: string;
        private __xPath;
        xPath: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): OfflineSchemaFetchInstruction;
        _initializeDefaultProperties(): void;
    }
    interface IOnClickBehavior extends internal.IElement {
        model: IModel;
        container: IDynamicImageViewer;
        load(): OnClickBehavior;
        load(callback: (element: OnClickBehavior) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class OnClickBehavior extends internal.Element implements IOnClickBehavior {
        model: IModel;
        static typeName: string;
        container: DynamicImageViewer;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IOnClickEnlarge extends IOnClickBehavior {
        model: IModel;
        container: IDynamicImageViewer;
        load(): OnClickEnlarge;
        load(callback: (element: OnClickEnlarge) => void): any;
    }
    class OnClickEnlarge extends OnClickBehavior implements IOnClickEnlarge {
        model: IModel;
        static typeName: string;
        container: DynamicImageViewer;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DynamicImageViewer): OnClickEnlarge;
        static create(model: IModel): OnClickEnlarge;
        _initializeDefaultProperties(): void;
    }
    interface IOnClickMicroflow extends IOnClickBehavior {
        model: IModel;
        container: IDynamicImageViewer;
        load(): OnClickMicroflow;
        load(callback: (element: OnClickMicroflow) => void): any;
    }
    class OnClickMicroflow extends OnClickBehavior implements IOnClickMicroflow {
        model: IModel;
        static typeName: string;
        container: DynamicImageViewer;
        private __microflowSettings;
        microflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DynamicImageViewer): OnClickMicroflow;
        static create(model: IModel): OnClickMicroflow;
        _initializeDefaultProperties(): void;
    }
    interface IOnClickNothing extends IOnClickBehavior {
        model: IModel;
        container: IDynamicImageViewer;
        load(): OnClickNothing;
        load(callback: (element: OnClickNothing) => void): any;
    }
    class OnClickNothing extends OnClickBehavior implements IOnClickNothing {
        model: IModel;
        static typeName: string;
        container: DynamicImageViewer;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DynamicImageViewer): OnClickNothing;
        static create(model: IModel): OnClickNothing;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page relevant section in reference guide}
     */
    interface IPage extends IFormBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): Page;
        load(callback: (element: Page) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page relevant section in reference guide}
     */
    class Page extends FormBase implements IPage {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __layoutCall;
        layoutCall: LayoutCall;
        private __title;
        title: texts.Text;
        private __class;
        class: string;
        private __style;
        style: string;
        private __allowedRoles;
        allowedRoles: internal.IList<security.IModuleRole>;
        allowedRolesQualifiedNames: string[];
        private __popupWidth;
        popupWidth: number;
        private __popupHeight;
        popupHeight: number;
        private __popupResizable;
        popupResizable: boolean;
        private __markAsUsed;
        markAsUsed: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Page;
        _initializeDefaultProperties(): void;
    }
    interface IPageClientAction extends IClientAction {
        model: IModel;
        load(): PageClientAction;
        load(callback: (element: PageClientAction) => void): any;
    }
    class PageClientAction extends ClientAction implements IPageClientAction {
        model: IModel;
        static typeName: string;
        private __pageSettings;
        pageSettings: PageSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): PageClientAction;
        _initializeDefaultProperties(): void;
    }
    interface IPageForSpecialization extends internal.IElement {
        model: IModel;
        container: IGridEditButton;
        load(): PageForSpecialization;
        load(callback: (element: PageForSpecialization) => void): any;
    }
    class PageForSpecialization extends internal.Element implements IPageForSpecialization {
        model: IModel;
        static typeName: string;
        container: GridEditButton;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __pageSettings;
        pageSettings: PageSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: GridEditButton): PageForSpecialization;
        static create(model: IModel): PageForSpecialization;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Opening+Pages relevant section in reference guide}
     */
    interface IPageSettings extends internal.IElement {
        model: IModel;
        load(): PageSettings;
        load(callback: (element: PageSettings) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Opening+Pages relevant section in reference guide}
     */
    class PageSettings extends internal.Element implements IPageSettings {
        model: IModel;
        static typeName: string;
        private __page;
        page: IPage;
        pageQualifiedName: string;
        private __formTitle;
        formTitle: texts.Text;
        private __location;
        location: FormLocation;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): PageSettings;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Placeholder relevant section in reference guide}
     */
    interface IPlaceholder extends IWidget {
        model: IModel;
        load(): Placeholder;
        load(callback: (element: Placeholder) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Placeholder relevant section in reference guide}
     */
    class Placeholder extends Widget implements IPlaceholder {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Placeholder;
        _initializeDefaultProperties(): void;
    }
    interface IRadioButtonGroup extends IAttributeWidget {
        model: IModel;
        load(): RadioButtonGroup;
        load(callback: (element: RadioButtonGroup) => void): any;
    }
    class RadioButtonGroup extends AttributeWidget implements IRadioButtonGroup {
        model: IModel;
        static typeName: string;
        private __renderHorizontal;
        renderHorizontal: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): RadioButtonGroup;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Range+Search+Field relevant section in reference guide}
     */
    interface IRangeSearchField extends ISearchField {
        model: IModel;
        container: IControlBar;
        load(): RangeSearchField;
        load(callback: (element: RangeSearchField) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Range+Search+Field relevant section in reference guide}
     */
    class RangeSearchField extends SearchField implements IRangeSearchField {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        private __lowerBound;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        lowerBound: string;
        private __upperBound;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        upperBound: string;
        private __includeLower;
        includeLower: boolean;
        private __includeUpper;
        includeUpper: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): RangeSearchField;
        static create(model: IModel): RangeSearchField;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Selector relevant section in reference guide}
     */
    interface IReferenceSelector extends IAssociationWidget {
        model: IModel;
        load(): ReferenceSelector;
        load(callback: (element: ReferenceSelector) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Selector relevant section in reference guide}
     */
    class ReferenceSelector extends AssociationWidget implements IReferenceSelector {
        model: IModel;
        static typeName: string;
        private __required;
        required: boolean;
        private __requiredMessage;
        requiredMessage: texts.Text;
        private __renderMode;
        renderMode: ReferenceSelectorRenderModeType;
        private __gotoPageSettings;
        gotoPageSettings: PageSettings;
        private __formattingInfo;
        formattingInfo: FormattingInfo;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ReferenceSelector;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Set+Selector relevant section in reference guide}
     */
    interface IReferenceSetSelector extends IColumnGrid {
        model: IModel;
        load(): ReferenceSetSelector;
        load(callback: (element: ReferenceSetSelector) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Set+Selector relevant section in reference guide}
     */
    class ReferenceSetSelector extends ColumnGrid implements IReferenceSetSelector {
        model: IModel;
        static typeName: string;
        private __onChangeMicroflowSettings;
        onChangeMicroflowSettings: MicroflowSettings;
        private __constrainedBy;
        /**
         * The value of this property is conceptually of type Paths$EntityPath.
         */
        constrainedBy: internal.IList<string>;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __removeAllFromContext;
        removeAllFromContext: boolean;
        private __removeFromContextEntities;
        removeFromContextEntities: internal.IList<domainmodels.IEntity>;
        removeFromContextEntitiesQualifiedNames: string[];
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ReferenceSetSelector;
        _initializeDefaultProperties(): void;
    }
    interface IReferenceSetSource extends IGridBaseSource {
        model: IModel;
        container: IEntityWidget;
        load(): ReferenceSetSource;
        load(callback: (element: ReferenceSetSource) => void): any;
    }
    class ReferenceSetSource extends GridBaseSource implements IReferenceSetSource {
        model: IModel;
        static typeName: string;
        container: EntityWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: EntityWidget): ReferenceSetSource;
        static create(model: IModel): ReferenceSetSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Save+Button relevant section in reference guide}
     */
    interface ISaveButton extends IButton {
        model: IModel;
        load(): SaveButton;
        load(callback: (element: SaveButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Save+Button relevant section in reference guide}
     */
    class SaveButton extends Button implements ISaveButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SaveButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Scroll+Container relevant section in reference guide}
     */
    interface IScrollContainer extends IWidget {
        model: IModel;
        load(): ScrollContainer;
        load(callback: (element: ScrollContainer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Scroll+Container relevant section in reference guide}
     */
    class ScrollContainer extends Widget implements IScrollContainer {
        model: IModel;
        static typeName: string;
        private __center;
        center: ScrollContainerRegion;
        private __left;
        left: ScrollContainerRegion;
        private __right;
        right: ScrollContainerRegion;
        private __top;
        top: ScrollContainerRegion;
        private __bottom;
        bottom: ScrollContainerRegion;
        private __layoutMode;
        layoutMode: LayoutModeType;
        private __widthMode;
        widthMode: SizeMode;
        private __width;
        width: number;
        private __alignment;
        alignment: AlignmentEnum;
        private __scrollBehavior;
        scrollBehavior: ScrollBehavior;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ScrollContainer;
        _initializeDefaultProperties(): void;
    }
    interface IScrollContainerRegion extends internal.IElement {
        model: IModel;
        container: IScrollContainer;
        load(): ScrollContainerRegion;
        load(callback: (element: ScrollContainerRegion) => void): any;
    }
    class ScrollContainerRegion extends internal.Element implements IScrollContainerRegion {
        model: IModel;
        static typeName: string;
        container: ScrollContainer;
        private __widget;
        widget: Widget;
        private __sizeMode;
        sizeMode: SizeMode;
        private __size;
        size: number;
        private __class;
        class: string;
        private __style;
        style: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ScrollContainer): ScrollContainerRegion;
        static create(model: IModel): ScrollContainerRegion;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Bar relevant section in reference guide}
     */
    interface ISearchBar extends IControlBar {
        model: IModel;
        load(): SearchBar;
        load(callback: (element: SearchBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Bar relevant section in reference guide}
     */
    class SearchBar extends ControlBar implements ISearchBar {
        model: IModel;
        static typeName: string;
        private __type;
        type: SearchBarTypeEnum;
        private __waitForSearch;
        waitForSearch: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SearchBar;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+Button relevant section in reference guide}
     */
    interface ISelectButton extends IGridControlBarButton {
        model: IModel;
        container: IControlBar;
        load(): SelectButton;
        load(callback: (element: SelectButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+Button relevant section in reference guide}
     */
    class SelectButton extends GridControlBarButton implements ISelectButton {
        model: IModel;
        static typeName: string;
        container: ControlBar;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ControlBar): SelectButton;
        static create(model: IModel): SelectButton;
        _initializeDefaultProperties(): void;
    }
    interface ISelectorSource extends internal.IElement {
        model: IModel;
        container: IAssociationWidget;
        load(): SelectorSource;
        load(callback: (element: SelectorSource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SelectorSource extends internal.Element implements ISelectorSource {
        model: IModel;
        static typeName: string;
        container: AssociationWidget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ISelectorMicroflowSource extends ISelectorSource {
        model: IModel;
        container: IAssociationWidget;
        load(): SelectorMicroflowSource;
        load(callback: (element: SelectorMicroflowSource) => void): any;
    }
    class SelectorMicroflowSource extends SelectorSource implements ISelectorMicroflowSource {
        model: IModel;
        static typeName: string;
        container: AssociationWidget;
        private __dataSourceMicroflowSettings;
        dataSourceMicroflowSettings: MicroflowSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AssociationWidget): SelectorMicroflowSource;
        static create(model: IModel): SelectorMicroflowSource;
        _initializeDefaultProperties(): void;
    }
    interface ISelectorXPathSource extends ISelectorSource {
        model: IModel;
        container: IAssociationWidget;
        load(): SelectorXPathSource;
        load(callback: (element: SelectorXPathSource) => void): any;
    }
    class SelectorXPathSource extends SelectorSource implements ISelectorXPathSource {
        model: IModel;
        static typeName: string;
        container: AssociationWidget;
        private __sortBar;
        sortBar: GridSortBar;
        private __xPathConstraint;
        /**
         * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
         */
        xPathConstraint: string;
        private __constrainedBy;
        /**
         * The value of this property is conceptually of type Paths$EntityPath.
         */
        constrainedBy: internal.IList<string>;
        private __applyContext;
        applyContext: boolean;
        private __removeAllFromContext;
        removeAllFromContext: boolean;
        private __removeFromContextEntities;
        removeFromContextEntities: internal.IList<domainmodels.IEntity>;
        removeFromContextEntitiesQualifiedNames: string[];
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: AssociationWidget): SelectorXPathSource;
        static create(model: IModel): SelectorXPathSource;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sidebar+Toggle+Button relevant section in reference guide}
     */
    interface ISidebarToggleButton extends IButton {
        model: IModel;
        load(): SidebarToggleButton;
        load(callback: (element: SidebarToggleButton) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sidebar+Toggle+Button relevant section in reference guide}
     */
    class SidebarToggleButton extends Button implements ISidebarToggleButton {
        model: IModel;
        static typeName: string;
        private __region;
        region: SidebarToggleRegion;
        private __mode;
        mode: SidebarToggleMode;
        private __initiallyOpen;
        initiallyOpen: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SidebarToggleButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Simple+Menu+Bar relevant section in reference guide}
     */
    interface ISimpleMenuBar extends IMenuWidget {
        model: IModel;
        load(): SimpleMenuBar;
        load(callback: (element: SimpleMenuBar) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Simple+Menu+Bar relevant section in reference guide}
     */
    class SimpleMenuBar extends MenuWidget implements ISimpleMenuBar {
        model: IModel;
        static typeName: string;
        private __orientation;
        orientation: SimpleMenuBarOrientation;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SimpleMenuBar;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet relevant section in reference guide}
     */
    interface ISnippet extends IFormBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): Snippet;
        load(callback: (element: Snippet) => void): any;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet relevant section in reference guide}
     */
    class Snippet extends FormBase implements ISnippet {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Snippet;
        _initializeDefaultProperties(): void;
    }
    interface ISnippetCall extends internal.IElement {
        model: IModel;
        container: ISnippetCallWidget;
        load(): SnippetCall;
        load(callback: (element: SnippetCall) => void): any;
    }
    class SnippetCall extends internal.Element implements ISnippetCall {
        model: IModel;
        static typeName: string;
        container: SnippetCallWidget;
        private __snippet;
        snippet: ISnippet;
        snippetQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: SnippetCallWidget): SnippetCall;
        static create(model: IModel): SnippetCall;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet+Call relevant section in reference guide}
     */
    interface ISnippetCallWidget extends IWidget {
        model: IModel;
        load(): SnippetCallWidget;
        load(callback: (element: SnippetCallWidget) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet+Call relevant section in reference guide}
     */
    class SnippetCallWidget extends Widget implements ISnippetCallWidget {
        model: IModel;
        static typeName: string;
        private __snippetCall;
        snippetCall: SnippetCall;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SnippetCallWidget;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image relevant section in reference guide}
     */
    interface IStaticImageViewer extends IConditionallyVisibleWidget {
        model: IModel;
        load(): StaticImageViewer;
        load(callback: (element: StaticImageViewer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image relevant section in reference guide}
     */
    class StaticImageViewer extends ConditionallyVisibleWidget implements IStaticImageViewer {
        model: IModel;
        static typeName: string;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        private __widthUnit;
        widthUnit: ImageSizeUnit;
        private __heightUnit;
        heightUnit: ImageSizeUnit;
        private __width;
        width: number;
        private __height;
        height: number;
        private __clickAction;
        clickAction: ClientAction;
        private __responsive;
        responsive: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): StaticImageViewer;
        _initializeDefaultProperties(): void;
    }
    interface IStaticOrDynamicString extends internal.IElement {
        model: IModel;
        container: ILinkButton;
        load(): StaticOrDynamicString;
        load(callback: (element: StaticOrDynamicString) => void): any;
    }
    class StaticOrDynamicString extends internal.Element implements IStaticOrDynamicString {
        model: IModel;
        static typeName: string;
        container: LinkButton;
        private __isDynamic;
        isDynamic: boolean;
        private __value;
        value: string;
        private __attribute;
        /**
         * The value of this property is conceptually of type Paths$AttributePath.
         */
        attribute: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: LinkButton): StaticOrDynamicString;
        static create(model: IModel): StaticOrDynamicString;
        _initializeDefaultProperties(): void;
    }
    interface ISyncButton extends IButton {
        model: IModel;
        load(): SyncButton;
        load(callback: (element: SyncButton) => void): any;
    }
    class SyncButton extends Button implements ISyncButton {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): SyncButton;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Container relevant section in reference guide}
     */
    interface ITabContainer extends IConditionallyVisibleWidget {
        model: IModel;
        load(): TabContainer;
        load(callback: (element: TabContainer) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Container relevant section in reference guide}
     */
    class TabContainer extends ConditionallyVisibleWidget implements ITabContainer {
        model: IModel;
        static typeName: string;
        private __tabPages;
        tabPages: internal.IList<TabPage>;
        private __defaultPage;
        defaultPage: TabPage;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TabContainer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Page relevant section in reference guide}
     */
    interface ITabPage extends internal.IElement {
        model: IModel;
        container: ITabContainer;
        load(): TabPage;
        load(callback: (element: TabPage) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Page relevant section in reference guide}
     */
    class TabPage extends internal.Element implements ITabPage {
        model: IModel;
        static typeName: string;
        container: TabContainer;
        private __name;
        name: string;
        private __caption;
        caption: texts.Text;
        private __refreshOnShow;
        refreshOnShow: boolean;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: TabContainer): TabPage;
        static create(model: IModel): TabPage;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table relevant section in reference guide}
     */
    interface ITable extends IConditionallyVisibleWidget {
        model: IModel;
        load(): Table;
        load(callback: (element: Table) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table relevant section in reference guide}
     */
    class Table extends ConditionallyVisibleWidget implements ITable {
        model: IModel;
        static typeName: string;
        private __cells;
        cells: internal.IList<TableCell>;
        private __columns;
        columns: internal.IList<TableColumn>;
        private __widthUnit;
        widthUnit: UnitEnum;
        private __rows;
        rows: internal.IList<TableRow>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Table;
        _initializeDefaultProperties(): void;
    }
    interface ITableCell extends internal.IElement {
        model: IModel;
        container: ITable;
        load(): TableCell;
        load(callback: (element: TableCell) => void): any;
    }
    class TableCell extends internal.Element implements ITableCell {
        model: IModel;
        static typeName: string;
        container: Table;
        private __class;
        class: string;
        private __style;
        style: string;
        private __isHeader;
        isHeader: boolean;
        private __widget;
        widget: Widget;
        private __leftColumnIndex;
        leftColumnIndex: number;
        private __topRowIndex;
        topRowIndex: number;
        private __width;
        width: number;
        private __height;
        height: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Table): TableCell;
        static create(model: IModel): TableCell;
        _initializeDefaultProperties(): void;
    }
    interface ITableColumn extends internal.IElement {
        model: IModel;
        container: ITable;
        load(): TableColumn;
        load(callback: (element: TableColumn) => void): any;
    }
    class TableColumn extends internal.Element implements ITableColumn {
        model: IModel;
        static typeName: string;
        container: Table;
        private __width;
        width: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Table): TableColumn;
        static create(model: IModel): TableColumn;
        _initializeDefaultProperties(): void;
    }
    interface ITableRow extends internal.IElement {
        model: IModel;
        container: ITable;
        load(): TableRow;
        load(callback: (element: TableRow) => void): any;
    }
    class TableRow extends internal.Element implements ITableRow {
        model: IModel;
        static typeName: string;
        container: Table;
        private __class;
        class: string;
        private __style;
        style: string;
        private __conditionalVisibilitySettings;
        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Table): TableRow;
        static create(model: IModel): TableRow;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid relevant section in reference guide}
     */
    interface ITemplateGrid extends IGrid {
        model: IModel;
        load(): TemplateGrid;
        load(callback: (element: TemplateGrid) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid relevant section in reference guide}
     */
    class TemplateGrid extends Grid implements ITemplateGrid {
        model: IModel;
        static typeName: string;
        private __contents;
        contents: TemplateGridContents;
        private __numberOfRows;
        numberOfRows: number;
        private __numberOfColumns;
        numberOfColumns: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TemplateGrid;
        _initializeDefaultProperties(): void;
    }
    interface ITemplateGridContents extends internal.IElement {
        model: IModel;
        container: ITemplateGrid;
        load(): TemplateGridContents;
        load(callback: (element: TemplateGridContents) => void): any;
    }
    class TemplateGridContents extends internal.Element implements ITemplateGridContents {
        model: IModel;
        static typeName: string;
        container: TemplateGrid;
        private __widget;
        widget: Widget;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: TemplateGrid): TemplateGridContents;
        static create(model: IModel): TemplateGridContents;
        _initializeDefaultProperties(): void;
    }
    interface ITextWidget extends IAttributeWidgetWithPlaceholder {
        model: IModel;
        load(): TextWidget;
        load(callback: (element: TextWidget) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class TextWidget extends AttributeWidgetWithPlaceholder implements ITextWidget {
        model: IModel;
        static typeName: string;
        private __maxLengthCode;
        maxLengthCode: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Area relevant section in reference guide}
     */
    interface ITextArea extends ITextWidget {
        model: IModel;
        load(): TextArea;
        load(callback: (element: TextArea) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Area relevant section in reference guide}
     */
    class TextArea extends TextWidget implements ITextArea {
        model: IModel;
        static typeName: string;
        private __numberOfLines;
        numberOfLines: number;
        private __counterMessage;
        counterMessage: texts.Text;
        private __textTooLongMessage;
        textTooLongMessage: texts.Text;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TextArea;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Box relevant section in reference guide}
     */
    interface ITextBox extends ITextWidget {
        model: IModel;
        load(): TextBox;
        load(callback: (element: TextBox) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Box relevant section in reference guide}
     */
    class TextBox extends TextWidget implements ITextBox {
        model: IModel;
        static typeName: string;
        private __inputMask;
        inputMask: string;
        private __formattingInfo;
        formattingInfo: FormattingInfo;
        private __isPasswordBox;
        isPasswordBox: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): TextBox;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Title relevant section in reference guide}
     */
    interface ITitle extends IConditionallyVisibleWidget {
        model: IModel;
        load(): Title;
        load(callback: (element: Title) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Title relevant section in reference guide}
     */
    class Title extends ConditionallyVisibleWidget implements ITitle {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): Title;
        _initializeDefaultProperties(): void;
    }
    interface IVerticalFlow extends IWidget {
        model: IModel;
        load(): VerticalFlow;
        load(callback: (element: VerticalFlow) => void): any;
    }
    class VerticalFlow extends Widget implements IVerticalFlow {
        model: IModel;
        static typeName: string;
        private __widgets;
        widgets: internal.IList<Widget>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): VerticalFlow;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Vertical+Split+Pane relevant section in reference guide}
     */
    interface IVerticalSplitPane extends ISplitPane {
        model: IModel;
        load(): VerticalSplitPane;
        load(callback: (element: VerticalSplitPane) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Vertical+Split+Pane relevant section in reference guide}
     */
    class VerticalSplitPane extends SplitPane implements IVerticalSplitPane {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): VerticalSplitPane;
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { enumerations } from './enumerations';
import { images } from './images';
import { menus } from './menus';
import { microflows } from './microflows';
import { navigation } from './navigation';
import { security } from './security';
import { texts } from './texts';
import { IModel } from './base-model';
