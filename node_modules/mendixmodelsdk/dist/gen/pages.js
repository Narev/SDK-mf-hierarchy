var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var pages;
(function (pages) {
    var FormLocation = (function (_super) {
        __extends(FormLocation, _super);
        function FormLocation() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.FormLocation";
        }
        FormLocation.Content = new FormLocation("Content", {});
        FormLocation.Popup = new FormLocation("Popup", {});
        FormLocation.ModalPopup = new FormLocation("ModalPopup", {});
        return FormLocation;
    })(internal.IEnum);
    pages.FormLocation = FormLocation;
    var ProgressBarType = (function (_super) {
        __extends(ProgressBarType, _super);
        function ProgressBarType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ProgressBarType";
        }
        ProgressBarType.None = new ProgressBarType("None", {});
        ProgressBarType.NonBlocking = new ProgressBarType("NonBlocking", {});
        ProgressBarType.Blocking = new ProgressBarType("Blocking", {});
        return ProgressBarType;
    })(internal.IEnum);
    pages.ProgressBarType = ProgressBarType;
    var FormValidations = (function (_super) {
        __extends(FormValidations, _super);
        function FormValidations() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.FormValidations";
        }
        FormValidations.None = new FormValidations("None", {});
        FormValidations.Widget = new FormValidations("Widget", {});
        FormValidations.All = new FormValidations("All", {});
        return FormValidations;
    })(internal.IEnum);
    pages.FormValidations = FormValidations;
    var EnumFormat = (function (_super) {
        __extends(EnumFormat, _super);
        function EnumFormat() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.EnumFormat";
        }
        EnumFormat.Text = new EnumFormat("Text", {});
        EnumFormat.Image = new EnumFormat("Image", {});
        return EnumFormat;
    })(internal.IEnum);
    pages.EnumFormat = EnumFormat;
    var DateFormat = (function (_super) {
        __extends(DateFormat, _super);
        function DateFormat() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.DateFormat";
        }
        DateFormat.Date = new DateFormat("Date", {});
        DateFormat.Time = new DateFormat("Time", {});
        DateFormat.DateTime = new DateFormat("DateTime", {});
        DateFormat.Custom = new DateFormat("Custom", {});
        return DateFormat;
    })(internal.IEnum);
    pages.DateFormat = DateFormat;
    var EditableEnum = (function (_super) {
        __extends(EditableEnum, _super);
        function EditableEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.EditableEnum";
        }
        EditableEnum.Always = new EditableEnum("Always", {});
        EditableEnum.Never = new EditableEnum("Never", {});
        EditableEnum.Conditional = new EditableEnum("Conditional", {});
        return EditableEnum;
    })(internal.IEnum);
    pages.EditableEnum = EditableEnum;
    var UnitEnum = (function (_super) {
        __extends(UnitEnum, _super);
        function UnitEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.UnitEnum";
        }
        UnitEnum.Weight = new UnitEnum("Weight", {});
        UnitEnum.Pixels = new UnitEnum("Pixels", {});
        return UnitEnum;
    })(internal.IEnum);
    pages.UnitEnum = UnitEnum;
    var SortDirection = (function (_super) {
        __extends(SortDirection, _super);
        function SortDirection() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SortDirection";
        }
        SortDirection.Ascending = new SortDirection("Ascending", {});
        SortDirection.Descending = new SortDirection("Descending", {});
        return SortDirection;
    })(internal.IEnum);
    pages.SortDirection = SortDirection;
    var RenderType = (function (_super) {
        __extends(RenderType, _super);
        function RenderType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.RenderType";
        }
        RenderType.Button = new RenderType("Button", {});
        RenderType.Link = new RenderType("Link", {});
        return RenderType;
    })(internal.IEnum);
    pages.RenderType = RenderType;
    var ButtonStyle = (function (_super) {
        __extends(ButtonStyle, _super);
        function ButtonStyle() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ButtonStyle";
        }
        ButtonStyle.Default = new ButtonStyle("Default", {});
        ButtonStyle.Inverse = new ButtonStyle("Inverse", {});
        ButtonStyle.Primary = new ButtonStyle("Primary", {});
        ButtonStyle.Info = new ButtonStyle("Info", {});
        ButtonStyle.Success = new ButtonStyle("Success", {});
        ButtonStyle.Warning = new ButtonStyle("Warning", {});
        ButtonStyle.Danger = new ButtonStyle("Danger", {});
        return ButtonStyle;
    })(internal.IEnum);
    pages.ButtonStyle = ButtonStyle;
    var DatabaseConstraintOperator = (function (_super) {
        __extends(DatabaseConstraintOperator, _super);
        function DatabaseConstraintOperator() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.DatabaseConstraintOperator";
        }
        DatabaseConstraintOperator.Equals = new DatabaseConstraintOperator("Equals", {});
        DatabaseConstraintOperator.NotEquals = new DatabaseConstraintOperator("NotEquals", {});
        DatabaseConstraintOperator.Contains = new DatabaseConstraintOperator("Contains", {});
        DatabaseConstraintOperator.NotContains = new DatabaseConstraintOperator("NotContains", {});
        DatabaseConstraintOperator.LessThan = new DatabaseConstraintOperator("LessThan", {});
        DatabaseConstraintOperator.LessThanOrEquals = new DatabaseConstraintOperator("LessThanOrEquals", {});
        DatabaseConstraintOperator.GreaterThan = new DatabaseConstraintOperator("GreaterThan", {});
        DatabaseConstraintOperator.GreaterThanOrEquals = new DatabaseConstraintOperator("GreaterThanOrEquals", {});
        return DatabaseConstraintOperator;
    })(internal.IEnum);
    pages.DatabaseConstraintOperator = DatabaseConstraintOperator;
    var AggregateFunction = (function (_super) {
        __extends(AggregateFunction, _super);
        function AggregateFunction() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.AggregateFunction";
        }
        AggregateFunction.None = new AggregateFunction("None", {});
        AggregateFunction.Average = new AggregateFunction("Average", {});
        AggregateFunction.Maximum = new AggregateFunction("Maximum", {});
        AggregateFunction.Minimum = new AggregateFunction("Minimum", {});
        AggregateFunction.Sum = new AggregateFunction("Sum", {});
        AggregateFunction.Count = new AggregateFunction("Count", {});
        return AggregateFunction;
    })(internal.IEnum);
    pages.AggregateFunction = AggregateFunction;
    var AlignmentEnum = (function (_super) {
        __extends(AlignmentEnum, _super);
        function AlignmentEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.AlignmentEnum";
        }
        AlignmentEnum.Left = new AlignmentEnum("Left", {});
        AlignmentEnum.Center = new AlignmentEnum("Center", {});
        AlignmentEnum.Right = new AlignmentEnum("Right", {});
        return AlignmentEnum;
    })(internal.IEnum);
    pages.AlignmentEnum = AlignmentEnum;
    var ClickTypeType = (function (_super) {
        __extends(ClickTypeType, _super);
        function ClickTypeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ClickTypeType";
        }
        ClickTypeType.Single = new ClickTypeType("Single", {});
        ClickTypeType.Double = new ClickTypeType("Double", {});
        return ClickTypeType;
    })(internal.IEnum);
    pages.ClickTypeType = ClickTypeType;
    var ContainerWidth = (function (_super) {
        __extends(ContainerWidth, _super);
        function ContainerWidth() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ContainerWidth";
        }
        ContainerWidth.FullWidth = new ContainerWidth("FullWidth", {});
        ContainerWidth.FixedWidth = new ContainerWidth("FixedWidth", {});
        return ContainerWidth;
    })(internal.IEnum);
    pages.ContainerWidth = ContainerWidth;
    var FileManagerType = (function (_super) {
        __extends(FileManagerType, _super);
        function FileManagerType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.FileManagerType";
        }
        FileManagerType.Upload = new FileManagerType("Upload", {});
        FileManagerType.Download = new FileManagerType("Download", {});
        FileManagerType.Both = new FileManagerType("Both", {});
        return FileManagerType;
    })(internal.IEnum);
    pages.FileManagerType = FileManagerType;
    var GridSelectionMode = (function (_super) {
        __extends(GridSelectionMode, _super);
        function GridSelectionMode() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.GridSelectionMode";
        }
        GridSelectionMode.None = new GridSelectionMode("None", {});
        GridSelectionMode.Single = new GridSelectionMode("Single", {});
        GridSelectionMode.SingleAndMaintain = new GridSelectionMode("SingleAndMaintain", {});
        GridSelectionMode.Multi = new GridSelectionMode("Multi", {});
        GridSelectionMode.SimpleMulti = new GridSelectionMode("SimpleMulti", {});
        return GridSelectionMode;
    })(internal.IEnum);
    pages.GridSelectionMode = GridSelectionMode;
    var GroupBoxCollapsible = (function (_super) {
        __extends(GroupBoxCollapsible, _super);
        function GroupBoxCollapsible() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.GroupBoxCollapsible";
        }
        GroupBoxCollapsible.No = new GroupBoxCollapsible("No", {});
        GroupBoxCollapsible.YesInitiallyExpanded = new GroupBoxCollapsible("YesInitiallyExpanded", {});
        GroupBoxCollapsible.YesInitiallyCollapsed = new GroupBoxCollapsible("YesInitiallyCollapsed", {});
        return GroupBoxCollapsible;
    })(internal.IEnum);
    pages.GroupBoxCollapsible = GroupBoxCollapsible;
    var ImageSizeUnit = (function (_super) {
        __extends(ImageSizeUnit, _super);
        function ImageSizeUnit() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ImageSizeUnit";
        }
        ImageSizeUnit.Auto = new ImageSizeUnit("Auto", {});
        ImageSizeUnit.Pixels = new ImageSizeUnit("Pixels", {});
        ImageSizeUnit.Percentage = new ImageSizeUnit("Percentage", {});
        return ImageSizeUnit;
    })(internal.IEnum);
    pages.ImageSizeUnit = ImageSizeUnit;
    var LayoutModeType = (function (_super) {
        __extends(LayoutModeType, _super);
        function LayoutModeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.LayoutModeType";
        }
        LayoutModeType.Headline = new LayoutModeType("Headline", {});
        LayoutModeType.Sidebar = new LayoutModeType("Sidebar", {});
        return LayoutModeType;
    })(internal.IEnum);
    pages.LayoutModeType = LayoutModeType;
    var LayoutType = (function (_super) {
        __extends(LayoutType, _super);
        function LayoutType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.LayoutType";
        }
        LayoutType.Responsive = new LayoutType("Responsive", {});
        LayoutType.Tablet = new LayoutType("Tablet", {});
        LayoutType.Phone = new LayoutType("Phone", {});
        LayoutType.ModalPopup = new LayoutType("ModalPopup", {});
        LayoutType.Popup = new LayoutType("Popup", {});
        LayoutType.Legacy = new LayoutType("Legacy", {});
        return LayoutType;
    })(internal.IEnum);
    pages.LayoutType = LayoutType;
    var LinkType = (function (_super) {
        __extends(LinkType, _super);
        function LinkType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.LinkType";
        }
        LinkType.Web = new LinkType("Web", {});
        LinkType.Email = new LinkType("Email", {});
        LinkType.Call = new LinkType("Call", {});
        LinkType.Text = new LinkType("Text", {});
        return LinkType;
    })(internal.IEnum);
    pages.LinkType = LinkType;
    var MobileFooterType = (function (_super) {
        __extends(MobileFooterType, _super);
        function MobileFooterType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.MobileFooterType";
        }
        MobileFooterType.None = new MobileFooterType("None", {});
        MobileFooterType.MenuBar = new MobileFooterType("MenuBar", {});
        MobileFooterType.Custom = new MobileFooterType("Custom", {});
        return MobileFooterType;
    })(internal.IEnum);
    pages.MobileFooterType = MobileFooterType;
    var NewButtonEditLocation = (function (_super) {
        __extends(NewButtonEditLocation, _super);
        function NewButtonEditLocation() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.NewButtonEditLocation";
        }
        NewButtonEditLocation.InlineAtTop = new NewButtonEditLocation("InlineAtTop", {});
        NewButtonEditLocation.InlineAtBottom = new NewButtonEditLocation("InlineAtBottom", {});
        NewButtonEditLocation.Form = new NewButtonEditLocation("Form", {});
        return NewButtonEditLocation;
    })(internal.IEnum);
    pages.NewButtonEditLocation = NewButtonEditLocation;
    var ReferenceSelectorRenderModeType = (function (_super) {
        __extends(ReferenceSelectorRenderModeType, _super);
        function ReferenceSelectorRenderModeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ReferenceSelectorRenderModeType";
        }
        ReferenceSelectorRenderModeType.Form = new ReferenceSelectorRenderModeType("Form", {});
        ReferenceSelectorRenderModeType.DropDown = new ReferenceSelectorRenderModeType("DropDown", {});
        return ReferenceSelectorRenderModeType;
    })(internal.IEnum);
    pages.ReferenceSelectorRenderModeType = ReferenceSelectorRenderModeType;
    var RenderModeType = (function (_super) {
        __extends(RenderModeType, _super);
        function RenderModeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.RenderModeType";
        }
        RenderModeType.Button = new RenderModeType("Button", {});
        RenderModeType.Link = new RenderModeType("Link", {});
        return RenderModeType;
    })(internal.IEnum);
    pages.RenderModeType = RenderModeType;
    var ScrollBehavior = (function (_super) {
        __extends(ScrollBehavior, _super);
        function ScrollBehavior() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.ScrollBehavior";
        }
        ScrollBehavior.PerRegion = new ScrollBehavior("PerRegion", {});
        ScrollBehavior.FullWidget = new ScrollBehavior("FullWidget", {});
        return ScrollBehavior;
    })(internal.IEnum);
    pages.ScrollBehavior = ScrollBehavior;
    var SearchBarTypeEnum = (function (_super) {
        __extends(SearchBarTypeEnum, _super);
        function SearchBarTypeEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SearchBarTypeEnum";
        }
        SearchBarTypeEnum.None = new SearchBarTypeEnum("None", {});
        SearchBarTypeEnum.FoldableOpen = new SearchBarTypeEnum("FoldableOpen", {});
        SearchBarTypeEnum.FoldableClosed = new SearchBarTypeEnum("FoldableClosed", {});
        SearchBarTypeEnum.AlwaysOpen = new SearchBarTypeEnum("AlwaysOpen", {});
        return SearchBarTypeEnum;
    })(internal.IEnum);
    pages.SearchBarTypeEnum = SearchBarTypeEnum;
    var SearchFieldOperator = (function (_super) {
        __extends(SearchFieldOperator, _super);
        function SearchFieldOperator() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SearchFieldOperator";
        }
        SearchFieldOperator.Contains = new SearchFieldOperator("Contains", {});
        SearchFieldOperator.StartsWith = new SearchFieldOperator("StartsWith", {});
        SearchFieldOperator.Greater = new SearchFieldOperator("Greater", {});
        SearchFieldOperator.GreaterOrEqual = new SearchFieldOperator("GreaterOrEqual", {});
        SearchFieldOperator.Equal = new SearchFieldOperator("Equal", {});
        SearchFieldOperator.NotEqual = new SearchFieldOperator("NotEqual", {});
        SearchFieldOperator.SmallerOrEqual = new SearchFieldOperator("SmallerOrEqual", {});
        SearchFieldOperator.Smaller = new SearchFieldOperator("Smaller", {});
        return SearchFieldOperator;
    })(internal.IEnum);
    pages.SearchFieldOperator = SearchFieldOperator;
    var SearchFieldType = (function (_super) {
        __extends(SearchFieldType, _super);
        function SearchFieldType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SearchFieldType";
        }
        SearchFieldType.Normal = new SearchFieldType("Normal", {});
        SearchFieldType.Hidden = new SearchFieldType("Hidden", {});
        SearchFieldType.ReadOnly = new SearchFieldType("ReadOnly", {});
        return SearchFieldType;
    })(internal.IEnum);
    pages.SearchFieldType = SearchFieldType;
    var SelectionType = (function (_super) {
        __extends(SelectionType, _super);
        function SelectionType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SelectionType";
        }
        SelectionType.SelectPage = new SelectionType("SelectPage", {});
        SelectionType.SelectAll = new SelectionType("SelectAll", {});
        return SelectionType;
    })(internal.IEnum);
    pages.SelectionType = SelectionType;
    var SidebarToggleMode = (function (_super) {
        __extends(SidebarToggleMode, _super);
        function SidebarToggleMode() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SidebarToggleMode";
        }
        SidebarToggleMode.PushContentAside = new SidebarToggleMode("PushContentAside", {});
        SidebarToggleMode.SlideOverContent = new SidebarToggleMode("SlideOverContent", {});
        SidebarToggleMode.ShrinkContent = new SidebarToggleMode("ShrinkContent", {});
        return SidebarToggleMode;
    })(internal.IEnum);
    pages.SidebarToggleMode = SidebarToggleMode;
    var SidebarToggleRegion = (function (_super) {
        __extends(SidebarToggleRegion, _super);
        function SidebarToggleRegion() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SidebarToggleRegion";
        }
        SidebarToggleRegion.Left = new SidebarToggleRegion("Left", {});
        SidebarToggleRegion.Right = new SidebarToggleRegion("Right", {});
        return SidebarToggleRegion;
    })(internal.IEnum);
    pages.SidebarToggleRegion = SidebarToggleRegion;
    var SimpleMenuBarOrientation = (function (_super) {
        __extends(SimpleMenuBarOrientation, _super);
        function SimpleMenuBarOrientation() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SimpleMenuBarOrientation";
        }
        SimpleMenuBarOrientation.Horizontal = new SimpleMenuBarOrientation("Horizontal", {});
        SimpleMenuBarOrientation.Vertical = new SimpleMenuBarOrientation("Vertical", {});
        return SimpleMenuBarOrientation;
    })(internal.IEnum);
    pages.SimpleMenuBarOrientation = SimpleMenuBarOrientation;
    var SizeMode = (function (_super) {
        __extends(SizeMode, _super);
        function SizeMode() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.SizeMode";
        }
        SizeMode.Auto = new SizeMode("Auto", {});
        SizeMode.Pixels = new SizeMode("Pixels", {});
        SizeMode.Percentage = new SizeMode("Percentage", {});
        return SizeMode;
    })(internal.IEnum);
    pages.SizeMode = SizeMode;
    var TableCellRenderModeType = (function (_super) {
        __extends(TableCellRenderModeType, _super);
        function TableCellRenderModeType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.TableCellRenderModeType";
        }
        TableCellRenderModeType.Default = new TableCellRenderModeType("Default", {});
        TableCellRenderModeType.Header = new TableCellRenderModeType("Header", {});
        TableCellRenderModeType.Title = new TableCellRenderModeType("Title", {});
        return TableCellRenderModeType;
    })(internal.IEnum);
    pages.TableCellRenderModeType = TableCellRenderModeType;
    var TextRenderMode = (function (_super) {
        __extends(TextRenderMode, _super);
        function TextRenderMode() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "pages.TextRenderMode";
        }
        TextRenderMode.Text = new TextRenderMode("Text", {});
        TextRenderMode.Paragraph = new TextRenderMode("Paragraph", {});
        TextRenderMode.H1 = new TextRenderMode("H1", {});
        TextRenderMode.H2 = new TextRenderMode("H2", {});
        TextRenderMode.H3 = new TextRenderMode("H3", {});
        TextRenderMode.H4 = new TextRenderMode("H4", {});
        TextRenderMode.H5 = new TextRenderMode("H5", {});
        TextRenderMode.H6 = new TextRenderMode("H6", {});
        return TextRenderMode;
    })(internal.IEnum);
    pages.TextRenderMode = TextRenderMode;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Widget = (function (_super) {
        __extends(Widget, _super);
        function Widget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(Widget, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__class = new internal.PrimitiveProperty(Widget, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(Widget, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__tabIndex = new internal.PrimitiveProperty(Widget, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new Widget() cannot be invoked directly, please use 'model.pages.createWidget()'");
        }
        Object.defineProperty(Widget.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "tabIndex", {
            get: function () { return this.__tabIndex.get(); },
            set: function (newValue) { this.__tabIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Widget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Widget.typeName = "Pages$Widget";
        Widget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Widget;
    })(internal.Element);
    pages.Widget = Widget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionallyVisibleWidget = (function (_super) {
        __extends(ConditionallyVisibleWidget, _super);
        function ConditionallyVisibleWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__conditionalVisibilitySettings = new internal.PartProperty(ConditionallyVisibleWidget, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4)
                throw new Error("new ConditionallyVisibleWidget() cannot be invoked directly, please use 'model.pages.createConditionallyVisibleWidget()'");
        }
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionallyVisibleWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConditionallyVisibleWidget.typeName = "Pages$ConditionallyVisibleWidget";
        ConditionallyVisibleWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionallyVisibleWidget;
    })(Widget);
    pages.ConditionallyVisibleWidget = ConditionallyVisibleWidget;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Button+Widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(Button, this, "caption", null, false);
            this.__tooltip = new internal.PartProperty(Button, this, "tooltip", null, true);
            this.__icon = new internal.PartProperty(Button, this, "icon", null, false);
            this.__renderType = new internal.EnumProperty(Button, this, "renderType", RenderType.Button, RenderType);
            this.__buttonStyle = new internal.EnumProperty(Button, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4)
                throw new Error("new Button() cannot be invoked directly, please use 'model.pages.createButton()'");
        }
        Object.defineProperty(Button.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "tooltip", {
            get: function () { return this.__tooltip.get(); },
            set: function (newValue) { this.__tooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "renderType", {
            get: function () { return this.__renderType.get(); },
            set: function (newValue) { this.__renderType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "buttonStyle", {
            get: function () { return this.__buttonStyle.get(); },
            set: function (newValue) { this.__buttonStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Button.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.tooltip = texts_1.texts.Text.create(this.model);
            this.renderType = RenderType.Button;
            this.buttonStyle = ButtonStyle.Default;
        };
        Button.typeName = "Pages$Button";
        Button.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "tooltip": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Button;
    })(ConditionallyVisibleWidget);
    pages.Button = Button;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Action+Button relevant section in reference guide}
     */
    var ActionButton = (function (_super) {
        __extends(ActionButton, _super);
        function ActionButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__action = new internal.PartProperty(ActionButton, this, "action", null, true);
            this.__disabledDuringAction = new internal.PrimitiveProperty(ActionButton, this, "disabledDuringAction", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ActionButton() cannot be invoked directly, please use 'model.pages.createActionButton()'");
        }
        Object.defineProperty(ActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "disabledDuringAction", {
            get: function () { return this.__disabledDuringAction.get(); },
            set: function (newValue) { this.__disabledDuringAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, ActionButton);
        };
        ActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        ActionButton.typeName = "Pages$ActionButton";
        ActionButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "action": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ActionButton;
    })(Button);
    pages.ActionButton = ActionButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ActionItem = (function (_super) {
        __extends(ActionItem, _super);
        function ActionItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__action = new internal.PartProperty(ActionItem, this, "action", null, true);
            if (arguments.length < 4)
                throw new Error("new ActionItem() cannot be invoked directly, please use 'model.pages.createActionItem()'");
        }
        Object.defineProperty(ActionItem.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ActionItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
        };
        ActionItem.typeName = "Pages$ActionItem";
        ActionItem.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "action": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ActionItem;
    })(internal.Element);
    pages.ActionItem = ActionItem;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Sources relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DataSource = (function (_super) {
        __extends(DataSource, _super);
        function DataSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataSource() cannot be invoked directly, please use 'model.pages.createDataSource()'");
        }
        DataSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataSource.typeName = "Pages$DataSource";
        DataSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataSource;
    })(internal.Element);
    pages.DataSource = DataSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var EntityPathSource = (function (_super) {
        __extends(EntityPathSource, _super);
        function EntityPathSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entityPath = new internal.PrimitiveProperty(EntityPathSource, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new EntityPathSource() cannot be invoked directly, please use 'model.pages.createEntityPathSource()'");
        }
        Object.defineProperty(EntityPathSource.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type Paths$EntityPath.
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        EntityPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityPathSource.typeName = "Pages$EntityPathSource";
        EntityPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return EntityPathSource;
    })(DataSource);
    pages.EntityPathSource = EntityPathSource;
    var AssociationSource = (function (_super) {
        __extends(AssociationSource, _super);
        function AssociationSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new AssociationSource() cannot be invoked directly, please use 'model.pages.createAssociationSource()'");
        }
        /*
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        AssociationSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AssociationSource, "dataSource", false);
        };
        /*
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationSource.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationSource);
        };
        AssociationSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AssociationSource.typeName = "Pages$AssociationSource";
        AssociationSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return AssociationSource;
    })(EntityPathSource);
    pages.AssociationSource = AssociationSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionallyEditableWidget = (function (_super) {
        __extends(ConditionallyEditableWidget, _super);
        function ConditionallyEditableWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__conditionalEditabilitySettings = new internal.PartProperty(ConditionallyEditableWidget, this, "conditionalEditabilitySettings", null, false);
            this.__editable = new internal.EnumProperty(ConditionallyEditableWidget, this, "editable", EditableEnum.Always, EditableEnum);
            if (arguments.length < 4)
                throw new Error("new ConditionallyEditableWidget() cannot be invoked directly, please use 'model.pages.createConditionallyEditableWidget()'");
        }
        Object.defineProperty(ConditionallyEditableWidget.prototype, "conditionalEditabilitySettings", {
            get: function () { return this.__conditionalEditabilitySettings.get(); },
            set: function (newValue) { this.__conditionalEditabilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionallyEditableWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.editable = EditableEnum.Always;
        };
        ConditionallyEditableWidget.typeName = "Pages$ConditionallyEditableWidget";
        ConditionallyEditableWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionallyEditableWidget;
    })(ConditionallyVisibleWidget);
    pages.ConditionallyEditableWidget = ConditionallyEditableWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var InputWidget = (function (_super) {
        __extends(InputWidget, _super);
        function InputWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__label = new internal.PartProperty(InputWidget, this, "label", null, false);
            if (arguments.length < 4)
                throw new Error("new InputWidget() cannot be invoked directly, please use 'model.pages.createInputWidget()'");
        }
        Object.defineProperty(InputWidget.prototype, "label", {
            get: function () { return this.__label.get(); },
            set: function (newValue) { this.__label.set(newValue); },
            enumerable: true,
            configurable: true
        });
        InputWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        InputWidget.typeName = "Pages$InputWidget";
        InputWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return InputWidget;
    })(ConditionallyEditableWidget);
    pages.InputWidget = InputWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MemberWidget = (function (_super) {
        __extends(MemberWidget, _super);
        function MemberWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(MemberWidget, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new MemberWidget() cannot be invoked directly, please use 'model.pages.createMemberWidget()'");
        }
        Object.defineProperty(MemberWidget.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MemberWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MemberWidget.typeName = "Pages$MemberWidget";
        MemberWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MemberWidget;
    })(InputWidget);
    pages.MemberWidget = MemberWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AssociationWidget = (function (_super) {
        __extends(AssociationWidget, _super);
        function AssociationWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__selectorSource = new internal.PartProperty(AssociationWidget, this, "selectorSource", null, true);
            this.__selectPageSettings = new internal.PartProperty(AssociationWidget, this, "selectPageSettings", null, true);
            this.__onChangeMicroflowSettings = new internal.PartProperty(AssociationWidget, this, "onChangeMicroflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new AssociationWidget() cannot be invoked directly, please use 'model.pages.createAssociationWidget()'");
        }
        Object.defineProperty(AssociationWidget.prototype, "selectorSource", {
            get: function () { return this.__selectorSource.get(); },
            set: function (newValue) { this.__selectorSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "selectPageSettings", {
            get: function () { return this.__selectPageSettings.get(); },
            set: function (newValue) { this.__selectPageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AssociationWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.selectorSource = SelectorXPathSource.create(this.model);
            this.selectPageSettings = PageSettings.create(this.model);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
        };
        AssociationWidget.typeName = "Pages$AssociationWidget";
        AssociationWidget.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "selectorSource": {
                    "required": {
                        "currentValue": true
                    }
                },
                "selectPageSettings": {
                    "required": {
                        "currentValue": true
                    }
                },
                "onChangeMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return AssociationWidget;
    })(MemberWidget);
    pages.AssociationWidget = AssociationWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeWidget = (function (_super) {
        __extends(AttributeWidget, _super);
        function AttributeWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__required = new internal.PrimitiveProperty(AttributeWidget, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            this.__requiredMessage = new internal.PartProperty(AttributeWidget, this, "requiredMessage", null, true);
            this.__onChangeMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onChangeMicroflowSettings", null, true);
            this.__onEnterMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onEnterMicroflowSettings", null, true);
            this.__onLeaveMicroflowSettings = new internal.PartProperty(AttributeWidget, this, "onLeaveMicroflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new AttributeWidget() cannot be invoked directly, please use 'model.pages.createAttributeWidget()'");
        }
        Object.defineProperty(AttributeWidget.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "requiredMessage", {
            get: function () { return this.__requiredMessage.get(); },
            set: function (newValue) { this.__requiredMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onEnterMicroflowSettings", {
            get: function () { return this.__onEnterMicroflowSettings.get(); },
            set: function (newValue) { this.__onEnterMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onLeaveMicroflowSettings", {
            get: function () { return this.__onLeaveMicroflowSettings.get(); },
            set: function (newValue) { this.__onLeaveMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AttributeWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.requiredMessage = texts_1.texts.Text.create(this.model);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            this.onEnterMicroflowSettings = MicroflowSettings.create(this.model);
            this.onLeaveMicroflowSettings = MicroflowSettings.create(this.model);
        };
        AttributeWidget.typeName = "Pages$AttributeWidget";
        AttributeWidget.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "requiredMessage": {
                    "required": {
                        "currentValue": true
                    }
                },
                "onChangeMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                },
                "onEnterMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                },
                "onLeaveMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return AttributeWidget;
    })(MemberWidget);
    pages.AttributeWidget = AttributeWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeWidgetWithPlaceholder = (function (_super) {
        __extends(AttributeWidgetWithPlaceholder, _super);
        function AttributeWidgetWithPlaceholder(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__placeholder = new internal.PartProperty(AttributeWidgetWithPlaceholder, this, "placeholder", null, true);
            if (arguments.length < 4)
                throw new Error("new AttributeWidgetWithPlaceholder() cannot be invoked directly, please use 'model.pages.createAttributeWidgetWithPlaceholder()'");
        }
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "placeholder", {
            get: function () { return this.__placeholder.get(); },
            set: function (newValue) { this.__placeholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AttributeWidgetWithPlaceholder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.placeholder = texts_1.texts.Text.create(this.model);
        };
        AttributeWidgetWithPlaceholder.typeName = "Pages$AttributeWidgetWithPlaceholder";
        AttributeWidgetWithPlaceholder.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "placeholder": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return AttributeWidgetWithPlaceholder;
    })(AttributeWidget);
    pages.AttributeWidgetWithPlaceholder = AttributeWidgetWithPlaceholder;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Back+Button relevant section in reference guide}
     */
    var BackButton = (function (_super) {
        __extends(BackButton, _super);
        function BackButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new BackButton() cannot be invoked directly, please use 'model.pages.createBackButton()'");
        }
        /*
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BackButton.create = function (model) {
            return internal.instancehelpers.createElement(model, BackButton);
        };
        BackButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Back";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Terug";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        BackButton.typeName = "Pages$BackButton";
        BackButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return BackButton;
    })(Button);
    pages.BackButton = BackButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Cancel+Button relevant section in reference guide}
     */
    var CancelButton = (function (_super) {
        __extends(CancelButton, _super);
        function CancelButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new CancelButton() cannot be invoked directly, please use 'model.pages.createCancelButton()'");
        }
        /*
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CancelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, CancelButton);
        };
        CancelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        CancelButton.typeName = "Pages$CancelButton";
        CancelButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CancelButton;
    })(Button);
    pages.CancelButton = CancelButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Check+Box relevant section in reference guide}
     */
    var CheckBox = (function (_super) {
        __extends(CheckBox, _super);
        function CheckBox(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new CheckBox() cannot be invoked directly, please use 'model.pages.createCheckBox()'");
        }
        /*
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CheckBox.create = function (model) {
            return internal.instancehelpers.createElement(model, CheckBox);
        };
        CheckBox.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CheckBox.typeName = "Pages$CheckBox";
        CheckBox.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return CheckBox;
    })(AttributeWidget);
    pages.CheckBox = CheckBox;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ClientAction = (function (_super) {
        __extends(ClientAction, _super);
        function ClientAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ClientAction() cannot be invoked directly, please use 'model.pages.createClientAction()'");
        }
        ClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ClientAction.typeName = "Pages$ClientAction";
        ClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ClientAction;
    })(internal.Element);
    pages.ClientAction = ClientAction;
    var ClientTemplate = (function (_super) {
        __extends(ClientTemplate, _super);
        function ClientTemplate(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__template = new internal.PartProperty(ClientTemplate, this, "template", null, true);
            this.__parameters = new internal.PartListProperty(ClientTemplate, this, "parameters", []);
            if (arguments.length < 4)
                throw new Error("new ClientTemplate() cannot be invoked directly, please use 'model.pages.createClientTemplate()'");
        }
        Object.defineProperty(ClientTemplate.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ClientTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, ClientTemplate);
        };
        ClientTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.template = texts_1.texts.Text.create(this.model);
        };
        ClientTemplate.typeName = "Pages$ClientTemplate";
        ClientTemplate.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "template": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ClientTemplate;
    })(internal.Element);
    pages.ClientTemplate = ClientTemplate;
    var ClientTemplateParameter = (function (_super) {
        __extends(ClientTemplateParameter, _super);
        function ClientTemplateParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(ClientTemplateParameter, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ClientTemplateParameter() cannot be invoked directly, please use 'model.pages.createClientTemplateParameter()'");
        }
        Object.defineProperty(ClientTemplateParameter.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * The new ClientTemplateParameter will be automatically stored in the 'parameters' property of the parent ClientTemplate element passed as argument.
         */
        ClientTemplateParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplateParameter, "parameters", true);
        };
        /*
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ClientTemplateParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, ClientTemplateParameter);
        };
        ClientTemplateParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ClientTemplateParameter.typeName = "Pages$ClientTemplateParameter";
        ClientTemplateParameter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ClientTemplateParameter;
    })(internal.Element);
    pages.ClientTemplateParameter = ClientTemplateParameter;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var EntityWidget = (function (_super) {
        __extends(EntityWidget, _super);
        function EntityWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__dataSource = new internal.PartProperty(EntityWidget, this, "dataSource", null, false);
            if (arguments.length < 4)
                throw new Error("new EntityWidget() cannot be invoked directly, please use 'model.pages.createEntityWidget()'");
        }
        Object.defineProperty(EntityWidget.prototype, "dataSource", {
            get: function () { return this.__dataSource.get(); },
            set: function (newValue) { this.__dataSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        EntityWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        EntityWidget.typeName = "Pages$EntityWidget";
        EntityWidget.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "dataSource": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return EntityWidget;
    })(ConditionallyVisibleWidget);
    pages.EntityWidget = EntityWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ListenTargetWidget = (function (_super) {
        __extends(ListenTargetWidget, _super);
        function ListenTargetWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ListenTargetWidget() cannot be invoked directly, please use 'model.pages.createListenTargetWidget()'");
        }
        ListenTargetWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListenTargetWidget.typeName = "Pages$ListenTargetWidget";
        ListenTargetWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListenTargetWidget;
    })(EntityWidget);
    pages.ListenTargetWidget = ListenTargetWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isControlBarVisible = new internal.PrimitiveProperty(Grid, this, "isControlBarVisible", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isPagingEnabled = new internal.PrimitiveProperty(Grid, this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            this.__selectionMode = new internal.EnumProperty(Grid, this, "selectionMode", GridSelectionMode.Single, GridSelectionMode);
            this.__selectFirst = new internal.PrimitiveProperty(Grid, this, "selectFirst", false, internal.PrimitiveTypeEnum.Boolean);
            this.__defaultButtonTrigger = new internal.EnumProperty(Grid, this, "defaultButtonTrigger", ClickTypeType.Double, ClickTypeType);
            this.__refreshTime = new internal.PrimitiveProperty(Grid, this, "refreshTime", 0, internal.PrimitiveTypeEnum.Integer);
            this.__controlBar = new internal.PartProperty(Grid, this, "controlBar", null, true);
            if (arguments.length < 4)
                throw new Error("new Grid() cannot be invoked directly, please use 'model.pages.createGrid()'");
        }
        Object.defineProperty(Grid.prototype, "isControlBarVisible", {
            get: function () { return this.__isControlBarVisible.get(); },
            set: function (newValue) { this.__isControlBarVisible.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "isPagingEnabled", {
            get: function () { return this.__isPagingEnabled.get(); },
            set: function (newValue) { this.__isPagingEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "selectionMode", {
            get: function () { return this.__selectionMode.get(); },
            set: function (newValue) { this.__selectionMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "selectFirst", {
            get: function () { return this.__selectFirst.get(); },
            set: function (newValue) { this.__selectFirst.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "defaultButtonTrigger", {
            get: function () { return this.__defaultButtonTrigger.get(); },
            set: function (newValue) { this.__defaultButtonTrigger.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "refreshTime", {
            get: function () { return this.__refreshTime.get(); },
            set: function (newValue) { this.__refreshTime.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "controlBar", {
            get: function () { return this.__controlBar.get(); },
            set: function (newValue) { this.__controlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Grid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.isControlBarVisible = true;
            this.isPagingEnabled = true;
            this.selectionMode = GridSelectionMode.Single;
            this.defaultButtonTrigger = ClickTypeType.Double;
            this.controlBar = GridControlBar.create(this.model);
            this.dataSource = GridXPathSource.create(this.model);
        };
        Grid.typeName = "Pages$Grid";
        Grid.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "controlBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Grid;
    })(ListenTargetWidget);
    pages.Grid = Grid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ColumnGrid = (function (_super) {
        __extends(ColumnGrid, _super);
        function ColumnGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__columns = new internal.PartListProperty(ColumnGrid, this, "columns", []);
            this.__numberOfRows = new internal.PrimitiveProperty(ColumnGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            this.__showEmptyRows = new internal.PrimitiveProperty(ColumnGrid, this, "showEmptyRows", false, internal.PrimitiveTypeEnum.Boolean);
            this.__widthUnit = new internal.EnumProperty(ColumnGrid, this, "widthUnit", UnitEnum.Weight, UnitEnum);
            this.__tooltipPage = new internal.ByNameReferenceProperty(ColumnGrid, this, "tooltipPage", null, "Pages$Page");
            if (arguments.length < 4)
                throw new Error("new ColumnGrid() cannot be invoked directly, please use 'model.pages.createColumnGrid()'");
        }
        Object.defineProperty(ColumnGrid.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "numberOfRows", {
            get: function () { return this.__numberOfRows.get(); },
            set: function (newValue) { this.__numberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "showEmptyRows", {
            get: function () { return this.__showEmptyRows.get(); },
            set: function (newValue) { this.__showEmptyRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "tooltipPage", {
            get: function () { return this.__tooltipPage.get(); },
            set: function (newValue) { this.__tooltipPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "tooltipPageQualifiedName", {
            get: function () { return this.__tooltipPage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        ColumnGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (gridColumn) {
                    gridColumn.width = 1;
                    return gridColumn;
                })(GridColumn.create(this.model))]);
            this.numberOfRows = 20;
            this.widthUnit = UnitEnum.Weight;
        };
        ColumnGrid.typeName = "Pages$ColumnGrid";
        ColumnGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ColumnGrid;
    })(Grid);
    pages.ColumnGrid = ColumnGrid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBarItem = (function (_super) {
        __extends(ControlBarItem, _super);
        function ControlBarItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(ControlBarItem, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ControlBarItem() cannot be invoked directly, please use 'model.pages.createControlBarItem()'");
        }
        Object.defineProperty(ControlBarItem.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBarItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ControlBarItem.typeName = "Pages$ControlBarItem";
        ControlBarItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ControlBarItem;
    })(internal.Element);
    pages.ControlBarItem = ControlBarItem;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SearchField = (function (_super) {
        __extends(SearchField, _super);
        function SearchField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(SearchField, this, "caption", null, true);
            this.__type = new internal.EnumProperty(SearchField, this, "type", SearchFieldType.Normal, SearchFieldType);
            this.__defaultValue = new internal.PrimitiveProperty(SearchField, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new SearchField() cannot be invoked directly, please use 'model.pages.createSearchField()'");
        }
        Object.defineProperty(SearchField.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchField.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchField.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SearchField.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.type = SearchFieldType.Normal;
        };
        SearchField.typeName = "Pages$SearchField";
        SearchField.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SearchField;
    })(ControlBarItem);
    pages.SearchField = SearchField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SingleSearchField = (function (_super) {
        __extends(SingleSearchField, _super);
        function SingleSearchField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(SingleSearchField, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__operator = new internal.EnumProperty(SingleSearchField, this, "operator", SearchFieldOperator.Contains, SearchFieldOperator);
            if (arguments.length < 4)
                throw new Error("new SingleSearchField() cannot be invoked directly, please use 'model.pages.createSingleSearchField()'");
        }
        Object.defineProperty(SingleSearchField.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SingleSearchField.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SingleSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SingleSearchField.typeName = "Pages$SingleSearchField";
        SingleSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SingleSearchField;
    })(SearchField);
    pages.SingleSearchField = SingleSearchField;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Comparison+Search+Field relevant section in reference guide}
     */
    var ComparisonSearchField = (function (_super) {
        __extends(ComparisonSearchField, _super);
        function ComparisonSearchField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ComparisonSearchField() cannot be invoked directly, please use 'model.pages.createComparisonSearchField()'");
        }
        /*
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * The new ComparisonSearchField will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        ComparisonSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ComparisonSearchField, "items", true);
        };
        /*
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ComparisonSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, ComparisonSearchField);
        };
        ComparisonSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.operator = SearchFieldOperator.Contains;
        };
        ComparisonSearchField.typeName = "Pages$ComparisonSearchField";
        ComparisonSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ComparisonSearchField;
    })(SingleSearchField);
    pages.ComparisonSearchField = ComparisonSearchField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionalSettings = (function (_super) {
        __extends(ConditionalSettings, _super);
        function ConditionalSettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attribute = new internal.ByNameReferenceProperty(ConditionalSettings, this, "attribute", null, "DomainModels$Attribute");
            this.__conditions = new internal.PartListProperty(ConditionalSettings, this, "conditions", []);
            if (arguments.length < 4)
                throw new Error("new ConditionalSettings() cannot be invoked directly, please use 'model.pages.createConditionalSettings()'");
        }
        Object.defineProperty(ConditionalSettings.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "conditions", {
            get: function () { return this.__conditions.get(); },
            set: function (newValue) { this.__conditions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionalSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConditionalSettings.typeName = "Pages$ConditionalSettings";
        ConditionalSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionalSettings;
    })(internal.Element);
    pages.ConditionalSettings = ConditionalSettings;
    var ConditionalEditabilitySettings = (function (_super) {
        __extends(ConditionalEditabilitySettings, _super);
        function ConditionalEditabilitySettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ConditionalEditabilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalEditabilitySettings()'");
        }
        /*
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property of the parent ConditionallyEditableWidget element passed as argument.
         */
        ConditionalEditabilitySettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalEditabilitySettings, "conditionalEditabilitySettings", false);
        };
        /*
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConditionalEditabilitySettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConditionalEditabilitySettings);
        };
        ConditionalEditabilitySettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConditionalEditabilitySettings.typeName = "Pages$ConditionalEditabilitySettings";
        ConditionalEditabilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionalEditabilitySettings;
    })(ConditionalSettings);
    pages.ConditionalEditabilitySettings = ConditionalEditabilitySettings;
    var ConditionalVisibilitySettings = (function (_super) {
        __extends(ConditionalVisibilitySettings, _super);
        function ConditionalVisibilitySettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__moduleRoles = new internal.ByNameReferenceListProperty(ConditionalVisibilitySettings, this, "moduleRoles", [], "Security$ModuleRole");
            this.__ignoreSecurity = new internal.PrimitiveProperty(ConditionalVisibilitySettings, this, "ignoreSecurity", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ConditionalVisibilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalVisibilitySettings()'");
        }
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "moduleRoles", {
            get: function () { return this.__moduleRoles.get(); },
            set: function (newValue) { this.__moduleRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "moduleRolesQualifiedNames", {
            get: function () { return this.__moduleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "ignoreSecurity", {
            get: function () { return this.__ignoreSecurity.get(); },
            set: function (newValue) { this.__ignoreSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConditionalVisibilitySettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConditionalVisibilitySettings);
        };
        ConditionalVisibilitySettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ConditionalVisibilitySettings.typeName = "Pages$ConditionalVisibilitySettings";
        ConditionalVisibilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ConditionalVisibilitySettings;
    })(ConditionalSettings);
    pages.ConditionalVisibilitySettings = ConditionalVisibilitySettings;
    var ConfirmationInfo = (function (_super) {
        __extends(ConfirmationInfo, _super);
        function ConfirmationInfo(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__question = new internal.PartProperty(ConfirmationInfo, this, "question", null, true);
            this.__proceedButtonCaption = new internal.PartProperty(ConfirmationInfo, this, "proceedButtonCaption", null, true);
            this.__cancelButtonCaption = new internal.PartProperty(ConfirmationInfo, this, "cancelButtonCaption", null, true);
            if (arguments.length < 4)
                throw new Error("new ConfirmationInfo() cannot be invoked directly, please use 'model.pages.createConfirmationInfo()'");
        }
        Object.defineProperty(ConfirmationInfo.prototype, "question", {
            get: function () { return this.__question.get(); },
            set: function (newValue) { this.__question.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmationInfo.prototype, "proceedButtonCaption", {
            get: function () { return this.__proceedButtonCaption.get(); },
            set: function (newValue) { this.__proceedButtonCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmationInfo.prototype, "cancelButtonCaption", {
            get: function () { return this.__cancelButtonCaption.get(); },
            set: function (newValue) { this.__cancelButtonCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property of the parent MicroflowSettings element passed as argument.
         */
        ConfirmationInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
        };
        /*
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConfirmationInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, ConfirmationInfo);
        };
        ConfirmationInfo.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.question = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Are you sure?";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Weet u het zeker?";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.proceedButtonCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Proceed";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Doorgaan";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.cancelButtonCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Cancel";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Annuleren";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        ConfirmationInfo.typeName = "Pages$ConfirmationInfo";
        ConfirmationInfo.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "question": {
                    "required": {
                        "currentValue": true
                    }
                },
                "proceedButtonCaption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "cancelButtonCaption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ConfirmationInfo;
    })(internal.Element);
    pages.ConfirmationInfo = ConfirmationInfo;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBar = (function (_super) {
        __extends(ControlBar, _super);
        function ControlBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(ControlBar, this, "items", []);
            if (arguments.length < 4)
                throw new Error("new ControlBar() cannot be invoked directly, please use 'model.pages.createControlBar()'");
        }
        Object.defineProperty(ControlBar.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ControlBar.typeName = "Pages$ControlBar";
        ControlBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ControlBar;
    })(internal.Element);
    pages.ControlBar = ControlBar;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBarButton = (function (_super) {
        __extends(ControlBarButton, _super);
        function ControlBarButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(ControlBarButton, this, "caption", null, false);
            this.__tooltip = new internal.PartProperty(ControlBarButton, this, "tooltip", null, true);
            this.__icon = new internal.PartProperty(ControlBarButton, this, "icon", null, false);
            this.__class = new internal.PrimitiveProperty(ControlBarButton, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(ControlBarButton, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__conditionalVisibilitySettings = new internal.PartProperty(ControlBarButton, this, "conditionalVisibilitySettings", null, false);
            this.__buttonStyle = new internal.EnumProperty(ControlBarButton, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4)
                throw new Error("new ControlBarButton() cannot be invoked directly, please use 'model.pages.createControlBarButton()'");
        }
        Object.defineProperty(ControlBarButton.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "tooltip", {
            get: function () { return this.__tooltip.get(); },
            set: function (newValue) { this.__tooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "buttonStyle", {
            get: function () { return this.__buttonStyle.get(); },
            set: function (newValue) { this.__buttonStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.tooltip = texts_1.texts.Text.create(this.model);
            this.buttonStyle = ButtonStyle.Default;
        };
        ControlBarButton.typeName = "Pages$ControlBarButton";
        ControlBarButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "tooltip": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ControlBarButton;
    })(ControlBarItem);
    pages.ControlBarButton = ControlBarButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+Grid relevant section in reference guide}
     */
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataGrid() cannot be invoked directly, please use 'model.pages.createDataGrid()'");
        }
        /*
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGrid);
        };
        DataGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataGrid.typeName = "Pages$DataGrid";
        DataGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataGrid;
    })(ColumnGrid);
    pages.DataGrid = DataGrid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var GridControlBarButton = (function (_super) {
        __extends(GridControlBarButton, _super);
        function GridControlBarButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new GridControlBarButton() cannot be invoked directly, please use 'model.pages.createGridControlBarButton()'");
        }
        GridControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GridControlBarButton.typeName = "Pages$GridControlBarButton";
        GridControlBarButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridControlBarButton;
    })(ControlBarButton);
    pages.GridControlBarButton = GridControlBarButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Add+Button relevant section in reference guide}
     */
    var DataGridAddButton = (function (_super) {
        __extends(DataGridAddButton, _super);
        function DataGridAddButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__pageSettings = new internal.PartProperty(DataGridAddButton, this, "pageSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new DataGridAddButton() cannot be invoked directly, please use 'model.pages.createDataGridAddButton()'");
        }
        Object.defineProperty(DataGridAddButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * The new DataGridAddButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataGridAddButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridAddButton, "items", true);
        };
        /*
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridAddButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridAddButton);
        };
        DataGridAddButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Add";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Toevoegen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataGridAddButton.typeName = "Pages$DataGridAddButton";
        DataGridAddButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataGridAddButton;
    })(GridControlBarButton);
    pages.DataGridAddButton = DataGridAddButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+CSV+Button relevant section in reference guide}
     */
    var DataGridExportToCSVButton = (function (_super) {
        __extends(DataGridExportToCSVButton, _super);
        function DataGridExportToCSVButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            this.__decimalSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "decimalSeparator", "", internal.PrimitiveTypeEnum.String);
            this.__groupSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "groupSeparator", "", internal.PrimitiveTypeEnum.String);
            this.__delimiter = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "delimiter", "", internal.PrimitiveTypeEnum.String);
            this.__generateExcelHint = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "generateExcelHint", false, internal.PrimitiveTypeEnum.Boolean);
            this.__useGridDateFormat = new internal.PrimitiveProperty(DataGridExportToCSVButton, this, "useGridDateFormat", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DataGridExportToCSVButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToCSVButton()'");
        }
        Object.defineProperty(DataGridExportToCSVButton.prototype, "maxNumberOfRows", {
            get: function () { return this.__maxNumberOfRows.get(); },
            set: function (newValue) { this.__maxNumberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "decimalSeparator", {
            get: function () { return this.__decimalSeparator.get(); },
            set: function (newValue) { this.__decimalSeparator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "groupSeparator", {
            get: function () { return this.__groupSeparator.get(); },
            set: function (newValue) { this.__groupSeparator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "delimiter", {
            get: function () { return this.__delimiter.get(); },
            set: function (newValue) { this.__delimiter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "generateExcelHint", {
            get: function () { return this.__generateExcelHint.get(); },
            set: function (newValue) { this.__generateExcelHint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "useGridDateFormat", {
            get: function () { return this.__useGridDateFormat.get(); },
            set: function (newValue) { this.__useGridDateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * The new DataGridExportToCSVButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataGridExportToCSVButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridExportToCSVButton, "items", true);
        };
        /*
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridExportToCSVButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridExportToCSVButton);
        };
        DataGridExportToCSVButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.maxNumberOfRows = 1000;
            this.decimalSeparator = ".";
            this.groupSeparator = ",";
            this.delimiter = ";";
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Export to CSV";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Naar CSV exporteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataGridExportToCSVButton.typeName = "Pages$DataGridExportToCSVButton";
        DataGridExportToCSVButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataGridExportToCSVButton;
    })(GridControlBarButton);
    pages.DataGridExportToCSVButton = DataGridExportToCSVButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Export+To+Excel+Button relevant section in reference guide}
     */
    var DataGridExportToExcelButton = (function (_super) {
        __extends(DataGridExportToExcelButton, _super);
        function DataGridExportToExcelButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToExcelButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            this.__useExcelDateType = new internal.PrimitiveProperty(DataGridExportToExcelButton, this, "useExcelDateType", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DataGridExportToExcelButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToExcelButton()'");
        }
        Object.defineProperty(DataGridExportToExcelButton.prototype, "maxNumberOfRows", {
            get: function () { return this.__maxNumberOfRows.get(); },
            set: function (newValue) { this.__maxNumberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToExcelButton.prototype, "useExcelDateType", {
            get: function () { return this.__useExcelDateType.get(); },
            set: function (newValue) { this.__useExcelDateType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * The new DataGridExportToExcelButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataGridExportToExcelButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridExportToExcelButton, "items", true);
        };
        /*
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridExportToExcelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridExportToExcelButton);
        };
        DataGridExportToExcelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.maxNumberOfRows = 1000;
            this.useExcelDateType = true;
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Export to Excel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Naar Excel exporteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataGridExportToExcelButton.typeName = "Pages$DataGridExportToExcelButton";
        DataGridExportToExcelButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataGridExportToExcelButton;
    })(GridControlBarButton);
    pages.DataGridExportToExcelButton = DataGridExportToExcelButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Remove+Button relevant section in reference guide}
     */
    var DataGridRemoveButton = (function (_super) {
        __extends(DataGridRemoveButton, _super);
        function DataGridRemoveButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataGridRemoveButton() cannot be invoked directly, please use 'model.pages.createDataGridRemoveButton()'");
        }
        /*
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * The new DataGridRemoveButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataGridRemoveButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridRemoveButton, "items", true);
        };
        /*
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridRemoveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridRemoveButton);
        };
        DataGridRemoveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Remove";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Weghalen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataGridRemoveButton.typeName = "Pages$DataGridRemoveButton";
        DataGridRemoveButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataGridRemoveButton;
    })(GridControlBarButton);
    pages.DataGridRemoveButton = DataGridRemoveButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View relevant section in reference guide}
     */
    var DataView = (function (_super) {
        __extends(DataView, _super);
        function DataView(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(DataView, this, "widget", null, false);
            this.__editable = new internal.PrimitiveProperty(DataView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__showControlBar = new internal.PrimitiveProperty(DataView, this, "showControlBar", false, internal.PrimitiveTypeEnum.Boolean);
            this.__closeOnSaveOrCancel = new internal.PrimitiveProperty(DataView, this, "closeOnSaveOrCancel", false, internal.PrimitiveTypeEnum.Boolean);
            this.__useSchema = new internal.PrimitiveProperty(DataView, this, "useSchema", false, internal.PrimitiveTypeEnum.Boolean);
            this.__noEntityMessage = new internal.PartProperty(DataView, this, "noEntityMessage", null, true);
            this.__labelWidth = new internal.PrimitiveProperty(DataView, this, "labelWidth", 0, internal.PrimitiveTypeEnum.Integer);
            this.__controlBar = new internal.PartProperty(DataView, this, "controlBar", null, true);
            if (arguments.length < 4)
                throw new Error("new DataView() cannot be invoked directly, please use 'model.pages.createDataView()'");
        }
        Object.defineProperty(DataView.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "showControlBar", {
            get: function () { return this.__showControlBar.get(); },
            set: function (newValue) { this.__showControlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "closeOnSaveOrCancel", {
            get: function () { return this.__closeOnSaveOrCancel.get(); },
            set: function (newValue) { this.__closeOnSaveOrCancel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "useSchema", {
            get: function () { return this.__useSchema.get(); },
            set: function (newValue) { this.__useSchema.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "noEntityMessage", {
            get: function () { return this.__noEntityMessage.get(); },
            set: function (newValue) { this.__noEntityMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "labelWidth", {
            get: function () { return this.__labelWidth.get(); },
            set: function (newValue) { this.__labelWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "controlBar", {
            get: function () { return this.__controlBar.get(); },
            set: function (newValue) { this.__controlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataView.create = function (model) {
            return internal.instancehelpers.createElement(model, DataView);
        };
        DataView.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.editable = true;
            this.showControlBar = true;
            this.closeOnSaveOrCancel = true;
            this.noEntityMessage = texts_1.texts.Text.create(this.model);
            this.labelWidth = 3;
            this.controlBar = DataViewControlBar.create(this.model);
            this.dataSource = DataViewSource.create(this.model);
        };
        DataView.typeName = "Pages$DataView";
        DataView.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "noEntityMessage": {
                    "required": {
                        "currentValue": true
                    }
                },
                "controlBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataView;
    })(EntityWidget);
    pages.DataView = DataView;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DataViewControlBarButton = (function (_super) {
        __extends(DataViewControlBarButton, _super);
        function DataViewControlBarButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__tabIndex = new internal.PrimitiveProperty(DataViewControlBarButton, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new DataViewControlBarButton() cannot be invoked directly, please use 'model.pages.createDataViewControlBarButton()'");
        }
        Object.defineProperty(DataViewControlBarButton.prototype, "tabIndex", {
            get: function () { return this.__tabIndex.get(); },
            set: function (newValue) { this.__tabIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DataViewControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataViewControlBarButton.typeName = "Pages$DataViewControlBarButton";
        DataViewControlBarButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewControlBarButton;
    })(ControlBarButton);
    pages.DataViewControlBarButton = DataViewControlBarButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+view+action+button relevant section in reference guide}
     */
    var DataViewActionButton = (function (_super) {
        __extends(DataViewActionButton, _super);
        function DataViewActionButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__action = new internal.PartProperty(DataViewActionButton, this, "action", null, true);
            if (arguments.length < 4)
                throw new Error("new DataViewActionButton() cannot be invoked directly, please use 'model.pages.createDataViewActionButton()'");
        }
        Object.defineProperty(DataViewActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * The new DataViewActionButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataViewActionButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewActionButton, "items", true);
        };
        /*
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewActionButton);
        };
        DataViewActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataViewActionButton.typeName = "Pages$DataViewActionButton";
        DataViewActionButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "action": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DataViewActionButton;
    })(DataViewControlBarButton);
    pages.DataViewActionButton = DataViewActionButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Cancel+Button relevant section in reference guide}
     */
    var DataViewCancelButton = (function (_super) {
        __extends(DataViewCancelButton, _super);
        function DataViewCancelButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataViewCancelButton() cannot be invoked directly, please use 'model.pages.createDataViewCancelButton()'");
        }
        /*
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * The new DataViewCancelButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataViewCancelButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewCancelButton, "items", true);
        };
        /*
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewCancelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewCancelButton);
        };
        DataViewCancelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataViewCancelButton.typeName = "Pages$DataViewCancelButton";
        DataViewCancelButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewCancelButton;
    })(DataViewControlBarButton);
    pages.DataViewCancelButton = DataViewCancelButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Close+Button relevant section in reference guide}
     */
    var DataViewCloseButton = (function (_super) {
        __extends(DataViewCloseButton, _super);
        function DataViewCloseButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataViewCloseButton() cannot be invoked directly, please use 'model.pages.createDataViewCloseButton()'");
        }
        /*
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * The new DataViewCloseButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataViewCloseButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewCloseButton, "items", true);
        };
        /*
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewCloseButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewCloseButton);
        };
        DataViewCloseButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Close";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Sluiten";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataViewCloseButton.typeName = "Pages$DataViewCloseButton";
        DataViewCloseButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewCloseButton;
    })(DataViewControlBarButton);
    pages.DataViewCloseButton = DataViewCloseButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Control+Bar relevant section in reference guide}
     */
    var DataViewControlBar = (function (_super) {
        __extends(DataViewControlBar, _super);
        function DataViewControlBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__closeButton = new internal.ByIdReferenceProperty(DataViewControlBar, this, "closeButton", null);
            if (arguments.length < 4)
                throw new Error("new DataViewControlBar() cannot be invoked directly, please use 'model.pages.createDataViewControlBar()'");
        }
        Object.defineProperty(DataViewControlBar.prototype, "closeButton", {
            get: function () { return this.__closeButton.get(); },
            set: function (newValue) { this.__closeButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * The new DataViewControlBar will be automatically stored in the 'controlBar' property of the parent DataView element passed as argument.
         */
        DataViewControlBar.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewControlBar, "controlBar", false);
        };
        /*
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewControlBar.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewControlBar);
        };
        DataViewControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataViewControlBar.typeName = "Pages$DataViewControlBar";
        DataViewControlBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewControlBar;
    })(ControlBar);
    pages.DataViewControlBar = DataViewControlBar;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Data+View+Save+Button relevant section in reference guide}
     */
    var DataViewSaveButton = (function (_super) {
        __extends(DataViewSaveButton, _super);
        function DataViewSaveButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataViewSaveButton() cannot be invoked directly, please use 'model.pages.createDataViewSaveButton()'");
        }
        /*
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * The new DataViewSaveButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DataViewSaveButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewSaveButton, "items", true);
        };
        /*
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewSaveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewSaveButton);
        };
        DataViewSaveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DataViewSaveButton.typeName = "Pages$DataViewSaveButton";
        DataViewSaveButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewSaveButton;
    })(DataViewControlBarButton);
    pages.DataViewSaveButton = DataViewSaveButton;
    var DataViewSource = (function (_super) {
        __extends(DataViewSource, _super);
        function DataViewSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataViewSource() cannot be invoked directly, please use 'model.pages.createDataViewSource()'");
        }
        /*
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        DataViewSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewSource, "dataSource", false);
        };
        /*
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewSource.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewSource);
        };
        DataViewSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataViewSource.typeName = "Pages$DataViewSource";
        DataViewSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataViewSource;
    })(EntityPathSource);
    pages.DataViewSource = DataViewSource;
    var DatabaseConstraint = (function (_super) {
        __extends(DatabaseConstraint, _super);
        function DatabaseConstraint(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attribute = new internal.ByNameReferenceProperty(DatabaseConstraint, this, "attribute", null, "DomainModels$Attribute");
            this.__operator = new internal.EnumProperty(DatabaseConstraint, this, "operator", DatabaseConstraintOperator.Equals, DatabaseConstraintOperator);
            this.__value = new internal.PrimitiveProperty(DatabaseConstraint, this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new DatabaseConstraint() cannot be invoked directly, please use 'model.pages.createDatabaseConstraint()'");
        }
        Object.defineProperty(DatabaseConstraint.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property of the parent DatabaseSourceBase element passed as argument.
         */
        DatabaseConstraint.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        };
        /*
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatabaseConstraint.create = function (model) {
            return internal.instancehelpers.createElement(model, DatabaseConstraint);
        };
        DatabaseConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.operator = DatabaseConstraintOperator.Equals;
        };
        DatabaseConstraint.typeName = "Pages$DatabaseConstraint";
        DatabaseConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DatabaseConstraint;
    })(internal.Element);
    pages.DatabaseConstraint = DatabaseConstraint;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SortableEntityPathSource = (function (_super) {
        __extends(SortableEntityPathSource, _super);
        function SortableEntityPathSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortBar = new internal.PartProperty(SortableEntityPathSource, this, "sortBar", null, true);
            if (arguments.length < 4)
                throw new Error("new SortableEntityPathSource() cannot be invoked directly, please use 'model.pages.createSortableEntityPathSource()'");
        }
        Object.defineProperty(SortableEntityPathSource.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SortableEntityPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortBar = GridSortBar.create(this.model);
        };
        SortableEntityPathSource.typeName = "Pages$SortableEntityPathSource";
        SortableEntityPathSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "sortBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SortableEntityPathSource;
    })(EntityPathSource);
    pages.SortableEntityPathSource = SortableEntityPathSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DatabaseSourceBase = (function (_super) {
        __extends(DatabaseSourceBase, _super);
        function DatabaseSourceBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__databaseConstraints = new internal.PartListProperty(DatabaseSourceBase, this, "databaseConstraints", []);
            if (arguments.length < 4)
                throw new Error("new DatabaseSourceBase() cannot be invoked directly, please use 'model.pages.createDatabaseSourceBase()'");
        }
        Object.defineProperty(DatabaseSourceBase.prototype, "databaseConstraints", {
            get: function () { return this.__databaseConstraints.get(); },
            set: function (newValue) { this.__databaseConstraints.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DatabaseSourceBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DatabaseSourceBase.typeName = "Pages$DatabaseSourceBase";
        DatabaseSourceBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DatabaseSourceBase;
    })(SortableEntityPathSource);
    pages.DatabaseSourceBase = DatabaseSourceBase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Date+Picker relevant section in reference guide}
     */
    var DatePicker = (function (_super) {
        __extends(DatePicker, _super);
        function DatePicker(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__formattingInfo = new internal.PartProperty(DatePicker, this, "formattingInfo", null, true);
            if (arguments.length < 4)
                throw new Error("new DatePicker() cannot be invoked directly, please use 'model.pages.createDatePicker()'");
        }
        Object.defineProperty(DatePicker.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatePicker.create = function (model) {
            return internal.instancehelpers.createElement(model, DatePicker);
        };
        DatePicker.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        DatePicker.typeName = "Pages$DatePicker";
        DatePicker.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DatePicker;
    })(AttributeWidgetWithPlaceholder);
    pages.DatePicker = DatePicker;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Container relevant section in reference guide}
     */
    var DivContainer = (function (_super) {
        __extends(DivContainer, _super);
        function DivContainer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(DivContainer, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new DivContainer() cannot be invoked directly, please use 'model.pages.createDivContainer()'");
        }
        Object.defineProperty(DivContainer.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DivContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, DivContainer);
        };
        DivContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DivContainer.typeName = "Pages$DivContainer";
        DivContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DivContainer;
    })(ConditionallyVisibleWidget);
    pages.DivContainer = DivContainer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-Down+Widget relevant section in reference guide}
     */
    var DropDown = (function (_super) {
        __extends(DropDown, _super);
        function DropDown(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DropDown() cannot be invoked directly, please use 'model.pages.createDropDown()'");
        }
        /*
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDown.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDown);
        };
        DropDown.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DropDown.typeName = "Pages$DropDown";
        DropDown.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DropDown;
    })(AttributeWidget);
    pages.DropDown = DropDown;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop+Down+Button relevant section in reference guide}
     */
    var DropDownButton = (function (_super) {
        __extends(DropDownButton, _super);
        function DropDownButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(DropDownButton, this, "items", []);
            if (arguments.length < 4)
                throw new Error("new DropDownButton() cannot be invoked directly, please use 'model.pages.createDropDownButton()'");
        }
        Object.defineProperty(DropDownButton.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownButton);
        };
        DropDownButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Drop down";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Uitklappen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        DropDownButton.typeName = "Pages$DropDownButton";
        DropDownButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DropDownButton;
    })(Button);
    pages.DropDownButton = DropDownButton;
    var DropDownButtonItem = (function (_super) {
        __extends(DropDownButtonItem, _super);
        function DropDownButtonItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(DropDownButtonItem, this, "caption", null, true);
            this.__image = new internal.ByNameReferenceProperty(DropDownButtonItem, this, "image", null, "Images$Image");
            if (arguments.length < 4)
                throw new Error("new DropDownButtonItem() cannot be invoked directly, please use 'model.pages.createDropDownButtonItem()'");
        }
        Object.defineProperty(DropDownButtonItem.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButtonItem.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButtonItem.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * The new DropDownButtonItem will be automatically stored in the 'items' property of the parent DropDownButton element passed as argument.
         */
        DropDownButtonItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButtonItem, "items", true);
        };
        /*
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownButtonItem.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownButtonItem);
        };
        DropDownButtonItem.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Item";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        DropDownButtonItem.typeName = "Pages$DropDownButtonItem";
        DropDownButtonItem.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DropDownButtonItem;
    })(ActionItem);
    pages.DropDownButtonItem = DropDownButtonItem;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop-down+Search+Field relevant section in reference guide}
     */
    var DropDownSearchField = (function (_super) {
        __extends(DropDownSearchField, _super);
        function DropDownSearchField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortBar = new internal.PartProperty(DropDownSearchField, this, "sortBar", null, true);
            this.__xPathConstraint = new internal.PrimitiveProperty(DropDownSearchField, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__allowMultipleSelect = new internal.PrimitiveProperty(DropDownSearchField, this, "allowMultipleSelect", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DropDownSearchField() cannot be invoked directly, please use 'model.pages.createDropDownSearchField()'");
        }
        Object.defineProperty(DropDownSearchField.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownSearchField.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownSearchField.prototype, "allowMultipleSelect", {
            get: function () { return this.__allowMultipleSelect.get(); },
            set: function (newValue) { this.__allowMultipleSelect.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * The new DropDownSearchField will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        DropDownSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DropDownSearchField, "items", true);
        };
        /*
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownSearchField);
        };
        DropDownSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortBar = GridSortBar.create(this.model);
            this.operator = SearchFieldOperator.Equal;
        };
        DropDownSearchField.typeName = "Pages$DropDownSearchField";
        DropDownSearchField.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "sortBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DropDownSearchField;
    })(SingleSearchField);
    pages.DropDownSearchField = DropDownSearchField;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Viewer relevant section in reference guide}
     */
    var DynamicImageViewer = (function (_super) {
        __extends(DynamicImageViewer, _super);
        function DynamicImageViewer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__defaultImage = new internal.ByNameReferenceProperty(DynamicImageViewer, this, "defaultImage", null, "Images$Image");
            this.__widthUnit = new internal.EnumProperty(DynamicImageViewer, this, "widthUnit", ImageSizeUnit.Percentage, ImageSizeUnit);
            this.__heightUnit = new internal.EnumProperty(DynamicImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            this.__width = new internal.PrimitiveProperty(DynamicImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__height = new internal.PrimitiveProperty(DynamicImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            this.__responsive = new internal.PrimitiveProperty(DynamicImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            this.__showAsThumbnail = new internal.PrimitiveProperty(DynamicImageViewer, this, "showAsThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
            this.__onClickBehavior = new internal.PartProperty(DynamicImageViewer, this, "onClickBehavior", null, true);
            if (arguments.length < 4)
                throw new Error("new DynamicImageViewer() cannot be invoked directly, please use 'model.pages.createDynamicImageViewer()'");
        }
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImage", {
            get: function () { return this.__defaultImage.get(); },
            set: function (newValue) { this.__defaultImage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImageQualifiedName", {
            get: function () { return this.__defaultImage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "heightUnit", {
            get: function () { return this.__heightUnit.get(); },
            set: function (newValue) { this.__heightUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "responsive", {
            get: function () { return this.__responsive.get(); },
            set: function (newValue) { this.__responsive.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "showAsThumbnail", {
            get: function () { return this.__showAsThumbnail.get(); },
            set: function (newValue) { this.__showAsThumbnail.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "onClickBehavior", {
            get: function () { return this.__onClickBehavior.get(); },
            set: function (newValue) { this.__onClickBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicImageViewer);
        };
        DynamicImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.widthUnit = ImageSizeUnit.Percentage;
            this.heightUnit = ImageSizeUnit.Auto;
            this.width = 100;
            this.responsive = true;
            this.showAsThumbnail = true;
            this.onClickBehavior = OnClickNothing.create(this.model);
            this.dataSource = ImageViewerSource.create(this.model);
        };
        DynamicImageViewer.typeName = "Pages$DynamicImageViewer";
        DynamicImageViewer.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "onClickBehavior": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DynamicImageViewer;
    })(EntityWidget);
    pages.DynamicImageViewer = DynamicImageViewer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text relevant section in reference guide}
     */
    var DynamicText = (function (_super) {
        __extends(DynamicText, _super);
        function DynamicText(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__content = new internal.PartProperty(DynamicText, this, "content", null, true);
            this.__renderMode = new internal.EnumProperty(DynamicText, this, "renderMode", TextRenderMode.Text, TextRenderMode);
            if (arguments.length < 4)
                throw new Error("new DynamicText() cannot be invoked directly, please use 'model.pages.createDynamicText()'");
        }
        Object.defineProperty(DynamicText.prototype, "content", {
            get: function () { return this.__content.get(); },
            set: function (newValue) { this.__content.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "renderMode", {
            get: function () { return this.__renderMode.get(); },
            set: function (newValue) { this.__renderMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicText.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicText);
        };
        DynamicText.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.content = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Text";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Tekst";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.renderMode = TextRenderMode.Text;
        };
        DynamicText.typeName = "Pages$DynamicText";
        DynamicText.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "content": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return DynamicText;
    })(ConditionallyVisibleWidget);
    pages.DynamicText = DynamicText;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/File+Manager relevant section in reference guide}
     */
    var FileManager = (function (_super) {
        __extends(FileManager, _super);
        function FileManager(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__allowedExtensions = new internal.PrimitiveProperty(FileManager, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.EnumProperty(FileManager, this, "type", FileManagerType.Both, FileManagerType);
            this.__maxFileSize = new internal.PrimitiveProperty(FileManager, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            this.__showFileInBrowser = new internal.PrimitiveProperty(FileManager, this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new FileManager() cannot be invoked directly, please use 'model.pages.createFileManager()'");
        }
        Object.defineProperty(FileManager.prototype, "allowedExtensions", {
            get: function () { return this.__allowedExtensions.get(); },
            set: function (newValue) { this.__allowedExtensions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "maxFileSize", {
            get: function () { return this.__maxFileSize.get(); },
            set: function (newValue) { this.__maxFileSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "showFileInBrowser", {
            get: function () { return this.__showFileInBrowser.get(); },
            set: function (newValue) { this.__showFileInBrowser.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FileManager.create = function (model) {
            return internal.instancehelpers.createElement(model, FileManager);
        };
        FileManager.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = FileManagerType.Both;
            this.maxFileSize = 5;
            this.label = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "File";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Bestand";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        FileManager.typeName = "Pages$FileManager";
        FileManager.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return FileManager;
    })(InputWidget);
    pages.FileManager = FileManager;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var FormBase = (function (_super) {
        __extends(FormBase, _super);
        function FormBase(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__canvasWidth = new internal.PrimitiveProperty(FormBase, this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
            this.__canvasHeight = new internal.PrimitiveProperty(FormBase, this, "canvasHeight", 0, internal.PrimitiveTypeEnum.Integer);
            this._containmentName = "documents";
        }
        Object.defineProperty(FormBase.prototype, "canvasWidth", {
            get: function () { return this.__canvasWidth.get(); },
            set: function (newValue) { this.__canvasWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormBase.prototype, "canvasHeight", {
            get: function () { return this.__canvasHeight.get(); },
            set: function (newValue) { this.__canvasHeight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        FormBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.canvasWidth = 800;
            this.canvasHeight = 600;
        };
        FormBase.typeName = "Pages$FormBase";
        FormBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return FormBase;
    })(projects_1.projects.Document);
    pages.FormBase = FormBase;
    var FormattingInfo = (function (_super) {
        __extends(FormattingInfo, _super);
        function FormattingInfo(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__decimalPrecision = new internal.PrimitiveProperty(FormattingInfo, this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            this.__groupDigits = new internal.PrimitiveProperty(FormattingInfo, this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
            this.__enumFormat = new internal.EnumProperty(FormattingInfo, this, "enumFormat", EnumFormat.Text, EnumFormat);
            this.__dateFormat = new internal.EnumProperty(FormattingInfo, this, "dateFormat", DateFormat.Date, DateFormat);
            this.__customDateFormat = new internal.PrimitiveProperty(FormattingInfo, this, "customDateFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new FormattingInfo() cannot be invoked directly, please use 'model.pages.createFormattingInfo()'");
        }
        Object.defineProperty(FormattingInfo.prototype, "decimalPrecision", {
            get: function () { return this.__decimalPrecision.get(); },
            set: function (newValue) { this.__decimalPrecision.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "groupDigits", {
            get: function () { return this.__groupDigits.get(); },
            set: function (newValue) { this.__groupDigits.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "enumFormat", {
            get: function () { return this.__enumFormat.get(); },
            set: function (newValue) { this.__enumFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "dateFormat", {
            get: function () { return this.__dateFormat.get(); },
            set: function (newValue) { this.__dateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "customDateFormat", {
            get: function () { return this.__customDateFormat.get(); },
            set: function (newValue) { this.__customDateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FormattingInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, FormattingInfo);
        };
        FormattingInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.decimalPrecision = 2;
            this.enumFormat = EnumFormat.Text;
            this.dateFormat = DateFormat.Date;
        };
        FormattingInfo.typeName = "Pages$FormattingInfo";
        FormattingInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return FormattingInfo;
    })(internal.Element);
    pages.FormattingInfo = FormattingInfo;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Property relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Icon = (function (_super) {
        __extends(Icon, _super);
        function Icon(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Icon() cannot be invoked directly, please use 'model.pages.createIcon()'");
        }
        Icon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Icon.typeName = "Pages$Icon";
        Icon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Icon;
    })(internal.Element);
    pages.Icon = Icon;
    var GlyphIcon = (function (_super) {
        __extends(GlyphIcon, _super);
        function GlyphIcon(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__code = new internal.PrimitiveProperty(GlyphIcon, this, "code", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new GlyphIcon() cannot be invoked directly, please use 'model.pages.createGlyphIcon()'");
        }
        Object.defineProperty(GlyphIcon.prototype, "code", {
            get: function () { return this.__code.get(); },
            set: function (newValue) { this.__code.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GlyphIcon.create = function (model) {
            return internal.instancehelpers.createElement(model, GlyphIcon);
        };
        GlyphIcon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.code = -1;
        };
        GlyphIcon.typeName = "Pages$GlyphIcon";
        GlyphIcon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GlyphIcon;
    })(Icon);
    pages.GlyphIcon = GlyphIcon;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+action+button relevant section in reference guide}
     */
    var GridActionButton = (function (_super) {
        __extends(GridActionButton, _super);
        function GridActionButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__action = new internal.PartProperty(GridActionButton, this, "action", null, true);
            this.__maintainSelectionAfterMicroflow = new internal.PrimitiveProperty(GridActionButton, this, "maintainSelectionAfterMicroflow", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new GridActionButton() cannot be invoked directly, please use 'model.pages.createGridActionButton()'");
        }
        Object.defineProperty(GridActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridActionButton.prototype, "maintainSelectionAfterMicroflow", {
            get: function () { return this.__maintainSelectionAfterMicroflow.get(); },
            set: function (newValue) { this.__maintainSelectionAfterMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * The new GridActionButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridActionButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridActionButton, "items", true);
        };
        /*
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridActionButton);
        };
        GridActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridActionButton.typeName = "Pages$GridActionButton";
        GridActionButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "action": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridActionButton;
    })(GridControlBarButton);
    pages.GridActionButton = GridActionButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var GridBaseSource = (function (_super) {
        __extends(GridBaseSource, _super);
        function GridBaseSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__searchBar = new internal.PartProperty(GridBaseSource, this, "searchBar", null, true);
            if (arguments.length < 4)
                throw new Error("new GridBaseSource() cannot be invoked directly, please use 'model.pages.createGridBaseSource()'");
        }
        Object.defineProperty(GridBaseSource.prototype, "searchBar", {
            get: function () { return this.__searchBar.get(); },
            set: function (newValue) { this.__searchBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        GridBaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.searchBar = SearchBar.create(this.model);
        };
        GridBaseSource.typeName = "Pages$GridBaseSource";
        GridBaseSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "searchBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridBaseSource;
    })(SortableEntityPathSource);
    pages.GridBaseSource = GridBaseSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Columns relevant section in reference guide}
     */
    var GridColumn = (function (_super) {
        __extends(GridColumn, _super);
        function GridColumn(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(GridColumn, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PartProperty(GridColumn, this, "caption", null, true);
            this.__attributePath = new internal.PrimitiveProperty(GridColumn, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__formattingInfo = new internal.PartProperty(GridColumn, this, "formattingInfo", null, true);
            this.__showTooltip = new internal.PrimitiveProperty(GridColumn, this, "showTooltip", false, internal.PrimitiveTypeEnum.Boolean);
            this.__aggregateCaption = new internal.PartProperty(GridColumn, this, "aggregateCaption", null, true);
            this.__aggregateFunction = new internal.EnumProperty(GridColumn, this, "aggregateFunction", AggregateFunction.None, AggregateFunction);
            this.__editable = new internal.PrimitiveProperty(GridColumn, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__width = new internal.PrimitiveProperty(GridColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__class = new internal.PrimitiveProperty(GridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(GridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new GridColumn() cannot be invoked directly, please use 'model.pages.createGridColumn()'");
        }
        Object.defineProperty(GridColumn.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "showTooltip", {
            get: function () { return this.__showTooltip.get(); },
            set: function (newValue) { this.__showTooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "aggregateCaption", {
            get: function () { return this.__aggregateCaption.get(); },
            set: function (newValue) { this.__aggregateCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * The new GridColumn will be automatically stored in the 'columns' property of the parent ColumnGrid element passed as argument.
         */
        GridColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridColumn, "columns", true);
        };
        /*
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, GridColumn);
        };
        GridColumn.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Column";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.formattingInfo = FormattingInfo.create(this.model);
            this.aggregateCaption = texts_1.texts.Text.create(this.model);
            this.aggregateFunction = AggregateFunction.None;
        };
        GridColumn.typeName = "Pages$GridColumn";
        GridColumn.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                },
                "aggregateCaption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridColumn;
    })(internal.Element);
    pages.GridColumn = GridColumn;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Control+Bar relevant section in reference guide}
     */
    var GridControlBar = (function (_super) {
        __extends(GridControlBar, _super);
        function GridControlBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__searchButton = new internal.PartProperty(GridControlBar, this, "searchButton", null, true);
            this.__defaultButton = new internal.ByIdReferenceProperty(GridControlBar, this, "defaultButton", null);
            if (arguments.length < 4)
                throw new Error("new GridControlBar() cannot be invoked directly, please use 'model.pages.createGridControlBar()'");
        }
        Object.defineProperty(GridControlBar.prototype, "searchButton", {
            get: function () { return this.__searchButton.get(); },
            set: function (newValue) { this.__searchButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridControlBar.prototype, "defaultButton", {
            get: function () { return this.__defaultButton.get(); },
            set: function (newValue) { this.__defaultButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * The new GridControlBar will be automatically stored in the 'controlBar' property of the parent Grid element passed as argument.
         */
        GridControlBar.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridControlBar, "controlBar", false);
        };
        /*
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridControlBar.create = function (model) {
            return internal.instancehelpers.createElement(model, GridControlBar);
        };
        GridControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.searchButton = GridSearchButton.create(this.model);
        };
        GridControlBar.typeName = "Pages$GridControlBar";
        GridControlBar.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "searchButton": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridControlBar;
    })(ControlBar);
    pages.GridControlBar = GridControlBar;
    var GridDatabaseSource = (function (_super) {
        __extends(GridDatabaseSource, _super);
        function GridDatabaseSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__searchBar = new internal.PartProperty(GridDatabaseSource, this, "searchBar", null, false);
            if (arguments.length < 4)
                throw new Error("new GridDatabaseSource() cannot be invoked directly, please use 'model.pages.createGridDatabaseSource()'");
        }
        Object.defineProperty(GridDatabaseSource.prototype, "searchBar", {
            get: function () { return this.__searchBar.get(); },
            set: function (newValue) { this.__searchBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        GridDatabaseSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDatabaseSource, "dataSource", false);
        };
        /*
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDatabaseSource.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDatabaseSource);
        };
        GridDatabaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GridDatabaseSource.typeName = "Pages$GridDatabaseSource";
        GridDatabaseSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridDatabaseSource;
    })(DatabaseSourceBase);
    pages.GridDatabaseSource = GridDatabaseSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Delete+Button relevant section in reference guide}
     */
    var GridDeleteButton = (function (_super) {
        __extends(GridDeleteButton, _super);
        function GridDeleteButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new GridDeleteButton() cannot be invoked directly, please use 'model.pages.createGridDeleteButton()'");
        }
        /*
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * The new GridDeleteButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridDeleteButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDeleteButton, "items", true);
        };
        /*
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDeleteButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDeleteButton);
        };
        GridDeleteButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Delete";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Verwijderen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridDeleteButton.typeName = "Pages$GridDeleteButton";
        GridDeleteButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridDeleteButton;
    })(GridControlBarButton);
    pages.GridDeleteButton = GridDeleteButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Deselect+All+Button relevant section in reference guide}
     */
    var GridDeselectAllButton = (function (_super) {
        __extends(GridDeselectAllButton, _super);
        function GridDeselectAllButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new GridDeselectAllButton() cannot be invoked directly, please use 'model.pages.createGridDeselectAllButton()'");
        }
        /*
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * The new GridDeselectAllButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridDeselectAllButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDeselectAllButton, "items", true);
        };
        /*
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDeselectAllButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDeselectAllButton);
        };
        GridDeselectAllButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Deselect all";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Alles deselecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridDeselectAllButton.typeName = "Pages$GridDeselectAllButton";
        GridDeselectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridDeselectAllButton;
    })(GridControlBarButton);
    pages.GridDeselectAllButton = GridDeselectAllButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Edit+Button relevant section in reference guide}
     */
    var GridEditButton = (function (_super) {
        __extends(GridEditButton, _super);
        function GridEditButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__pageSettings = new internal.PartProperty(GridEditButton, this, "pageSettings", null, true);
            this.__pagesForSpecializations = new internal.PartListProperty(GridEditButton, this, "pagesForSpecializations", []);
            if (arguments.length < 4)
                throw new Error("new GridEditButton() cannot be invoked directly, please use 'model.pages.createGridEditButton()'");
        }
        Object.defineProperty(GridEditButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridEditButton.prototype, "pagesForSpecializations", {
            get: function () { return this.__pagesForSpecializations.get(); },
            set: function (newValue) { this.__pagesForSpecializations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * The new GridEditButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridEditButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridEditButton, "items", true);
        };
        /*
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridEditButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridEditButton);
        };
        GridEditButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Edit";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Bewerken";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridEditButton.typeName = "Pages$GridEditButton";
        GridEditButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridEditButton;
    })(GridControlBarButton);
    pages.GridEditButton = GridEditButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Grid+New+Button relevant section in reference guide}
     */
    var GridNewButton = (function (_super) {
        __extends(GridNewButton, _super);
        function GridNewButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(GridNewButton, this, "entity", null, "DomainModels$Entity");
            this.__editLocation = new internal.EnumProperty(GridNewButton, this, "editLocation", NewButtonEditLocation.Form, NewButtonEditLocation);
            this.__pageSettings = new internal.PartProperty(GridNewButton, this, "pageSettings", null, true);
            this.__isPersistent = new internal.PrimitiveProperty(GridNewButton, this, "isPersistent", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new GridNewButton() cannot be invoked directly, please use 'model.pages.createGridNewButton()'");
        }
        Object.defineProperty(GridNewButton.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "editLocation", {
            get: function () { return this.__editLocation.get(); },
            set: function (newValue) { this.__editLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "isPersistent", {
            get: function () { return this.__isPersistent.get(); },
            set: function (newValue) { this.__isPersistent.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * The new GridNewButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridNewButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridNewButton, "items", true);
        };
        /*
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridNewButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridNewButton);
        };
        GridNewButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.editLocation = NewButtonEditLocation.Form;
            this.pageSettings = PageSettings.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "New";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Nieuw";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridNewButton.typeName = "Pages$GridNewButton";
        GridNewButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridNewButton;
    })(GridControlBarButton);
    pages.GridNewButton = GridNewButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Button relevant section in reference guide}
     */
    var GridSearchButton = (function (_super) {
        __extends(GridSearchButton, _super);
        function GridSearchButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new GridSearchButton() cannot be invoked directly, please use 'model.pages.createGridSearchButton()'");
        }
        /*
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSearchButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSearchButton);
        };
        GridSearchButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Search";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Zoeken";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridSearchButton.typeName = "Pages$GridSearchButton";
        GridSearchButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridSearchButton;
    })(GridControlBarButton);
    pages.GridSearchButton = GridSearchButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+All+Button relevant section in reference guide}
     */
    var GridSelectAllButton = (function (_super) {
        __extends(GridSelectAllButton, _super);
        function GridSelectAllButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__selectionType = new internal.EnumProperty(GridSelectAllButton, this, "selectionType", SelectionType.SelectPage, SelectionType);
            if (arguments.length < 4)
                throw new Error("new GridSelectAllButton() cannot be invoked directly, please use 'model.pages.createGridSelectAllButton()'");
        }
        Object.defineProperty(GridSelectAllButton.prototype, "selectionType", {
            get: function () { return this.__selectionType.get(); },
            set: function (newValue) { this.__selectionType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * The new GridSelectAllButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        GridSelectAllButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSelectAllButton, "items", true);
        };
        /*
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSelectAllButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSelectAllButton);
        };
        GridSelectAllButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.selectionType = SelectionType.SelectPage;
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Select all";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Alles selecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        GridSelectAllButton.typeName = "Pages$GridSelectAllButton";
        GridSelectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridSelectAllButton;
    })(GridControlBarButton);
    pages.GridSelectAllButton = GridSelectAllButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sort+Bar relevant section in reference guide}
     */
    var GridSortBar = (function (_super) {
        __extends(GridSortBar, _super);
        function GridSortBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortItems = new internal.PartListProperty(GridSortBar, this, "sortItems", []);
            if (arguments.length < 4)
                throw new Error("new GridSortBar() cannot be invoked directly, please use 'model.pages.createGridSortBar()'");
        }
        Object.defineProperty(GridSortBar.prototype, "sortItems", {
            get: function () { return this.__sortItems.get(); },
            set: function (newValue) { this.__sortItems.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortBar.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortBar);
        };
        GridSortBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GridSortBar.typeName = "Pages$GridSortBar";
        GridSortBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridSortBar;
    })(internal.Element);
    pages.GridSortBar = GridSortBar;
    var GridSortItem = (function (_super) {
        __extends(GridSortItem, _super);
        function GridSortItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributePath = new internal.PrimitiveProperty(GridSortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            this.__sortDirection = new internal.EnumProperty(GridSortItem, this, "sortDirection", SortDirection.Ascending, SortDirection);
            if (arguments.length < 4)
                throw new Error("new GridSortItem() cannot be invoked directly, please use 'model.pages.createGridSortItem()'");
        }
        Object.defineProperty(GridSortItem.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortItem.prototype, "sortDirection", {
            get: function () { return this.__sortDirection.get(); },
            set: function (newValue) { this.__sortDirection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property of the parent GridSortBar element passed as argument.
         */
        GridSortItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
        };
        /*
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortItem.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortItem);
        };
        GridSortItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.attributePath = "";
            this.sortDirection = SortDirection.Ascending;
        };
        GridSortItem.typeName = "Pages$GridSortItem";
        GridSortItem.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "attributePath": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GridSortItem;
    })(internal.Element);
    pages.GridSortItem = GridSortItem;
    var GridXPathSource = (function (_super) {
        __extends(GridXPathSource, _super);
        function GridXPathSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__xPathConstraint = new internal.PrimitiveProperty(GridXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__applyContext = new internal.PrimitiveProperty(GridXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__removeAllFromContext = new internal.PrimitiveProperty(GridXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__removeFromContextIds = new internal.ByNameReferenceListProperty(GridXPathSource, this, "removeFromContextIds", [], "DomainModels$Entity");
            if (arguments.length < 4)
                throw new Error("new GridXPathSource() cannot be invoked directly, please use 'model.pages.createGridXPathSource()'");
        }
        Object.defineProperty(GridXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "applyContext", {
            get: function () { return this.__applyContext.get(); },
            set: function (newValue) { this.__applyContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeFromContextIds", {
            get: function () { return this.__removeFromContextIds.get(); },
            set: function (newValue) { this.__removeFromContextIds.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeFromContextIdsQualifiedNames", {
            get: function () { return this.__removeFromContextIds.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        GridXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridXPathSource, "dataSource", false);
        };
        /*
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, GridXPathSource);
        };
        GridXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        GridXPathSource.typeName = "Pages$GridXPathSource";
        GridXPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return GridXPathSource;
    })(GridBaseSource);
    pages.GridXPathSource = GridXPathSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Group+Box relevant section in reference guide}
     */
    var GroupBox = (function (_super) {
        __extends(GroupBox, _super);
        function GroupBox(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(GroupBox, this, "caption", null, true);
            this.__collapsible = new internal.EnumProperty(GroupBox, this, "collapsible", GroupBoxCollapsible.YesInitiallyExpanded, GroupBoxCollapsible);
            this.__widget = new internal.PartProperty(GroupBox, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new GroupBox() cannot be invoked directly, please use 'model.pages.createGroupBox()'");
        }
        Object.defineProperty(GroupBox.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "collapsible", {
            get: function () { return this.__collapsible.get(); },
            set: function (newValue) { this.__collapsible.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GroupBox.create = function (model) {
            return internal.instancehelpers.createElement(model, GroupBox);
        };
        GroupBox.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Group box";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Group box";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.collapsible = GroupBoxCollapsible.YesInitiallyExpanded;
        };
        GroupBox.typeName = "Pages$GroupBox";
        GroupBox.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return GroupBox;
    })(ConditionallyVisibleWidget);
    pages.GroupBox = GroupBox;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Header relevant section in reference guide}
     */
    var Header = (function (_super) {
        __extends(Header, _super);
        function Header(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__leftWidget = new internal.PartProperty(Header, this, "leftWidget", null, false);
            this.__rightWidget = new internal.PartProperty(Header, this, "rightWidget", null, false);
            if (arguments.length < 4)
                throw new Error("new Header() cannot be invoked directly, please use 'model.pages.createHeader()'");
        }
        Object.defineProperty(Header.prototype, "leftWidget", {
            get: function () { return this.__leftWidget.get(); },
            set: function (newValue) { this.__leftWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "rightWidget", {
            get: function () { return this.__rightWidget.get(); },
            set: function (newValue) { this.__rightWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Header.create = function (model) {
            return internal.instancehelpers.createElement(model, Header);
        };
        Header.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Header.typeName = "Pages$Header";
        Header.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Header;
    })(Widget);
    pages.Header = Header;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SplitPane = (function (_super) {
        __extends(SplitPane, _super);
        function SplitPane(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__firstWidget = new internal.PartProperty(SplitPane, this, "firstWidget", null, false);
            this.__secondWidget = new internal.PartProperty(SplitPane, this, "secondWidget", null, false);
            this.__animatedResize = new internal.PrimitiveProperty(SplitPane, this, "animatedResize", false, internal.PrimitiveTypeEnum.Boolean);
            this.__height = new internal.PrimitiveProperty(SplitPane, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            this.__position = new internal.PrimitiveProperty(SplitPane, this, "position", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new SplitPane() cannot be invoked directly, please use 'model.pages.createSplitPane()'");
        }
        Object.defineProperty(SplitPane.prototype, "firstWidget", {
            get: function () { return this.__firstWidget.get(); },
            set: function (newValue) { this.__firstWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "secondWidget", {
            get: function () { return this.__secondWidget.get(); },
            set: function (newValue) { this.__secondWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "animatedResize", {
            get: function () { return this.__animatedResize.get(); },
            set: function (newValue) { this.__animatedResize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "position", {
            get: function () { return this.__position.get(); },
            set: function (newValue) { this.__position.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.position = 50;
        };
        SplitPane.typeName = "Pages$SplitPane";
        SplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SplitPane;
    })(Widget);
    pages.SplitPane = SplitPane;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Horizontal+Split+Pane relevant section in reference guide}
     */
    var HorizontalSplitPane = (function (_super) {
        __extends(HorizontalSplitPane, _super);
        function HorizontalSplitPane(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new HorizontalSplitPane() cannot be invoked directly, please use 'model.pages.createHorizontalSplitPane()'");
        }
        /*
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HorizontalSplitPane.create = function (model) {
            return internal.instancehelpers.createElement(model, HorizontalSplitPane);
        };
        HorizontalSplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        HorizontalSplitPane.typeName = "Pages$HorizontalSplitPane";
        HorizontalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return HorizontalSplitPane;
    })(SplitPane);
    pages.HorizontalSplitPane = HorizontalSplitPane;
    var ImageIcon = (function (_super) {
        __extends(ImageIcon, _super);
        function ImageIcon(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__image = new internal.ByNameReferenceProperty(ImageIcon, this, "image", null, "Images$Image");
            if (arguments.length < 4)
                throw new Error("new ImageIcon() cannot be invoked directly, please use 'model.pages.createImageIcon()'");
        }
        Object.defineProperty(ImageIcon.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageIcon.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageIcon.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageIcon);
        };
        ImageIcon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImageIcon.typeName = "Pages$ImageIcon";
        ImageIcon.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "image": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ImageIcon;
    })(Icon);
    pages.ImageIcon = ImageIcon;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image+Uploader relevant section in reference guide}
     */
    var ImageUploader = (function (_super) {
        __extends(ImageUploader, _super);
        function ImageUploader(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__allowedExtensions = new internal.PrimitiveProperty(ImageUploader, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            this.__thumbnailSize = new internal.PrimitiveProperty(ImageUploader, this, "thumbnailSize", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            this.__maxFileSize = new internal.PrimitiveProperty(ImageUploader, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new ImageUploader() cannot be invoked directly, please use 'model.pages.createImageUploader()'");
        }
        Object.defineProperty(ImageUploader.prototype, "allowedExtensions", {
            get: function () { return this.__allowedExtensions.get(); },
            set: function (newValue) { this.__allowedExtensions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "thumbnailSize", {
            get: function () { return this.__thumbnailSize.get(); },
            set: function (newValue) { this.__thumbnailSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "maxFileSize", {
            get: function () { return this.__maxFileSize.get(); },
            set: function (newValue) { this.__maxFileSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageUploader.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageUploader);
        };
        ImageUploader.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.thumbnailSize = { width: 100, height: 75 };
            this.maxFileSize = 5;
            this.label = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Upload image";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Upload afbeelding";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        ImageUploader.typeName = "Pages$ImageUploader";
        ImageUploader.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ImageUploader;
    })(InputWidget);
    pages.ImageUploader = ImageUploader;
    var ImageViewerSource = (function (_super) {
        __extends(ImageViewerSource, _super);
        function ImageViewerSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ImageViewerSource() cannot be invoked directly, please use 'model.pages.createImageViewerSource()'");
        }
        /*
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        ImageViewerSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImageViewerSource, "dataSource", false);
        };
        /*
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageViewerSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageViewerSource);
        };
        ImageViewerSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImageViewerSource.typeName = "Pages$ImageViewerSource";
        ImageViewerSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ImageViewerSource;
    })(EntityPathSource);
    pages.ImageViewerSource = ImageViewerSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Input+Reference+Set+Selector relevant section in reference guide}
     */
    var InputReferenceSetSelector = (function (_super) {
        __extends(InputReferenceSetSelector, _super);
        function InputReferenceSetSelector(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new InputReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createInputReferenceSetSelector()'");
        }
        /*
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InputReferenceSetSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, InputReferenceSetSelector);
        };
        InputReferenceSetSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        InputReferenceSetSelector.typeName = "Pages$InputReferenceSetSelector";
        InputReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return InputReferenceSetSelector;
    })(AssociationWidget);
    pages.InputReferenceSetSelector = InputReferenceSetSelector;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Label relevant section in reference guide}
     */
    var Label = (function (_super) {
        __extends(Label, _super);
        function Label(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(Label, this, "caption", null, true);
            if (arguments.length < 4)
                throw new Error("new Label() cannot be invoked directly, please use 'model.pages.createLabel()'");
        }
        Object.defineProperty(Label.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Label instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Label.create = function (model) {
            return internal.instancehelpers.createElement(model, Label);
        };
        Label.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Label";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        Label.typeName = "Pages$Label";
        Label.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return Label;
    })(ConditionallyVisibleWidget);
    pages.Label = Label;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout relevant section in reference guide}
     */
    var Layout = (function (_super) {
        __extends(Layout, _super);
        function Layout(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__widget = new internal.PartProperty(Layout, this, "widget", null, false);
            this.__layoutCall = new internal.PartProperty(Layout, this, "layoutCall", null, true);
            this.__layoutType = new internal.EnumProperty(Layout, this, "layoutType", LayoutType.Legacy, LayoutType);
            this.__mainPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "mainPlaceholder", null, "Pages$LayoutParameter");
            this.__acceptButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "acceptButtonPlaceholder", null, "Pages$LayoutParameter");
            this.__cancelButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, this, "cancelButtonPlaceholder", null, "Pages$LayoutParameter");
            this.__useMainPlaceholderForPopups = new internal.PrimitiveProperty(Layout, this, "useMainPlaceholderForPopups", false, internal.PrimitiveTypeEnum.Boolean);
            this.__class = new internal.PrimitiveProperty(Layout, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(Layout, this, "style", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(Layout.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "layoutCall", {
            get: function () { return this.__layoutCall.get(); },
            set: function (newValue) { this.__layoutCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "layoutType", {
            get: function () { return this.__layoutType.get(); },
            set: function (newValue) { this.__layoutType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "mainPlaceholder", {
            get: function () { return this.__mainPlaceholder.get(); },
            set: function (newValue) { this.__mainPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "mainPlaceholderQualifiedName", {
            get: function () { return this.__mainPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "acceptButtonPlaceholder", {
            get: function () { return this.__acceptButtonPlaceholder.get(); },
            set: function (newValue) { this.__acceptButtonPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "acceptButtonPlaceholderQualifiedName", {
            get: function () { return this.__acceptButtonPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "cancelButtonPlaceholder", {
            get: function () { return this.__cancelButtonPlaceholder.get(); },
            set: function (newValue) { this.__cancelButtonPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "cancelButtonPlaceholderQualifiedName", {
            get: function () { return this.__cancelButtonPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "useMainPlaceholderForPopups", {
            get: function () { return this.__useMainPlaceholderForPopups.get(); },
            set: function (newValue) { this.__useMainPlaceholderForPopups.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Layout.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Layout);
        };
        Layout.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.layoutCall = LayoutCall.create(this.model);
            this.layoutType = LayoutType.Legacy;
        };
        Layout.typeName = "Pages$Layout";
        Layout.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "layoutCall": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Layout;
    })(FormBase);
    pages.Layout = Layout;
    var LayoutCall = (function (_super) {
        __extends(LayoutCall, _super);
        function LayoutCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__layout = new internal.ByNameReferenceProperty(LayoutCall, this, "layout", null, "Pages$Layout");
            this.__arguments = new internal.PartListProperty(LayoutCall, this, "arguments", []);
            if (arguments.length < 4)
                throw new Error("new LayoutCall() cannot be invoked directly, please use 'model.pages.createLayoutCall()'");
        }
        Object.defineProperty(LayoutCall.prototype, "layout", {
            get: function () { return this.__layout.get(); },
            set: function (newValue) { this.__layout.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "layoutQualifiedName", {
            get: function () { return this.__layout.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "arguments", {
            get: function () { return this.__arguments.get(); },
            set: function (newValue) { this.__arguments.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutCall.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutCall);
        };
        LayoutCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LayoutCall.typeName = "Pages$LayoutCall";
        LayoutCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LayoutCall;
    })(internal.Element);
    pages.LayoutCall = LayoutCall;
    var LayoutCallArgument = (function (_super) {
        __extends(LayoutCallArgument, _super);
        function LayoutCallArgument(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterName = new internal.PrimitiveProperty(LayoutCallArgument, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            this.__widget = new internal.PartProperty(LayoutCallArgument, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new LayoutCallArgument() cannot be invoked directly, please use 'model.pages.createLayoutCallArgument()'");
        }
        Object.defineProperty(LayoutCallArgument.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCallArgument.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * The new LayoutCallArgument will be automatically stored in the 'arguments' property of the parent LayoutCall element passed as argument.
         */
        LayoutCallArgument.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutCallArgument, "arguments", true);
        };
        /*
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutCallArgument.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutCallArgument);
        };
        LayoutCallArgument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LayoutCallArgument.typeName = "Pages$LayoutCallArgument";
        LayoutCallArgument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LayoutCallArgument;
    })(internal.Element);
    pages.LayoutCallArgument = LayoutCallArgument;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Layout+Grid relevant section in reference guide}
     */
    var LayoutGrid = (function (_super) {
        __extends(LayoutGrid, _super);
        function LayoutGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__width = new internal.EnumProperty(LayoutGrid, this, "width", ContainerWidth.FullWidth, ContainerWidth);
            this.__rows = new internal.PartListProperty(LayoutGrid, this, "rows", []);
            if (arguments.length < 4)
                throw new Error("new LayoutGrid() cannot be invoked directly, please use 'model.pages.createLayoutGrid()'");
        }
        Object.defineProperty(LayoutGrid.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "rows", {
            get: function () { return this.__rows.get(); },
            set: function (newValue) { this.__rows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGrid);
        };
        LayoutGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.width = ContainerWidth.FullWidth;
            this.rows.replace([LayoutGridRow.create(this.model)]);
        };
        LayoutGrid.typeName = "Pages$LayoutGrid";
        LayoutGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LayoutGrid;
    })(ConditionallyVisibleWidget);
    pages.LayoutGrid = LayoutGrid;
    var LayoutGridColumn = (function (_super) {
        __extends(LayoutGridColumn, _super);
        function LayoutGridColumn(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__weight = new internal.PrimitiveProperty(LayoutGridColumn, this, "weight", 0, internal.PrimitiveTypeEnum.Integer);
            this.__widget = new internal.PartProperty(LayoutGridColumn, this, "widget", null, false);
            this.__class = new internal.PrimitiveProperty(LayoutGridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(LayoutGridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new LayoutGridColumn() cannot be invoked directly, please use 'model.pages.createLayoutGridColumn()'");
        }
        Object.defineProperty(LayoutGridColumn.prototype, "weight", {
            get: function () { return this.__weight.get(); },
            set: function (newValue) { this.__weight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * The new LayoutGridColumn will be automatically stored in the 'columns' property of the parent LayoutGridRow element passed as argument.
         */
        LayoutGridColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGridColumn, "columns", true);
        };
        /*
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGridColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGridColumn);
        };
        LayoutGridColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.weight = 1;
        };
        LayoutGridColumn.typeName = "Pages$LayoutGridColumn";
        LayoutGridColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LayoutGridColumn;
    })(internal.Element);
    pages.LayoutGridColumn = LayoutGridColumn;
    var LayoutGridRow = (function (_super) {
        __extends(LayoutGridRow, _super);
        function LayoutGridRow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__columns = new internal.PartListProperty(LayoutGridRow, this, "columns", []);
            this.__conditionalVisibilitySettings = new internal.PartProperty(LayoutGridRow, this, "conditionalVisibilitySettings", null, false);
            this.__class = new internal.PrimitiveProperty(LayoutGridRow, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(LayoutGridRow, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new LayoutGridRow() cannot be invoked directly, please use 'model.pages.createLayoutGridRow()'");
        }
        Object.defineProperty(LayoutGridRow.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * The new LayoutGridRow will be automatically stored in the 'rows' property of the parent LayoutGrid element passed as argument.
         */
        LayoutGridRow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGridRow, "rows", true);
        };
        /*
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGridRow.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGridRow);
        };
        LayoutGridRow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (layoutGridColumn) {
                    layoutGridColumn.weight = 12;
                    return layoutGridColumn;
                })(LayoutGridColumn.create(this.model))]);
        };
        LayoutGridRow.typeName = "Pages$LayoutGridRow";
        LayoutGridRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LayoutGridRow;
    })(internal.Element);
    pages.LayoutGridRow = LayoutGridRow;
    var LayoutParameter = (function (_super) {
        __extends(LayoutParameter, _super);
        function LayoutParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(LayoutParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new LayoutParameter() cannot be invoked directly, please use 'model.pages.createLayoutParameter()'");
        }
        Object.defineProperty(LayoutParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        LayoutParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LayoutParameter.typeName = "Pages$LayoutParameter";
        LayoutParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return LayoutParameter;
    })(internal.Element);
    pages.LayoutParameter = LayoutParameter;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Link+Button relevant section in reference guide}
     */
    var LinkButton = (function (_super) {
        __extends(LinkButton, _super);
        function LinkButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__linkType = new internal.EnumProperty(LinkButton, this, "linkType", LinkType.Web, LinkType);
            this.__address = new internal.PartProperty(LinkButton, this, "address", null, true);
            if (arguments.length < 4)
                throw new Error("new LinkButton() cannot be invoked directly, please use 'model.pages.createLinkButton()'");
        }
        Object.defineProperty(LinkButton.prototype, "linkType", {
            get: function () { return this.__linkType.get(); },
            set: function (newValue) { this.__linkType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "address", {
            get: function () { return this.__address.get(); },
            set: function (newValue) { this.__address.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LinkButton.create = function (model) {
            return internal.instancehelpers.createElement(model, LinkButton);
        };
        LinkButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.linkType = LinkType.Web;
            this.address = (function (staticOrDynamicString) {
                staticOrDynamicString.value = "http://www.mendix.com/";
                return staticOrDynamicString;
            })(StaticOrDynamicString.create(this.model));
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Link";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Koppeling";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        LinkButton.typeName = "Pages$LinkButton";
        LinkButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "address": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return LinkButton;
    })(Button);
    pages.LinkButton = LinkButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/List+View relevant section in reference guide}
     */
    var ListView = (function (_super) {
        __extends(ListView, _super);
        function ListView(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(ListView, this, "widget", null, false);
            this.__pageSize = new internal.PrimitiveProperty(ListView, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            this.__clickAction = new internal.PartProperty(ListView, this, "clickAction", null, true);
            this.__editable = new internal.PrimitiveProperty(ListView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__templates = new internal.PartListProperty(ListView, this, "templates", []);
            if (arguments.length < 4)
                throw new Error("new ListView() cannot be invoked directly, please use 'model.pages.createListView()'");
        }
        Object.defineProperty(ListView.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "clickAction", {
            get: function () { return this.__clickAction.get(); },
            set: function (newValue) { this.__clickAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "templates", {
            get: function () { return this.__templates.get(); },
            set: function (newValue) { this.__templates.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListView.create = function (model) {
            return internal.instancehelpers.createElement(model, ListView);
        };
        ListView.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSize = 10;
            this.clickAction = NoClientAction.create(this.model);
            this.dataSource = ListViewXPathSource.create(this.model);
        };
        ListView.typeName = "Pages$ListView";
        ListView.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "clickAction": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ListView;
    })(ListenTargetWidget);
    pages.ListView = ListView;
    var ListViewDatabaseSource = (function (_super) {
        __extends(ListViewDatabaseSource, _super);
        function ListViewDatabaseSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__search = new internal.PartProperty(ListViewDatabaseSource, this, "search", null, false);
            if (arguments.length < 4)
                throw new Error("new ListViewDatabaseSource() cannot be invoked directly, please use 'model.pages.createListViewDatabaseSource()'");
        }
        Object.defineProperty(ListViewDatabaseSource.prototype, "search", {
            get: function () { return this.__search.get(); },
            set: function (newValue) { this.__search.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        ListViewDatabaseSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewDatabaseSource, "dataSource", false);
        };
        /*
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewDatabaseSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewDatabaseSource);
        };
        ListViewDatabaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListViewDatabaseSource.typeName = "Pages$ListViewDatabaseSource";
        ListViewDatabaseSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListViewDatabaseSource;
    })(DatabaseSourceBase);
    pages.ListViewDatabaseSource = ListViewDatabaseSource;
    var ListViewSearch = (function (_super) {
        __extends(ListViewSearch, _super);
        function ListViewSearch(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__searchPaths = new internal.PrimitiveListProperty(ListViewSearch, this, "searchPaths", [], internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ListViewSearch() cannot be invoked directly, please use 'model.pages.createListViewSearch()'");
        }
        Object.defineProperty(ListViewSearch.prototype, "searchPaths", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__searchPaths.get(); },
            set: function (newValue) { this.__searchPaths.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewSearch.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewSearch);
        };
        ListViewSearch.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListViewSearch.typeName = "Pages$ListViewSearch";
        ListViewSearch.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListViewSearch;
    })(internal.Element);
    pages.ListViewSearch = ListViewSearch;
    var ListViewTemplate = (function (_super) {
        __extends(ListViewTemplate, _super);
        function ListViewTemplate(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__specialization = new internal.ByNameReferenceProperty(ListViewTemplate, this, "specialization", null, "DomainModels$Entity");
            this.__widget = new internal.PartProperty(ListViewTemplate, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new ListViewTemplate() cannot be invoked directly, please use 'model.pages.createListViewTemplate()'");
        }
        Object.defineProperty(ListViewTemplate.prototype, "specialization", {
            get: function () { return this.__specialization.get(); },
            set: function (newValue) { this.__specialization.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewTemplate.prototype, "specializationQualifiedName", {
            get: function () { return this.__specialization.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewTemplate.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * The new ListViewTemplate will be automatically stored in the 'templates' property of the parent ListView element passed as argument.
         */
        ListViewTemplate.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewTemplate, "templates", true);
        };
        /*
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewTemplate);
        };
        ListViewTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListViewTemplate.typeName = "Pages$ListViewTemplate";
        ListViewTemplate.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "specialization": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ListViewTemplate;
    })(internal.Element);
    pages.ListViewTemplate = ListViewTemplate;
    var ListViewXPathSource = (function (_super) {
        __extends(ListViewXPathSource, _super);
        function ListViewXPathSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__search = new internal.PartProperty(ListViewXPathSource, this, "search", null, false);
            this.__xPathConstraint = new internal.PrimitiveProperty(ListViewXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ListViewXPathSource() cannot be invoked directly, please use 'model.pages.createListViewXPathSource()'");
        }
        Object.defineProperty(ListViewXPathSource.prototype, "search", {
            get: function () { return this.__search.get(); },
            set: function (newValue) { this.__search.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        ListViewXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewXPathSource, "dataSource", false);
        };
        /*
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewXPathSource);
        };
        ListViewXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListViewXPathSource.typeName = "Pages$ListViewXPathSource";
        ListViewXPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListViewXPathSource;
    })(SortableEntityPathSource);
    pages.ListViewXPathSource = ListViewXPathSource;
    var ListenTargetSource = (function (_super) {
        __extends(ListenTargetSource, _super);
        function ListenTargetSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__listenTarget = new internal.PrimitiveProperty(ListenTargetSource, this, "listenTarget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ListenTargetSource() cannot be invoked directly, please use 'model.pages.createListenTargetSource()'");
        }
        Object.defineProperty(ListenTargetSource.prototype, "listenTarget", {
            get: function () { return this.__listenTarget.get(); },
            set: function (newValue) { this.__listenTarget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        ListenTargetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListenTargetSource, "dataSource", false);
        };
        /*
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListenTargetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListenTargetSource);
        };
        ListenTargetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ListenTargetSource.typeName = "Pages$ListenTargetSource";
        ListenTargetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ListenTargetSource;
    })(DataSource);
    pages.ListenTargetSource = ListenTargetSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sign+Out+Button relevant section in reference guide}
     */
    var LogoutButton = (function (_super) {
        __extends(LogoutButton, _super);
        function LogoutButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new LogoutButton() cannot be invoked directly, please use 'model.pages.createLogoutButton()'");
        }
        /*
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LogoutButton.create = function (model) {
            return internal.instancehelpers.createElement(model, LogoutButton);
        };
        LogoutButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Sign out";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Afmelden";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        LogoutButton.typeName = "Pages$LogoutButton";
        LogoutButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return LogoutButton;
    })(Button);
    pages.LogoutButton = LogoutButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MenuWidget = (function (_super) {
        __extends(MenuWidget, _super);
        function MenuWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__menuSource = new internal.PartProperty(MenuWidget, this, "menuSource", null, true);
            if (arguments.length < 4)
                throw new Error("new MenuWidget() cannot be invoked directly, please use 'model.pages.createMenuWidget()'");
        }
        Object.defineProperty(MenuWidget.prototype, "menuSource", {
            get: function () { return this.__menuSource.get(); },
            set: function (newValue) { this.__menuSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MenuWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.menuSource = NavigationSource.create(this.model);
        };
        MenuWidget.typeName = "Pages$MenuWidget";
        MenuWidget.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "menuSource": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return MenuWidget;
    })(Widget);
    pages.MenuWidget = MenuWidget;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Menu+Bar relevant section in reference guide}
     */
    var MenuBar = (function (_super) {
        __extends(MenuBar, _super);
        function MenuBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new MenuBar() cannot be invoked directly, please use 'model.pages.createMenuBar()'");
        }
        /*
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuBar.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuBar);
        };
        MenuBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MenuBar.typeName = "Pages$MenuBar";
        MenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MenuBar;
    })(MenuWidget);
    pages.MenuBar = MenuBar;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MenuSource = (function (_super) {
        __extends(MenuSource, _super);
        function MenuSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new MenuSource() cannot be invoked directly, please use 'model.pages.createMenuSource()'");
        }
        MenuSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MenuSource.typeName = "Pages$MenuSource";
        MenuSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MenuSource;
    })(internal.Element);
    pages.MenuSource = MenuSource;
    var MenuDocumentSource = (function (_super) {
        __extends(MenuDocumentSource, _super);
        function MenuDocumentSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__menu = new internal.ByNameReferenceProperty(MenuDocumentSource, this, "menu", null, "Menus$MenuDocument");
            if (arguments.length < 4)
                throw new Error("new MenuDocumentSource() cannot be invoked directly, please use 'model.pages.createMenuDocumentSource()'");
        }
        Object.defineProperty(MenuDocumentSource.prototype, "menu", {
            get: function () { return this.__menu.get(); },
            set: function (newValue) { this.__menu.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuDocumentSource.prototype, "menuQualifiedName", {
            get: function () { return this.__menu.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * The new MenuDocumentSource will be automatically stored in the 'menuSource' property of the parent MenuWidget element passed as argument.
         */
        MenuDocumentSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MenuDocumentSource, "menuSource", false);
        };
        /*
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuDocumentSource.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuDocumentSource);
        };
        MenuDocumentSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        MenuDocumentSource.typeName = "Pages$MenuDocumentSource";
        MenuDocumentSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MenuDocumentSource;
    })(MenuSource);
    pages.MenuDocumentSource = MenuDocumentSource;
    var MicroflowClientAction = (function (_super) {
        __extends(MicroflowClientAction, _super);
        function MicroflowClientAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflowSettings = new internal.PartProperty(MicroflowClientAction, this, "microflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new MicroflowClientAction() cannot be invoked directly, please use 'model.pages.createMicroflowClientAction()'");
        }
        Object.defineProperty(MicroflowClientAction.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowClientAction);
        };
        MicroflowClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        MicroflowClientAction.typeName = "Pages$MicroflowClientAction";
        MicroflowClientAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "microflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return MicroflowClientAction;
    })(ClientAction);
    pages.MicroflowClientAction = MicroflowClientAction;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Starting+Microflows relevant section in reference guide}
     */
    var MicroflowSettings = (function (_super) {
        __extends(MicroflowSettings, _super);
        function MicroflowSettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflow = new internal.ByNameReferenceProperty(MicroflowSettings, this, "microflow", null, "Microflows$Microflow");
            this.__useAllPages = new internal.PrimitiveProperty(MicroflowSettings, this, "useAllPages", false, internal.PrimitiveTypeEnum.Boolean);
            this.__progressBar = new internal.EnumProperty(MicroflowSettings, this, "progressBar", ProgressBarType.None, ProgressBarType);
            this.__progressMessage = new internal.PartProperty(MicroflowSettings, this, "progressMessage", null, false);
            this.__asynchronous = new internal.PrimitiveProperty(MicroflowSettings, this, "asynchronous", false, internal.PrimitiveTypeEnum.Boolean);
            this.__formValidations = new internal.EnumProperty(MicroflowSettings, this, "formValidations", FormValidations.All, FormValidations);
            this.__confirmationInfo = new internal.PartProperty(MicroflowSettings, this, "confirmationInfo", null, false);
            if (arguments.length < 4)
                throw new Error("new MicroflowSettings() cannot be invoked directly, please use 'model.pages.createMicroflowSettings()'");
        }
        Object.defineProperty(MicroflowSettings.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "useAllPages", {
            get: function () { return this.__useAllPages.get(); },
            set: function (newValue) { this.__useAllPages.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "progressBar", {
            get: function () { return this.__progressBar.get(); },
            set: function (newValue) { this.__progressBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "progressMessage", {
            get: function () { return this.__progressMessage.get(); },
            set: function (newValue) { this.__progressMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "asynchronous", {
            get: function () { return this.__asynchronous.get(); },
            set: function (newValue) { this.__asynchronous.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "formValidations", {
            get: function () { return this.__formValidations.get(); },
            set: function (newValue) { this.__formValidations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "confirmationInfo", {
            get: function () { return this.__confirmationInfo.get(); },
            set: function (newValue) { this.__confirmationInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowSettings);
        };
        MicroflowSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.progressBar = ProgressBarType.None;
            this.formValidations = FormValidations.All;
        };
        MicroflowSettings.typeName = "Pages$MicroflowSettings";
        MicroflowSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return MicroflowSettings;
    })(internal.Element);
    pages.MicroflowSettings = MicroflowSettings;
    var MicroflowSource = (function (_super) {
        __extends(MicroflowSource, _super);
        function MicroflowSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflowSettings = new internal.PartProperty(MicroflowSource, this, "microflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new MicroflowSource() cannot be invoked directly, please use 'model.pages.createMicroflowSource()'");
        }
        Object.defineProperty(MicroflowSource.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        MicroflowSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSource, "dataSource", false);
        };
        /*
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowSource.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowSource);
        };
        MicroflowSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        MicroflowSource.typeName = "Pages$MicroflowSource";
        MicroflowSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "microflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return MicroflowSource;
    })(DataSource);
    pages.MicroflowSource = MicroflowSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+List relevant section in reference guide}
     */
    var NavigationList = (function (_super) {
        __extends(NavigationList, _super);
        function NavigationList(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__items = new internal.PartListProperty(NavigationList, this, "items", []);
            if (arguments.length < 4)
                throw new Error("new NavigationList() cannot be invoked directly, please use 'model.pages.createNavigationList()'");
        }
        Object.defineProperty(NavigationList.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationList.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationList);
        };
        NavigationList.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.items.replace([NavigationListItem.create(this.model), NavigationListItem.create(this.model), NavigationListItem.create(this.model)]);
        };
        NavigationList.typeName = "Pages$NavigationList";
        NavigationList.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NavigationList;
    })(ConditionallyVisibleWidget);
    pages.NavigationList = NavigationList;
    var NavigationListItem = (function (_super) {
        __extends(NavigationListItem, _super);
        function NavigationListItem(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(NavigationListItem, this, "widget", null, false);
            this.__class = new internal.PrimitiveProperty(NavigationListItem, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(NavigationListItem, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__conditionalVisibilitySettings = new internal.PartProperty(NavigationListItem, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4)
                throw new Error("new NavigationListItem() cannot be invoked directly, please use 'model.pages.createNavigationListItem()'");
        }
        Object.defineProperty(NavigationListItem.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * The new NavigationListItem will be automatically stored in the 'items' property of the parent NavigationList element passed as argument.
         */
        NavigationListItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NavigationListItem, "items", true);
        };
        /*
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationListItem.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationListItem);
        };
        NavigationListItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NavigationListItem.typeName = "Pages$NavigationListItem";
        NavigationListItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NavigationListItem;
    })(ActionItem);
    pages.NavigationListItem = NavigationListItem;
    var NavigationSource = (function (_super) {
        __extends(NavigationSource, _super);
        function NavigationSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__profileType = new internal.EnumProperty(NavigationSource, this, "profileType", navigation_1.navigation.ProfileType.Desktop, navigation_1.navigation.ProfileType);
            if (arguments.length < 4)
                throw new Error("new NavigationSource() cannot be invoked directly, please use 'model.pages.createNavigationSource()'");
        }
        Object.defineProperty(NavigationSource.prototype, "profileType", {
            get: function () { return this.__profileType.get(); },
            set: function (newValue) { this.__profileType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * The new NavigationSource will be automatically stored in the 'menuSource' property of the parent MenuWidget element passed as argument.
         */
        NavigationSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NavigationSource, "menuSource", false);
        };
        /*
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationSource.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationSource);
        };
        NavigationSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.profileType = navigation_1.navigation.ProfileType.Desktop;
        };
        NavigationSource.typeName = "Pages$NavigationSource";
        NavigationSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NavigationSource;
    })(MenuSource);
    pages.NavigationSource = NavigationSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Navigation+Tree relevant section in reference guide}
     */
    var NavigationTree = (function (_super) {
        __extends(NavigationTree, _super);
        function NavigationTree(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new NavigationTree() cannot be invoked directly, please use 'model.pages.createNavigationTree()'");
        }
        /*
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationTree.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationTree);
        };
        NavigationTree.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NavigationTree.typeName = "Pages$NavigationTree";
        NavigationTree.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NavigationTree;
    })(MenuWidget);
    pages.NavigationTree = NavigationTree;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/New+Button relevant section in reference guide}
     */
    var NewButton = (function (_super) {
        __extends(NewButton, _super);
        function NewButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(NewButton, this, "entity", null, "DomainModels$Entity");
            this.__pageSettings = new internal.PartProperty(NewButton, this, "pageSettings", null, false);
            if (arguments.length < 4)
                throw new Error("new NewButton() cannot be invoked directly, please use 'model.pages.createNewButton()'");
        }
        Object.defineProperty(NewButton.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NewButton.create = function (model) {
            return internal.instancehelpers.createElement(model, NewButton);
        };
        NewButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "New";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Nieuw";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        NewButton.typeName = "Pages$NewButton";
        NewButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NewButton;
    })(Button);
    pages.NewButton = NewButton;
    var NoClientAction = (function (_super) {
        __extends(NoClientAction, _super);
        function NoClientAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new NoClientAction() cannot be invoked directly, please use 'model.pages.createNoClientAction()'");
        }
        /*
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, NoClientAction);
        };
        NoClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NoClientAction.typeName = "Pages$NoClientAction";
        NoClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NoClientAction;
    })(ClientAction);
    pages.NoClientAction = NoClientAction;
    var OfflineSchema = (function (_super) {
        __extends(OfflineSchema, _super);
        function OfflineSchema(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__role = new internal.ByNameReferenceProperty(OfflineSchema, this, "role", null, "Security$UserRole");
            if (arguments.length < 4)
                throw new Error("new OfflineSchema() cannot be invoked directly, please use 'model.pages.createOfflineSchema()'");
        }
        Object.defineProperty(OfflineSchema.prototype, "role", {
            get: function () { return this.__role.get(); },
            set: function (newValue) { this.__role.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineSchema.prototype, "roleQualifiedName", {
            get: function () { return this.__role.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new OfflineSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OfflineSchema.create = function (model) {
            return internal.instancehelpers.createElement(model, OfflineSchema);
        };
        OfflineSchema.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OfflineSchema.typeName = "Pages$OfflineSchema";
        OfflineSchema.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OfflineSchema;
    })(internal.Element);
    pages.OfflineSchema = OfflineSchema;
    var OfflineSchemaFetchInstruction = (function (_super) {
        __extends(OfflineSchemaFetchInstruction, _super);
        function OfflineSchemaFetchInstruction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__tableName = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, this, "tableName", "", internal.PrimitiveTypeEnum.String);
            this.__xPath = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, this, "xPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new OfflineSchemaFetchInstruction() cannot be invoked directly, please use 'model.pages.createOfflineSchemaFetchInstruction()'");
        }
        Object.defineProperty(OfflineSchemaFetchInstruction.prototype, "tableName", {
            get: function () { return this.__tableName.get(); },
            set: function (newValue) { this.__tableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineSchemaFetchInstruction.prototype, "xPath", {
            get: function () { return this.__xPath.get(); },
            set: function (newValue) { this.__xPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OfflineSchemaFetchInstruction.create = function (model) {
            return internal.instancehelpers.createElement(model, OfflineSchemaFetchInstruction);
        };
        OfflineSchemaFetchInstruction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OfflineSchemaFetchInstruction.typeName = "Pages$OfflineSchemaFetchInstruction";
        OfflineSchemaFetchInstruction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OfflineSchemaFetchInstruction;
    })(internal.Element);
    pages.OfflineSchemaFetchInstruction = OfflineSchemaFetchInstruction;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var OnClickBehavior = (function (_super) {
        __extends(OnClickBehavior, _super);
        function OnClickBehavior(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new OnClickBehavior() cannot be invoked directly, please use 'model.pages.createOnClickBehavior()'");
        }
        OnClickBehavior.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OnClickBehavior.typeName = "Pages$OnClickBehavior";
        OnClickBehavior.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OnClickBehavior;
    })(internal.Element);
    pages.OnClickBehavior = OnClickBehavior;
    var OnClickEnlarge = (function (_super) {
        __extends(OnClickEnlarge, _super);
        function OnClickEnlarge(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new OnClickEnlarge() cannot be invoked directly, please use 'model.pages.createOnClickEnlarge()'");
        }
        /*
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property of the parent DynamicImageViewer element passed as argument.
         */
        OnClickEnlarge.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickEnlarge, "onClickBehavior", false);
        };
        /*
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickEnlarge.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickEnlarge);
        };
        OnClickEnlarge.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OnClickEnlarge.typeName = "Pages$OnClickEnlarge";
        OnClickEnlarge.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OnClickEnlarge;
    })(OnClickBehavior);
    pages.OnClickEnlarge = OnClickEnlarge;
    var OnClickMicroflow = (function (_super) {
        __extends(OnClickMicroflow, _super);
        function OnClickMicroflow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__microflowSettings = new internal.PartProperty(OnClickMicroflow, this, "microflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new OnClickMicroflow() cannot be invoked directly, please use 'model.pages.createOnClickMicroflow()'");
        }
        Object.defineProperty(OnClickMicroflow.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property of the parent DynamicImageViewer element passed as argument.
         */
        OnClickMicroflow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickMicroflow, "onClickBehavior", false);
        };
        /*
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickMicroflow.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickMicroflow);
        };
        OnClickMicroflow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        OnClickMicroflow.typeName = "Pages$OnClickMicroflow";
        OnClickMicroflow.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "microflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return OnClickMicroflow;
    })(OnClickBehavior);
    pages.OnClickMicroflow = OnClickMicroflow;
    var OnClickNothing = (function (_super) {
        __extends(OnClickNothing, _super);
        function OnClickNothing(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new OnClickNothing() cannot be invoked directly, please use 'model.pages.createOnClickNothing()'");
        }
        /*
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property of the parent DynamicImageViewer element passed as argument.
         */
        OnClickNothing.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickNothing, "onClickBehavior", false);
        };
        /*
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickNothing.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickNothing);
        };
        OnClickNothing.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OnClickNothing.typeName = "Pages$OnClickNothing";
        OnClickNothing.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OnClickNothing;
    })(OnClickBehavior);
    pages.OnClickNothing = OnClickNothing;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page relevant section in reference guide}
     */
    var Page = (function (_super) {
        __extends(Page, _super);
        function Page(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__layoutCall = new internal.PartProperty(Page, this, "layoutCall", null, true);
            this.__title = new internal.PartProperty(Page, this, "title", null, true);
            this.__class = new internal.PrimitiveProperty(Page, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(Page, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__allowedRoles = new internal.ByNameReferenceListProperty(Page, this, "allowedRoles", [], "Security$ModuleRole");
            this.__popupWidth = new internal.PrimitiveProperty(Page, this, "popupWidth", 0, internal.PrimitiveTypeEnum.Integer);
            this.__popupHeight = new internal.PrimitiveProperty(Page, this, "popupHeight", 0, internal.PrimitiveTypeEnum.Integer);
            this.__popupResizable = new internal.PrimitiveProperty(Page, this, "popupResizable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__markAsUsed = new internal.PrimitiveProperty(Page, this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
            this._containmentName = "documents";
        }
        Object.defineProperty(Page.prototype, "layoutCall", {
            get: function () { return this.__layoutCall.get(); },
            set: function (newValue) { this.__layoutCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "title", {
            get: function () { return this.__title.get(); },
            set: function (newValue) { this.__title.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "allowedRoles", {
            get: function () { return this.__allowedRoles.get(); },
            set: function (newValue) { this.__allowedRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "allowedRolesQualifiedNames", {
            get: function () { return this.__allowedRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupWidth", {
            get: function () { return this.__popupWidth.get(); },
            set: function (newValue) { this.__popupWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupHeight", {
            get: function () { return this.__popupHeight.get(); },
            set: function (newValue) { this.__popupHeight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupResizable", {
            get: function () { return this.__popupResizable.get(); },
            set: function (newValue) { this.__popupResizable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "markAsUsed", {
            get: function () { return this.__markAsUsed.get(); },
            set: function (newValue) { this.__markAsUsed.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Page.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Page);
        };
        Page.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.layoutCall = LayoutCall.create(this.model);
            this.title = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Page Title";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.popupResizable = true;
        };
        Page.typeName = "Pages$Page";
        Page.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "layoutCall": {
                    "required": {
                        "currentValue": true
                    }
                },
                "title": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Page;
    })(FormBase);
    pages.Page = Page;
    var PageClientAction = (function (_super) {
        __extends(PageClientAction, _super);
        function PageClientAction(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__pageSettings = new internal.PartProperty(PageClientAction, this, "pageSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new PageClientAction() cannot be invoked directly, please use 'model.pages.createPageClientAction()'");
        }
        Object.defineProperty(PageClientAction.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, PageClientAction);
        };
        PageClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
        };
        PageClientAction.typeName = "Pages$PageClientAction";
        PageClientAction.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return PageClientAction;
    })(ClientAction);
    pages.PageClientAction = PageClientAction;
    var PageForSpecialization = (function (_super) {
        __extends(PageForSpecialization, _super);
        function PageForSpecialization(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__entity = new internal.ByNameReferenceProperty(PageForSpecialization, this, "entity", null, "DomainModels$Entity");
            this.__pageSettings = new internal.PartProperty(PageForSpecialization, this, "pageSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new PageForSpecialization() cannot be invoked directly, please use 'model.pages.createPageForSpecialization()'");
        }
        Object.defineProperty(PageForSpecialization.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageForSpecialization.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageForSpecialization.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property of the parent GridEditButton element passed as argument.
         */
        PageForSpecialization.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PageForSpecialization, "pagesForSpecializations", true);
        };
        /*
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageForSpecialization.create = function (model) {
            return internal.instancehelpers.createElement(model, PageForSpecialization);
        };
        PageForSpecialization.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
        };
        PageForSpecialization.typeName = "Pages$PageForSpecialization";
        PageForSpecialization.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "entity": {
                    "required": {
                        "currentValue": true
                    }
                },
                "pageSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return PageForSpecialization;
    })(internal.Element);
    pages.PageForSpecialization = PageForSpecialization;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Opening+Pages relevant section in reference guide}
     */
    var PageSettings = (function (_super) {
        __extends(PageSettings, _super);
        function PageSettings(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__page = new internal.ByNameReferenceProperty(PageSettings, this, "page", null, "Pages$Page");
            this.__formTitle = new internal.PartProperty(PageSettings, this, "formTitle", null, false);
            this.__location = new internal.EnumProperty(PageSettings, this, "location", FormLocation.Popup, FormLocation);
            if (arguments.length < 4)
                throw new Error("new PageSettings() cannot be invoked directly, please use 'model.pages.createPageSettings()'");
        }
        Object.defineProperty(PageSettings.prototype, "page", {
            get: function () { return this.__page.get(); },
            set: function (newValue) { this.__page.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "pageQualifiedName", {
            get: function () { return this.__page.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "formTitle", {
            get: function () { return this.__formTitle.get(); },
            set: function (newValue) { this.__formTitle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, PageSettings);
        };
        PageSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.location = FormLocation.Popup;
        };
        PageSettings.typeName = "Pages$PageSettings";
        PageSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return PageSettings;
    })(internal.Element);
    pages.PageSettings = PageSettings;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Placeholder relevant section in reference guide}
     */
    var Placeholder = (function (_super) {
        __extends(Placeholder, _super);
        function Placeholder(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Placeholder() cannot be invoked directly, please use 'model.pages.createPlaceholder()'");
        }
        /*
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Placeholder.create = function (model) {
            return internal.instancehelpers.createElement(model, Placeholder);
        };
        Placeholder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Placeholder.typeName = "Pages$Placeholder";
        Placeholder.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Placeholder;
    })(Widget);
    pages.Placeholder = Placeholder;
    var RadioButtonGroup = (function (_super) {
        __extends(RadioButtonGroup, _super);
        function RadioButtonGroup(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__renderHorizontal = new internal.PrimitiveProperty(RadioButtonGroup, this, "renderHorizontal", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new RadioButtonGroup() cannot be invoked directly, please use 'model.pages.createRadioButtonGroup()'");
        }
        Object.defineProperty(RadioButtonGroup.prototype, "renderHorizontal", {
            get: function () { return this.__renderHorizontal.get(); },
            set: function (newValue) { this.__renderHorizontal.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RadioButtonGroup.create = function (model) {
            return internal.instancehelpers.createElement(model, RadioButtonGroup);
        };
        RadioButtonGroup.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.renderHorizontal = true;
        };
        RadioButtonGroup.typeName = "Pages$RadioButtonGroup";
        RadioButtonGroup.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RadioButtonGroup;
    })(AttributeWidget);
    pages.RadioButtonGroup = RadioButtonGroup;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Range+Search+Field relevant section in reference guide}
     */
    var RangeSearchField = (function (_super) {
        __extends(RangeSearchField, _super);
        function RangeSearchField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__lowerBound = new internal.PrimitiveProperty(RangeSearchField, this, "lowerBound", "", internal.PrimitiveTypeEnum.String);
            this.__upperBound = new internal.PrimitiveProperty(RangeSearchField, this, "upperBound", "", internal.PrimitiveTypeEnum.String);
            this.__includeLower = new internal.PrimitiveProperty(RangeSearchField, this, "includeLower", false, internal.PrimitiveTypeEnum.Boolean);
            this.__includeUpper = new internal.PrimitiveProperty(RangeSearchField, this, "includeUpper", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new RangeSearchField() cannot be invoked directly, please use 'model.pages.createRangeSearchField()'");
        }
        Object.defineProperty(RangeSearchField.prototype, "lowerBound", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__lowerBound.get(); },
            set: function (newValue) { this.__lowerBound.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "upperBound", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__upperBound.get(); },
            set: function (newValue) { this.__upperBound.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "includeLower", {
            get: function () { return this.__includeLower.get(); },
            set: function (newValue) { this.__includeLower.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "includeUpper", {
            get: function () { return this.__includeUpper.get(); },
            set: function (newValue) { this.__includeUpper.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * The new RangeSearchField will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        RangeSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RangeSearchField, "items", true);
        };
        /*
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RangeSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, RangeSearchField);
        };
        RangeSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RangeSearchField.typeName = "Pages$RangeSearchField";
        RangeSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RangeSearchField;
    })(SearchField);
    pages.RangeSearchField = RangeSearchField;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Selector relevant section in reference guide}
     */
    var ReferenceSelector = (function (_super) {
        __extends(ReferenceSelector, _super);
        function ReferenceSelector(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__required = new internal.PrimitiveProperty(ReferenceSelector, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            this.__requiredMessage = new internal.PartProperty(ReferenceSelector, this, "requiredMessage", null, true);
            this.__renderMode = new internal.EnumProperty(ReferenceSelector, this, "renderMode", ReferenceSelectorRenderModeType.DropDown, ReferenceSelectorRenderModeType);
            this.__gotoPageSettings = new internal.PartProperty(ReferenceSelector, this, "gotoPageSettings", null, true);
            this.__formattingInfo = new internal.PartProperty(ReferenceSelector, this, "formattingInfo", null, true);
            if (arguments.length < 4)
                throw new Error("new ReferenceSelector() cannot be invoked directly, please use 'model.pages.createReferenceSelector()'");
        }
        Object.defineProperty(ReferenceSelector.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "requiredMessage", {
            get: function () { return this.__requiredMessage.get(); },
            set: function (newValue) { this.__requiredMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "renderMode", {
            get: function () { return this.__renderMode.get(); },
            set: function (newValue) { this.__renderMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "gotoPageSettings", {
            get: function () { return this.__gotoPageSettings.get(); },
            set: function (newValue) { this.__gotoPageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSelector);
        };
        ReferenceSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.requiredMessage = texts_1.texts.Text.create(this.model);
            this.renderMode = ReferenceSelectorRenderModeType.DropDown;
            this.gotoPageSettings = PageSettings.create(this.model);
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        ReferenceSelector.typeName = "Pages$ReferenceSelector";
        ReferenceSelector.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "requiredMessage": {
                    "required": {
                        "currentValue": true
                    }
                },
                "gotoPageSettings": {
                    "required": {
                        "currentValue": true
                    }
                },
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ReferenceSelector;
    })(AssociationWidget);
    pages.ReferenceSelector = ReferenceSelector;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Reference+Set+Selector relevant section in reference guide}
     */
    var ReferenceSetSelector = (function (_super) {
        __extends(ReferenceSetSelector, _super);
        function ReferenceSetSelector(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__onChangeMicroflowSettings = new internal.PartProperty(ReferenceSetSelector, this, "onChangeMicroflowSettings", null, true);
            this.__constrainedBy = new internal.PrimitiveListProperty(ReferenceSetSelector, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            this.__xPathConstraint = new internal.PrimitiveProperty(ReferenceSetSelector, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__removeAllFromContext = new internal.PrimitiveProperty(ReferenceSetSelector, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(ReferenceSetSelector, this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4)
                throw new Error("new ReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createReferenceSetSelector()'");
        }
        Object.defineProperty(ReferenceSetSelector.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "constrainedBy", {
            /**
             * The value of this property is conceptually of type Paths$EntityPath.
             */
            get: function () { return this.__constrainedBy.get(); },
            set: function (newValue) { this.__constrainedBy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeFromContextEntities", {
            get: function () { return this.__removeFromContextEntities.get(); },
            set: function (newValue) { this.__removeFromContextEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeFromContextEntitiesQualifiedNames", {
            get: function () { return this.__removeFromContextEntities.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSetSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSelector);
        };
        ReferenceSetSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            this.dataSource = ReferenceSetSource.create(this.model);
        };
        ReferenceSetSelector.typeName = "Pages$ReferenceSetSelector";
        ReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "onChangeMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ReferenceSetSelector;
    })(ColumnGrid);
    pages.ReferenceSetSelector = ReferenceSetSelector;
    var ReferenceSetSource = (function (_super) {
        __extends(ReferenceSetSource, _super);
        function ReferenceSetSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ReferenceSetSource() cannot be invoked directly, please use 'model.pages.createReferenceSetSource()'");
        }
        /*
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property of the parent EntityWidget element passed as argument.
         */
        ReferenceSetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSource, "dataSource", false);
        };
        /*
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSource);
        };
        ReferenceSetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReferenceSetSource.typeName = "Pages$ReferenceSetSource";
        ReferenceSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ReferenceSetSource;
    })(GridBaseSource);
    pages.ReferenceSetSource = ReferenceSetSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Save+Button relevant section in reference guide}
     */
    var SaveButton = (function (_super) {
        __extends(SaveButton, _super);
        function SaveButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SaveButton() cannot be invoked directly, please use 'model.pages.createSaveButton()'");
        }
        /*
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SaveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SaveButton);
        };
        SaveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        SaveButton.typeName = "Pages$SaveButton";
        SaveButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SaveButton;
    })(Button);
    pages.SaveButton = SaveButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Scroll+Container relevant section in reference guide}
     */
    var ScrollContainer = (function (_super) {
        __extends(ScrollContainer, _super);
        function ScrollContainer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__center = new internal.PartProperty(ScrollContainer, this, "center", null, true);
            this.__left = new internal.PartProperty(ScrollContainer, this, "left", null, false);
            this.__right = new internal.PartProperty(ScrollContainer, this, "right", null, false);
            this.__top = new internal.PartProperty(ScrollContainer, this, "top", null, false);
            this.__bottom = new internal.PartProperty(ScrollContainer, this, "bottom", null, false);
            this.__layoutMode = new internal.EnumProperty(ScrollContainer, this, "layoutMode", LayoutModeType.Headline, LayoutModeType);
            this.__widthMode = new internal.EnumProperty(ScrollContainer, this, "widthMode", SizeMode.Auto, SizeMode);
            this.__width = new internal.PrimitiveProperty(ScrollContainer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__alignment = new internal.EnumProperty(ScrollContainer, this, "alignment", AlignmentEnum.Center, AlignmentEnum);
            this.__scrollBehavior = new internal.EnumProperty(ScrollContainer, this, "scrollBehavior", ScrollBehavior.PerRegion, ScrollBehavior);
            if (arguments.length < 4)
                throw new Error("new ScrollContainer() cannot be invoked directly, please use 'model.pages.createScrollContainer()'");
        }
        Object.defineProperty(ScrollContainer.prototype, "center", {
            get: function () { return this.__center.get(); },
            set: function (newValue) { this.__center.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "left", {
            get: function () { return this.__left.get(); },
            set: function (newValue) { this.__left.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "right", {
            get: function () { return this.__right.get(); },
            set: function (newValue) { this.__right.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "top", {
            get: function () { return this.__top.get(); },
            set: function (newValue) { this.__top.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "bottom", {
            get: function () { return this.__bottom.get(); },
            set: function (newValue) { this.__bottom.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "layoutMode", {
            get: function () { return this.__layoutMode.get(); },
            set: function (newValue) { this.__layoutMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "widthMode", {
            get: function () { return this.__widthMode.get(); },
            set: function (newValue) { this.__widthMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "alignment", {
            get: function () { return this.__alignment.get(); },
            set: function (newValue) { this.__alignment.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "scrollBehavior", {
            get: function () { return this.__scrollBehavior.get(); },
            set: function (newValue) { this.__scrollBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ScrollContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, ScrollContainer);
        };
        ScrollContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.center = ScrollContainerRegion.create(this.model);
            this.layoutMode = LayoutModeType.Headline;
            this.widthMode = SizeMode.Auto;
            this.width = 960;
            this.alignment = AlignmentEnum.Center;
            this.scrollBehavior = ScrollBehavior.PerRegion;
        };
        ScrollContainer.typeName = "Pages$ScrollContainer";
        ScrollContainer.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "center": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ScrollContainer;
    })(Widget);
    pages.ScrollContainer = ScrollContainer;
    var ScrollContainerRegion = (function (_super) {
        __extends(ScrollContainerRegion, _super);
        function ScrollContainerRegion(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(ScrollContainerRegion, this, "widget", null, false);
            this.__sizeMode = new internal.EnumProperty(ScrollContainerRegion, this, "sizeMode", SizeMode.Auto, SizeMode);
            this.__size = new internal.PrimitiveProperty(ScrollContainerRegion, this, "size", 0, internal.PrimitiveTypeEnum.Integer);
            this.__class = new internal.PrimitiveProperty(ScrollContainerRegion, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(ScrollContainerRegion, this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ScrollContainerRegion() cannot be invoked directly, please use 'model.pages.createScrollContainerRegion()'");
        }
        Object.defineProperty(ScrollContainerRegion.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "sizeMode", {
            get: function () { return this.__sizeMode.get(); },
            set: function (newValue) { this.__sizeMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "size", {
            get: function () { return this.__size.get(); },
            set: function (newValue) { this.__size.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'center' property of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "center", false);
        };
        /*
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ScrollContainerRegion.create = function (model) {
            return internal.instancehelpers.createElement(model, ScrollContainerRegion);
        };
        ScrollContainerRegion.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sizeMode = SizeMode.Auto;
            this.size = 200;
        };
        ScrollContainerRegion.typeName = "Pages$ScrollContainerRegion";
        ScrollContainerRegion.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ScrollContainerRegion;
    })(internal.Element);
    pages.ScrollContainerRegion = ScrollContainerRegion;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Search+Bar relevant section in reference guide}
     */
    var SearchBar = (function (_super) {
        __extends(SearchBar, _super);
        function SearchBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__type = new internal.EnumProperty(SearchBar, this, "type", SearchBarTypeEnum.AlwaysOpen, SearchBarTypeEnum);
            this.__waitForSearch = new internal.PrimitiveProperty(SearchBar, this, "waitForSearch", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new SearchBar() cannot be invoked directly, please use 'model.pages.createSearchBar()'");
        }
        Object.defineProperty(SearchBar.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchBar.prototype, "waitForSearch", {
            get: function () { return this.__waitForSearch.get(); },
            set: function (newValue) { this.__waitForSearch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SearchBar.create = function (model) {
            return internal.instancehelpers.createElement(model, SearchBar);
        };
        SearchBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = SearchBarTypeEnum.AlwaysOpen;
        };
        SearchBar.typeName = "Pages$SearchBar";
        SearchBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SearchBar;
    })(ControlBar);
    pages.SearchBar = SearchBar;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Select+Button relevant section in reference guide}
     */
    var SelectButton = (function (_super) {
        __extends(SelectButton, _super);
        function SelectButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SelectButton() cannot be invoked directly, please use 'model.pages.createSelectButton()'");
        }
        /*
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * The new SelectButton will be automatically stored in the 'items' property of the parent ControlBar element passed as argument.
         */
        SelectButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectButton, "items", true);
        };
        /*
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectButton);
        };
        SelectButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Select";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Selecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        SelectButton.typeName = "Pages$SelectButton";
        SelectButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SelectButton;
    })(GridControlBarButton);
    pages.SelectButton = SelectButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SelectorSource = (function (_super) {
        __extends(SelectorSource, _super);
        function SelectorSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SelectorSource() cannot be invoked directly, please use 'model.pages.createSelectorSource()'");
        }
        SelectorSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SelectorSource.typeName = "Pages$SelectorSource";
        SelectorSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SelectorSource;
    })(internal.Element);
    pages.SelectorSource = SelectorSource;
    var SelectorMicroflowSource = (function (_super) {
        __extends(SelectorMicroflowSource, _super);
        function SelectorMicroflowSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__dataSourceMicroflowSettings = new internal.PartProperty(SelectorMicroflowSource, this, "dataSourceMicroflowSettings", null, true);
            if (arguments.length < 4)
                throw new Error("new SelectorMicroflowSource() cannot be invoked directly, please use 'model.pages.createSelectorMicroflowSource()'");
        }
        Object.defineProperty(SelectorMicroflowSource.prototype, "dataSourceMicroflowSettings", {
            get: function () { return this.__dataSourceMicroflowSettings.get(); },
            set: function (newValue) { this.__dataSourceMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property of the parent AssociationWidget element passed as argument.
         */
        SelectorMicroflowSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectorMicroflowSource, "selectorSource", false);
        };
        /*
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectorMicroflowSource.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectorMicroflowSource);
        };
        SelectorMicroflowSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataSourceMicroflowSettings = MicroflowSettings.create(this.model);
        };
        SelectorMicroflowSource.typeName = "Pages$SelectorMicroflowSource";
        SelectorMicroflowSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "dataSourceMicroflowSettings": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SelectorMicroflowSource;
    })(SelectorSource);
    pages.SelectorMicroflowSource = SelectorMicroflowSource;
    var SelectorXPathSource = (function (_super) {
        __extends(SelectorXPathSource, _super);
        function SelectorXPathSource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__sortBar = new internal.PartProperty(SelectorXPathSource, this, "sortBar", null, true);
            this.__xPathConstraint = new internal.PrimitiveProperty(SelectorXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            this.__constrainedBy = new internal.PrimitiveListProperty(SelectorXPathSource, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            this.__applyContext = new internal.PrimitiveProperty(SelectorXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__removeAllFromContext = new internal.PrimitiveProperty(SelectorXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(SelectorXPathSource, this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4)
                throw new Error("new SelectorXPathSource() cannot be invoked directly, please use 'model.pages.createSelectorXPathSource()'");
        }
        Object.defineProperty(SelectorXPathSource.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type XPathConstraints$XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "constrainedBy", {
            /**
             * The value of this property is conceptually of type Paths$EntityPath.
             */
            get: function () { return this.__constrainedBy.get(); },
            set: function (newValue) { this.__constrainedBy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "applyContext", {
            get: function () { return this.__applyContext.get(); },
            set: function (newValue) { this.__applyContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeFromContextEntities", {
            get: function () { return this.__removeFromContextEntities.get(); },
            set: function (newValue) { this.__removeFromContextEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeFromContextEntitiesQualifiedNames", {
            get: function () { return this.__removeFromContextEntities.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property of the parent AssociationWidget element passed as argument.
         */
        SelectorXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectorXPathSource, "selectorSource", false);
        };
        /*
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectorXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectorXPathSource);
        };
        SelectorXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortBar = GridSortBar.create(this.model);
        };
        SelectorXPathSource.typeName = "Pages$SelectorXPathSource";
        SelectorXPathSource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "sortBar": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SelectorXPathSource;
    })(SelectorSource);
    pages.SelectorXPathSource = SelectorXPathSource;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Sidebar+Toggle+Button relevant section in reference guide}
     */
    var SidebarToggleButton = (function (_super) {
        __extends(SidebarToggleButton, _super);
        function SidebarToggleButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__region = new internal.EnumProperty(SidebarToggleButton, this, "region", SidebarToggleRegion.Left, SidebarToggleRegion);
            this.__mode = new internal.EnumProperty(SidebarToggleButton, this, "mode", SidebarToggleMode.PushContentAside, SidebarToggleMode);
            this.__initiallyOpen = new internal.PrimitiveProperty(SidebarToggleButton, this, "initiallyOpen", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new SidebarToggleButton() cannot be invoked directly, please use 'model.pages.createSidebarToggleButton()'");
        }
        Object.defineProperty(SidebarToggleButton.prototype, "region", {
            get: function () { return this.__region.get(); },
            set: function (newValue) { this.__region.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "mode", {
            get: function () { return this.__mode.get(); },
            set: function (newValue) { this.__mode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "initiallyOpen", {
            get: function () { return this.__initiallyOpen.get(); },
            set: function (newValue) { this.__initiallyOpen.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SidebarToggleButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SidebarToggleButton);
        };
        SidebarToggleButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.region = SidebarToggleRegion.Left;
            this.mode = SidebarToggleMode.PushContentAside;
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Toggle";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Toggle";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        SidebarToggleButton.typeName = "Pages$SidebarToggleButton";
        SidebarToggleButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SidebarToggleButton;
    })(Button);
    pages.SidebarToggleButton = SidebarToggleButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Simple+Menu+Bar relevant section in reference guide}
     */
    var SimpleMenuBar = (function (_super) {
        __extends(SimpleMenuBar, _super);
        function SimpleMenuBar(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__orientation = new internal.EnumProperty(SimpleMenuBar, this, "orientation", SimpleMenuBarOrientation.Horizontal, SimpleMenuBarOrientation);
            if (arguments.length < 4)
                throw new Error("new SimpleMenuBar() cannot be invoked directly, please use 'model.pages.createSimpleMenuBar()'");
        }
        Object.defineProperty(SimpleMenuBar.prototype, "orientation", {
            get: function () { return this.__orientation.get(); },
            set: function (newValue) { this.__orientation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SimpleMenuBar.create = function (model) {
            return internal.instancehelpers.createElement(model, SimpleMenuBar);
        };
        SimpleMenuBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.orientation = SimpleMenuBarOrientation.Horizontal;
        };
        SimpleMenuBar.typeName = "Pages$SimpleMenuBar";
        SimpleMenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SimpleMenuBar;
    })(MenuWidget);
    pages.SimpleMenuBar = SimpleMenuBar;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet relevant section in reference guide}
     */
    var Snippet = (function (_super) {
        __extends(Snippet, _super);
        function Snippet(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__entity = new internal.ByNameReferenceProperty(Snippet, this, "entity", null, "DomainModels$Entity");
            this.__widget = new internal.PartProperty(Snippet, this, "widget", null, false);
            this._containmentName = "documents";
        }
        Object.defineProperty(Snippet.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Snippet.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Snippet.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        Snippet.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Snippet);
        };
        Snippet.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Snippet.typeName = "Pages$Snippet";
        Snippet.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "entity": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Snippet;
    })(FormBase);
    pages.Snippet = Snippet;
    var SnippetCall = (function (_super) {
        __extends(SnippetCall, _super);
        function SnippetCall(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__snippet = new internal.ByNameReferenceProperty(SnippetCall, this, "snippet", null, "Pages$Snippet");
            if (arguments.length < 4)
                throw new Error("new SnippetCall() cannot be invoked directly, please use 'model.pages.createSnippetCall()'");
        }
        Object.defineProperty(SnippetCall.prototype, "snippet", {
            get: function () { return this.__snippet.get(); },
            set: function (newValue) { this.__snippet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCall.prototype, "snippetQualifiedName", {
            get: function () { return this.__snippet.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * The new SnippetCall will be automatically stored in the 'snippetCall' property of the parent SnippetCallWidget element passed as argument.
         */
        SnippetCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCall, "snippetCall", false);
        };
        /*
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SnippetCall.create = function (model) {
            return internal.instancehelpers.createElement(model, SnippetCall);
        };
        SnippetCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SnippetCall.typeName = "Pages$SnippetCall";
        SnippetCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SnippetCall;
    })(internal.Element);
    pages.SnippetCall = SnippetCall;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Snippet+Call relevant section in reference guide}
     */
    var SnippetCallWidget = (function (_super) {
        __extends(SnippetCallWidget, _super);
        function SnippetCallWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__snippetCall = new internal.PartProperty(SnippetCallWidget, this, "snippetCall", null, true);
            if (arguments.length < 4)
                throw new Error("new SnippetCallWidget() cannot be invoked directly, please use 'model.pages.createSnippetCallWidget()'");
        }
        Object.defineProperty(SnippetCallWidget.prototype, "snippetCall", {
            get: function () { return this.__snippetCall.get(); },
            set: function (newValue) { this.__snippetCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SnippetCallWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, SnippetCallWidget);
        };
        SnippetCallWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.snippetCall = SnippetCall.create(this.model);
        };
        SnippetCallWidget.typeName = "Pages$SnippetCallWidget";
        SnippetCallWidget.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "snippetCall": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SnippetCallWidget;
    })(Widget);
    pages.SnippetCallWidget = SnippetCallWidget;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Image relevant section in reference guide}
     */
    var StaticImageViewer = (function (_super) {
        __extends(StaticImageViewer, _super);
        function StaticImageViewer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__image = new internal.ByNameReferenceProperty(StaticImageViewer, this, "image", null, "Images$Image");
            this.__widthUnit = new internal.EnumProperty(StaticImageViewer, this, "widthUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            this.__heightUnit = new internal.EnumProperty(StaticImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            this.__width = new internal.PrimitiveProperty(StaticImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__height = new internal.PrimitiveProperty(StaticImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            this.__clickAction = new internal.PartProperty(StaticImageViewer, this, "clickAction", null, true);
            this.__responsive = new internal.PrimitiveProperty(StaticImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new StaticImageViewer() cannot be invoked directly, please use 'model.pages.createStaticImageViewer()'");
        }
        Object.defineProperty(StaticImageViewer.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "heightUnit", {
            get: function () { return this.__heightUnit.get(); },
            set: function (newValue) { this.__heightUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "clickAction", {
            get: function () { return this.__clickAction.get(); },
            set: function (newValue) { this.__clickAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "responsive", {
            get: function () { return this.__responsive.get(); },
            set: function (newValue) { this.__responsive.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticImageViewer);
        };
        StaticImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.widthUnit = ImageSizeUnit.Auto;
            this.heightUnit = ImageSizeUnit.Auto;
            this.clickAction = NoClientAction.create(this.model);
            this.responsive = true;
        };
        StaticImageViewer.typeName = "Pages$StaticImageViewer";
        StaticImageViewer.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "clickAction": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return StaticImageViewer;
    })(ConditionallyVisibleWidget);
    pages.StaticImageViewer = StaticImageViewer;
    var StaticOrDynamicString = (function (_super) {
        __extends(StaticOrDynamicString, _super);
        function StaticOrDynamicString(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isDynamic = new internal.PrimitiveProperty(StaticOrDynamicString, this, "isDynamic", false, internal.PrimitiveTypeEnum.Boolean);
            this.__value = new internal.PrimitiveProperty(StaticOrDynamicString, this, "value", "", internal.PrimitiveTypeEnum.String);
            this.__attribute = new internal.PrimitiveProperty(StaticOrDynamicString, this, "attribute", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new StaticOrDynamicString() cannot be invoked directly, please use 'model.pages.createStaticOrDynamicString()'");
        }
        Object.defineProperty(StaticOrDynamicString.prototype, "isDynamic", {
            get: function () { return this.__isDynamic.get(); },
            set: function (newValue) { this.__isDynamic.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticOrDynamicString.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticOrDynamicString.prototype, "attribute", {
            /**
             * The value of this property is conceptually of type Paths$AttributePath.
             */
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property of the parent LinkButton element passed as argument.
         */
        StaticOrDynamicString.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StaticOrDynamicString, "address", false);
        };
        /*
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticOrDynamicString.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticOrDynamicString);
        };
        StaticOrDynamicString.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        StaticOrDynamicString.typeName = "Pages$StaticOrDynamicString";
        StaticOrDynamicString.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return StaticOrDynamicString;
    })(internal.Element);
    pages.StaticOrDynamicString = StaticOrDynamicString;
    var SyncButton = (function (_super) {
        __extends(SyncButton, _super);
        function SyncButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SyncButton() cannot be invoked directly, please use 'model.pages.createSyncButton()'");
        }
        /*
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SyncButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SyncButton);
        };
        SyncButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Synchronize";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Synchroniseren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        SyncButton.typeName = "Pages$SyncButton";
        SyncButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return SyncButton;
    })(Button);
    pages.SyncButton = SyncButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Container relevant section in reference guide}
     */
    var TabContainer = (function (_super) {
        __extends(TabContainer, _super);
        function TabContainer(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__tabPages = new internal.PartListProperty(TabContainer, this, "tabPages", []);
            this.__defaultPage = new internal.ByIdReferenceProperty(TabContainer, this, "defaultPage", null);
            if (arguments.length < 4)
                throw new Error("new TabContainer() cannot be invoked directly, please use 'model.pages.createTabContainer()'");
        }
        Object.defineProperty(TabContainer.prototype, "tabPages", {
            get: function () { return this.__tabPages.get(); },
            set: function (newValue) { this.__tabPages.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "defaultPage", {
            get: function () { return this.__defaultPage.get(); },
            set: function (newValue) { this.__defaultPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TabContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, TabContainer);
        };
        TabContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TabContainer.typeName = "Pages$TabContainer";
        TabContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TabContainer;
    })(ConditionallyVisibleWidget);
    pages.TabContainer = TabContainer;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Tab+Page relevant section in reference guide}
     */
    var TabPage = (function (_super) {
        __extends(TabPage, _super);
        function TabPage(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(TabPage, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__caption = new internal.PartProperty(TabPage, this, "caption", null, true);
            this.__refreshOnShow = new internal.PrimitiveProperty(TabPage, this, "refreshOnShow", false, internal.PrimitiveTypeEnum.Boolean);
            this.__conditionalVisibilitySettings = new internal.PartProperty(TabPage, this, "conditionalVisibilitySettings", null, false);
            this.__widget = new internal.PartProperty(TabPage, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new TabPage() cannot be invoked directly, please use 'model.pages.createTabPage()'");
        }
        Object.defineProperty(TabPage.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "refreshOnShow", {
            get: function () { return this.__refreshOnShow.get(); },
            set: function (newValue) { this.__refreshOnShow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * The new TabPage will be automatically stored in the 'tabPages' property of the parent TabContainer element passed as argument.
         */
        TabPage.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TabPage, "tabPages", true);
        };
        /*
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TabPage.create = function (model) {
            return internal.instancehelpers.createElement(model, TabPage);
        };
        TabPage.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "TabPage";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        TabPage.typeName = "Pages$TabPage";
        TabPage.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TabPage;
    })(internal.Element);
    pages.TabPage = TabPage;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Table relevant section in reference guide}
     */
    var Table = (function (_super) {
        __extends(Table, _super);
        function Table(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__cells = new internal.PartListProperty(Table, this, "cells", []);
            this.__columns = new internal.PartListProperty(Table, this, "columns", []);
            this.__widthUnit = new internal.EnumProperty(Table, this, "widthUnit", UnitEnum.Weight, UnitEnum);
            this.__rows = new internal.PartListProperty(Table, this, "rows", []);
            if (arguments.length < 4)
                throw new Error("new Table() cannot be invoked directly, please use 'model.pages.createTable()'");
        }
        Object.defineProperty(Table.prototype, "cells", {
            get: function () { return this.__cells.get(); },
            set: function (newValue) { this.__cells.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rows", {
            get: function () { return this.__rows.get(); },
            set: function (newValue) { this.__rows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Table.create = function (model) {
            return internal.instancehelpers.createElement(model, Table);
        };
        Table.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.widthUnit = UnitEnum.Weight;
        };
        Table.typeName = "Pages$Table";
        Table.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Table;
    })(ConditionallyVisibleWidget);
    pages.Table = Table;
    var TableCell = (function (_super) {
        __extends(TableCell, _super);
        function TableCell(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__class = new internal.PrimitiveProperty(TableCell, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(TableCell, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__isHeader = new internal.PrimitiveProperty(TableCell, this, "isHeader", false, internal.PrimitiveTypeEnum.Boolean);
            this.__widget = new internal.PartProperty(TableCell, this, "widget", null, false);
            this.__leftColumnIndex = new internal.PrimitiveProperty(TableCell, this, "leftColumnIndex", 0, internal.PrimitiveTypeEnum.Integer);
            this.__topRowIndex = new internal.PrimitiveProperty(TableCell, this, "topRowIndex", 0, internal.PrimitiveTypeEnum.Integer);
            this.__width = new internal.PrimitiveProperty(TableCell, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__height = new internal.PrimitiveProperty(TableCell, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new TableCell() cannot be invoked directly, please use 'model.pages.createTableCell()'");
        }
        Object.defineProperty(TableCell.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "isHeader", {
            get: function () { return this.__isHeader.get(); },
            set: function (newValue) { this.__isHeader.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "leftColumnIndex", {
            get: function () { return this.__leftColumnIndex.get(); },
            set: function (newValue) { this.__leftColumnIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "topRowIndex", {
            get: function () { return this.__topRowIndex.get(); },
            set: function (newValue) { this.__topRowIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property of the parent Table element passed as argument.
         */
        TableCell.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableCell, "cells", true);
        };
        /*
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableCell.create = function (model) {
            return internal.instancehelpers.createElement(model, TableCell);
        };
        TableCell.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TableCell.typeName = "Pages$TableCell";
        TableCell.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TableCell;
    })(internal.Element);
    pages.TableCell = TableCell;
    var TableColumn = (function (_super) {
        __extends(TableColumn, _super);
        function TableColumn(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__width = new internal.PrimitiveProperty(TableColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new TableColumn() cannot be invoked directly, please use 'model.pages.createTableColumn()'");
        }
        Object.defineProperty(TableColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * The new TableColumn will be automatically stored in the 'columns' property of the parent Table element passed as argument.
         */
        TableColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableColumn, "columns", true);
        };
        /*
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, TableColumn);
        };
        TableColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TableColumn.typeName = "Pages$TableColumn";
        TableColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TableColumn;
    })(internal.Element);
    pages.TableColumn = TableColumn;
    var TableRow = (function (_super) {
        __extends(TableRow, _super);
        function TableRow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__class = new internal.PrimitiveProperty(TableRow, this, "class", "", internal.PrimitiveTypeEnum.String);
            this.__style = new internal.PrimitiveProperty(TableRow, this, "style", "", internal.PrimitiveTypeEnum.String);
            this.__conditionalVisibilitySettings = new internal.PartProperty(TableRow, this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4)
                throw new Error("new TableRow() cannot be invoked directly, please use 'model.pages.createTableRow()'");
        }
        Object.defineProperty(TableRow.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property of the parent Table element passed as argument.
         */
        TableRow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableRow, "rows", true);
        };
        /*
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableRow.create = function (model) {
            return internal.instancehelpers.createElement(model, TableRow);
        };
        TableRow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TableRow.typeName = "Pages$TableRow";
        TableRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TableRow;
    })(internal.Element);
    pages.TableRow = TableRow;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Template+Grid relevant section in reference guide}
     */
    var TemplateGrid = (function (_super) {
        __extends(TemplateGrid, _super);
        function TemplateGrid(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__contents = new internal.PartProperty(TemplateGrid, this, "contents", null, true);
            this.__numberOfRows = new internal.PrimitiveProperty(TemplateGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            this.__numberOfColumns = new internal.PrimitiveProperty(TemplateGrid, this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new TemplateGrid() cannot be invoked directly, please use 'model.pages.createTemplateGrid()'");
        }
        Object.defineProperty(TemplateGrid.prototype, "contents", {
            get: function () { return this.__contents.get(); },
            set: function (newValue) { this.__contents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "numberOfRows", {
            get: function () { return this.__numberOfRows.get(); },
            set: function (newValue) { this.__numberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "numberOfColumns", {
            get: function () { return this.__numberOfColumns.get(); },
            set: function (newValue) { this.__numberOfColumns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGrid);
        };
        TemplateGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.contents = TemplateGridContents.create(this.model);
            this.numberOfRows = 3;
            this.numberOfColumns = 2;
        };
        TemplateGrid.typeName = "Pages$TemplateGrid";
        TemplateGrid.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "contents": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TemplateGrid;
    })(Grid);
    pages.TemplateGrid = TemplateGrid;
    var TemplateGridContents = (function (_super) {
        __extends(TemplateGridContents, _super);
        function TemplateGridContents(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widget = new internal.PartProperty(TemplateGridContents, this, "widget", null, false);
            if (arguments.length < 4)
                throw new Error("new TemplateGridContents() cannot be invoked directly, please use 'model.pages.createTemplateGridContents()'");
        }
        Object.defineProperty(TemplateGridContents.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'contents' property of the parent TemplateGrid element passed as argument.
         */
        TemplateGridContents.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGridContents, "contents", false);
        };
        /*
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGridContents.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGridContents);
        };
        TemplateGridContents.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        TemplateGridContents.typeName = "Pages$TemplateGridContents";
        TemplateGridContents.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TemplateGridContents;
    })(internal.Element);
    pages.TemplateGridContents = TemplateGridContents;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var TextWidget = (function (_super) {
        __extends(TextWidget, _super);
        function TextWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__maxLengthCode = new internal.PrimitiveProperty(TextWidget, this, "maxLengthCode", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new TextWidget() cannot be invoked directly, please use 'model.pages.createTextWidget()'");
        }
        Object.defineProperty(TextWidget.prototype, "maxLengthCode", {
            get: function () { return this.__maxLengthCode.get(); },
            set: function (newValue) { this.__maxLengthCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        TextWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.maxLengthCode = -1;
        };
        TextWidget.typeName = "Pages$TextWidget";
        TextWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return TextWidget;
    })(AttributeWidgetWithPlaceholder);
    pages.TextWidget = TextWidget;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Area relevant section in reference guide}
     */
    var TextArea = (function (_super) {
        __extends(TextArea, _super);
        function TextArea(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__numberOfLines = new internal.PrimitiveProperty(TextArea, this, "numberOfLines", 0, internal.PrimitiveTypeEnum.Integer);
            this.__counterMessage = new internal.PartProperty(TextArea, this, "counterMessage", null, true);
            this.__textTooLongMessage = new internal.PartProperty(TextArea, this, "textTooLongMessage", null, true);
            if (arguments.length < 4)
                throw new Error("new TextArea() cannot be invoked directly, please use 'model.pages.createTextArea()'");
        }
        Object.defineProperty(TextArea.prototype, "numberOfLines", {
            get: function () { return this.__numberOfLines.get(); },
            set: function (newValue) { this.__numberOfLines.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "counterMessage", {
            get: function () { return this.__counterMessage.get(); },
            set: function (newValue) { this.__counterMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "textTooLongMessage", {
            get: function () { return this.__textTooLongMessage.get(); },
            set: function (newValue) { this.__textTooLongMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextArea.create = function (model) {
            return internal.instancehelpers.createElement(model, TextArea);
        };
        TextArea.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.numberOfLines = 5;
            this.counterMessage = texts_1.texts.Text.create(this.model);
            this.textTooLongMessage = texts_1.texts.Text.create(this.model);
        };
        TextArea.typeName = "Pages$TextArea";
        TextArea.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "counterMessage": {
                    "required": {
                        "currentValue": true
                    }
                },
                "textTooLongMessage": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TextArea;
    })(TextWidget);
    pages.TextArea = TextArea;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Text+Box relevant section in reference guide}
     */
    var TextBox = (function (_super) {
        __extends(TextBox, _super);
        function TextBox(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__inputMask = new internal.PrimitiveProperty(TextBox, this, "inputMask", "", internal.PrimitiveTypeEnum.String);
            this.__formattingInfo = new internal.PartProperty(TextBox, this, "formattingInfo", null, true);
            this.__isPasswordBox = new internal.PrimitiveProperty(TextBox, this, "isPasswordBox", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new TextBox() cannot be invoked directly, please use 'model.pages.createTextBox()'");
        }
        Object.defineProperty(TextBox.prototype, "inputMask", {
            get: function () { return this.__inputMask.get(); },
            set: function (newValue) { this.__inputMask.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "isPasswordBox", {
            get: function () { return this.__isPasswordBox.get(); },
            set: function (newValue) { this.__isPasswordBox.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextBox.create = function (model) {
            return internal.instancehelpers.createElement(model, TextBox);
        };
        TextBox.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        TextBox.typeName = "Pages$TextBox";
        TextBox.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "formattingInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return TextBox;
    })(TextWidget);
    pages.TextBox = TextBox;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Page+Title relevant section in reference guide}
     */
    var Title = (function (_super) {
        __extends(Title, _super);
        function Title(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new Title() cannot be invoked directly, please use 'model.pages.createTitle()'");
        }
        /*
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Title.create = function (model) {
            return internal.instancehelpers.createElement(model, Title);
        };
        Title.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Title.typeName = "Pages$Title";
        Title.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Title;
    })(ConditionallyVisibleWidget);
    pages.Title = Title;
    var VerticalFlow = (function (_super) {
        __extends(VerticalFlow, _super);
        function VerticalFlow(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__widgets = new internal.PartListProperty(VerticalFlow, this, "widgets", []);
            if (arguments.length < 4)
                throw new Error("new VerticalFlow() cannot be invoked directly, please use 'model.pages.createVerticalFlow()'");
        }
        Object.defineProperty(VerticalFlow.prototype, "widgets", {
            get: function () { return this.__widgets.get(); },
            set: function (newValue) { this.__widgets.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VerticalFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, VerticalFlow);
        };
        VerticalFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VerticalFlow.typeName = "Pages$VerticalFlow";
        VerticalFlow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return VerticalFlow;
    })(Widget);
    pages.VerticalFlow = VerticalFlow;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Vertical+Split+Pane relevant section in reference guide}
     */
    var VerticalSplitPane = (function (_super) {
        __extends(VerticalSplitPane, _super);
        function VerticalSplitPane(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new VerticalSplitPane() cannot be invoked directly, please use 'model.pages.createVerticalSplitPane()'");
        }
        /*
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VerticalSplitPane.create = function (model) {
            return internal.instancehelpers.createElement(model, VerticalSplitPane);
        };
        VerticalSplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VerticalSplitPane.typeName = "Pages$VerticalSplitPane";
        VerticalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return VerticalSplitPane;
    })(SplitPane);
    pages.VerticalSplitPane = VerticalSplitPane;
})(pages = exports.pages || (exports.pages = {}));
var navigation_1 = require('./navigation');
var texts_1 = require('./texts');
