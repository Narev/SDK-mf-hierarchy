import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
export declare namespace projects {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Projects`.
     */
    interface IModuleDocument extends internal.IModelUnit {
        model: IModel;
        container: IFolderBase;
        load(): ModuleDocument;
        load(callback: (element: ModuleDocument) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ModuleDocument extends internal.ModelUnit implements IModuleDocument {
        model: IModel;
        static typeName: string;
        container: FolderBase;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IFolderBase);
        _initializeDefaultProperties(): void;
    }
    interface IDocument extends IModuleDocument {
        model: IModel;
        container: IFolderBase;
        load(): Document;
        load(callback: (element: Document) => void): any;
        name: string;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Document extends ModuleDocument implements IDocument {
        model: IModel;
        static typeName: string;
        container: FolderBase;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __excluded;
        excluded: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IFolderBase);
        _initializeDefaultProperties(): void;
    }
    interface IFolderBase extends internal.IStructuralUnit {
        model: IModel;
        folders: internal.IList<IFolder>;
        documents: internal.IList<IDocument>;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class FolderBase extends internal.StructuralUnit implements IFolderBase {
        model: IModel;
        static typeName: string;
        private __folders;
        folders: internal.IList<IFolder>;
        private __documents;
        documents: internal.IList<IDocument>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: internal.IStructuralUnit);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/howto50/Add+documents+to+a+module relevant section in reference guide}
     */
    interface IFolder extends IFolderBase {
        model: IModel;
        container: IFolderBase;
        name: string;
    }
    /**
     * See: {@link https://world.mendix.com/display/howto50/Add+documents+to+a+module relevant section in reference guide}
     */
    class Folder extends FolderBase implements IFolder {
        model: IModel;
        static typeName: string;
        container: FolderBase;
        private __name;
        name: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IFolderBase);
        /**
         * Creates a new Folder unit in the SDK and on the server.
         * Expects one argument, a FolderBase in which this unit is contained.
         */
        static createIn(container: IFolderBase): Folder;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Modules relevant section in reference guide}
     */
    interface IModule extends IFolderBase {
        model: IModel;
        container: IProject;
        sortIndex: number;
        name: string;
        /**
         * This property is required and cannot be set to null.
         */
        domainModel: domainmodels.IDomainModel;
        /**
         * This property is required and cannot be set to null.
         */
        moduleSecurity: security.IModuleSecurity;
        fromAppStore: boolean;
        appStoreGuid: string;
        appStoreVersionGuid: string;
        appStoreVersion: string;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Modules relevant section in reference guide}
     */
    class Module extends FolderBase implements IModule {
        model: IModel;
        static typeName: string;
        container: Project;
        private __sortIndex;
        sortIndex: number;
        private __name;
        name: string;
        private __domainModel;
        domainModel: domainmodels.IDomainModel;
        private __moduleSecurity;
        moduleSecurity: security.IModuleSecurity;
        private __fromAppStore;
        fromAppStore: boolean;
        private __appStoreGuid;
        appStoreGuid: string;
        private __appStoreVersionGuid;
        appStoreVersionGuid: string;
        private __appStoreVersion;
        appStoreVersion: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IProject);
        /**
         * Creates a new Module unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        static createIn(container: IProject): Module;
        _initializeDefaultProperties(): void;
    }
    interface IOneTimeConversionMarker extends internal.IElement {
        model: IModel;
        container: IProjectConversion;
        load(): OneTimeConversionMarker;
        load(callback: (element: OneTimeConversionMarker) => void): any;
    }
    class OneTimeConversionMarker extends internal.Element implements IOneTimeConversionMarker {
        model: IModel;
        static typeName: string;
        container: ProjectConversion;
        private __name;
        name: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectConversion): OneTimeConversionMarker;
        static create(model: IModel): OneTimeConversionMarker;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     */
    interface IProject extends internal.IStructuralUnit {
        model: IModel;
        projectDocuments: internal.IList<IProjectDocument>;
        modules: internal.IList<IModule>;
        /**
         * This property is required and cannot be set to null.
         */
        projectConversion: IProjectConversion;
        isSystemProject: boolean;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     */
    class Project extends internal.StructuralUnit implements IProject {
        model: IModel;
        static typeName: string;
        private __projectDocuments;
        projectDocuments: internal.IList<IProjectDocument>;
        private __modules;
        modules: internal.IList<IModule>;
        private __projectConversion;
        projectConversion: IProjectConversion;
        private __isSystemProject;
        isSystemProject: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: internal.IStructuralUnit);
        _initializeDefaultProperties(): void;
    }
    interface IProjectConversion extends internal.IModelUnit {
        model: IModel;
        container: IProject;
        load(): ProjectConversion;
        load(callback: (element: ProjectConversion) => void): any;
    }
    class ProjectConversion extends internal.ModelUnit implements IProjectConversion {
        model: IModel;
        static typeName: string;
        container: Project;
        private __markers;
        markers: internal.IList<OneTimeConversionMarker>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IProject);
        /**
         * Creates a new ProjectConversion unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        static createIn(container: IProject): ProjectConversion;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     */
    interface IProjectDocument extends internal.IModelUnit {
        model: IModel;
        container: IProject;
        load(): ProjectDocument;
        load(callback: (element: ProjectDocument) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ProjectDocument extends internal.ModelUnit implements IProjectDocument {
        model: IModel;
        static typeName: string;
        container: Project;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IProject);
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { security } from './security';
import { IModel } from './base-model';
