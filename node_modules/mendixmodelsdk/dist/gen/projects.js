var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects;
(function (projects) {
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ModuleDocument = (function (_super) {
        __extends(ModuleDocument, _super);
        function ModuleDocument(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this._containmentName = "";
        }
        ModuleDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ModuleDocument.typeName = "Projects$ModuleDocument";
        ModuleDocument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ModuleDocument;
    })(internal.ModelUnit);
    projects.ModuleDocument = ModuleDocument;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Document = (function (_super) {
        __extends(Document, _super);
        function Document(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__name = new internal.PrimitiveProperty(Document, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(Document, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__excluded = new internal.PrimitiveProperty(Document, this, "excluded", false, internal.PrimitiveTypeEnum.Boolean);
            this._declaredAsNamespace = true;
            this._containmentName = "documents";
        }
        Object.defineProperty(Document.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "excluded", {
            get: function () { return this.__excluded.get(); },
            set: function (newValue) { this.__excluded.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Document.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Document.typeName = "Projects$Document";
        Document.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return Document;
    })(ModuleDocument);
    projects.Document = Document;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var FolderBase = (function (_super) {
        __extends(FolderBase, _super);
        function FolderBase(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__folders = new internal.StructuralChildListProperty(FolderBase, this, "folders", []);
            this.__documents = new internal.StructuralChildListProperty(FolderBase, this, "documents", []);
            this._containmentName = "";
        }
        Object.defineProperty(FolderBase.prototype, "folders", {
            get: function () { return this.__folders.get(); },
            set: function (newValue) { this.__folders.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FolderBase.prototype, "documents", {
            get: function () { return this.__documents.get(); },
            set: function (newValue) { this.__documents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        FolderBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FolderBase.typeName = "Projects$FolderBase";
        FolderBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.StructuralUnit);
        return FolderBase;
    })(internal.StructuralUnit);
    projects.FolderBase = FolderBase;
    /**
     * See: {@link https://world.mendix.com/display/howto50/Add+documents+to+a+module relevant section in reference guide}
     */
    var Folder = (function (_super) {
        __extends(Folder, _super);
        function Folder(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__name = new internal.PrimitiveProperty(Folder, this, "name", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "folders";
        }
        Object.defineProperty(Folder.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Folder unit in the SDK and on the server.
         * Expects one argument, a FolderBase in which this unit is contained.
         */
        Folder.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Folder);
        };
        Folder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Folder.typeName = "Projects$Folder";
        Folder.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.StructuralUnit);
        return Folder;
    })(FolderBase);
    projects.Folder = Folder;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Modules relevant section in reference guide}
     */
    var Module = (function (_super) {
        __extends(Module, _super);
        function Module(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__sortIndex = new internal.PrimitiveProperty(Module, this, "sortIndex", 0, internal.PrimitiveTypeEnum.Double);
            this.__name = new internal.PrimitiveProperty(Module, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__domainModel = new internal.StructuralChildProperty(Module, this, "domainModel", null);
            this.__moduleSecurity = new internal.StructuralChildProperty(Module, this, "moduleSecurity", null);
            this.__fromAppStore = new internal.PrimitiveProperty(Module, this, "fromAppStore", false, internal.PrimitiveTypeEnum.Boolean);
            this.__appStoreGuid = new internal.PrimitiveProperty(Module, this, "appStoreGuid", "", internal.PrimitiveTypeEnum.String);
            this.__appStoreVersionGuid = new internal.PrimitiveProperty(Module, this, "appStoreVersionGuid", "", internal.PrimitiveTypeEnum.String);
            this.__appStoreVersion = new internal.PrimitiveProperty(Module, this, "appStoreVersion", "", internal.PrimitiveTypeEnum.String);
            this._declaredAsNamespace = true;
            this._containmentName = "modules";
        }
        Object.defineProperty(Module.prototype, "sortIndex", {
            get: function () { return this.__sortIndex.get(); },
            set: function (newValue) { this.__sortIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "domainModel", {
            get: function () { return this.__domainModel.get(); },
            set: function (newValue) { this.__domainModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "moduleSecurity", {
            get: function () { return this.__moduleSecurity.get(); },
            set: function (newValue) { this.__moduleSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "fromAppStore", {
            get: function () { return this.__fromAppStore.get(); },
            set: function (newValue) { this.__fromAppStore.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreGuid", {
            get: function () { return this.__appStoreGuid.get(); },
            set: function (newValue) { this.__appStoreGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreVersionGuid", {
            get: function () { return this.__appStoreVersionGuid.get(); },
            set: function (newValue) { this.__appStoreVersionGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Module.prototype, "appStoreVersion", {
            get: function () { return this.__appStoreVersion.get(); },
            set: function (newValue) { this.__appStoreVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Module unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        Module.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Module);
        };
        Module.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Module.typeName = "Projects$Module";
        Module.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "domainModel": {
                    "required": {
                        "currentValue": true
                    }
                },
                "moduleSecurity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.StructuralUnit);
        return Module;
    })(FolderBase);
    projects.Module = Module;
    var OneTimeConversionMarker = (function (_super) {
        __extends(OneTimeConversionMarker, _super);
        function OneTimeConversionMarker(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(OneTimeConversionMarker, this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new OneTimeConversionMarker() cannot be invoked directly, please use 'model.projects.createOneTimeConversionMarker()'");
        }
        Object.defineProperty(OneTimeConversionMarker.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new OneTimeConversionMarker instance in the SDK and on the server.
         * The new OneTimeConversionMarker will be automatically stored in the 'markers' property of the parent ProjectConversion element passed as argument.
         */
        OneTimeConversionMarker.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OneTimeConversionMarker, "markers", true);
        };
        /*
         * Creates and returns a new OneTimeConversionMarker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OneTimeConversionMarker.create = function (model) {
            return internal.instancehelpers.createElement(model, OneTimeConversionMarker);
        };
        OneTimeConversionMarker.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        OneTimeConversionMarker.typeName = "Projects$OneTimeConversionMarker";
        OneTimeConversionMarker.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return OneTimeConversionMarker;
    })(internal.Element);
    projects.OneTimeConversionMarker = OneTimeConversionMarker;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     */
    var Project = (function (_super) {
        __extends(Project, _super);
        function Project(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__projectDocuments = new internal.StructuralChildListProperty(Project, this, "projectDocuments", []);
            this.__modules = new internal.StructuralChildListProperty(Project, this, "modules", []);
            this.__projectConversion = new internal.StructuralChildProperty(Project, this, "projectConversion", null);
            this.__isSystemProject = new internal.PrimitiveProperty(Project, this, "isSystemProject", false, internal.PrimitiveTypeEnum.Boolean);
            this._containmentName = "";
        }
        Object.defineProperty(Project.prototype, "projectDocuments", {
            get: function () { return this.__projectDocuments.get(); },
            set: function (newValue) { this.__projectDocuments.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "modules", {
            get: function () { return this.__modules.get(); },
            set: function (newValue) { this.__modules.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "projectConversion", {
            get: function () { return this.__projectConversion.get(); },
            set: function (newValue) { this.__projectConversion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Project.prototype, "isSystemProject", {
            get: function () { return this.__isSystemProject.get(); },
            set: function (newValue) { this.__isSystemProject.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Project.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Project.typeName = "Projects$Project";
        Project.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "projectConversion": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.StructuralUnit);
        return Project;
    })(internal.StructuralUnit);
    projects.Project = Project;
    var ProjectConversion = (function (_super) {
        __extends(ProjectConversion, _super);
        function ProjectConversion(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__markers = new internal.PartListProperty(ProjectConversion, this, "markers", []);
            this._containmentName = "projectConversion";
        }
        Object.defineProperty(ProjectConversion.prototype, "markers", {
            get: function () { return this.__markers.get(); },
            set: function (newValue) { this.__markers.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ProjectConversion unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        ProjectConversion.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ProjectConversion);
        };
        ProjectConversion.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectConversion.typeName = "Projects$ProjectConversion";
        ProjectConversion.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ProjectConversion;
    })(internal.ModelUnit);
    projects.ProjectConversion = ProjectConversion;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ProjectDocument = (function (_super) {
        __extends(ProjectDocument, _super);
        function ProjectDocument(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this._containmentName = "projectDocuments";
        }
        ProjectDocument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ProjectDocument.typeName = "Projects$ProjectDocument";
        ProjectDocument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ProjectDocument;
    })(internal.ModelUnit);
    projects.ProjectDocument = ProjectDocument;
})(projects = exports.projects || (exports.projects = {}));
