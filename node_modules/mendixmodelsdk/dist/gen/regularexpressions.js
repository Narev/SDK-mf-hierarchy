var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var regularexpressions;
(function (regularexpressions) {
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Regular+Expressions relevant section in reference guide}
     */
    var RegularExpression = (function (_super) {
        __extends(RegularExpression, _super);
        function RegularExpression(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__regEx = new internal.PrimitiveProperty(RegularExpression, this, "regEx", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(RegularExpression.prototype, "regEx", {
            get: function () { return this.__regEx.get(); },
            set: function (newValue) { this.__regEx.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new RegularExpression unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        RegularExpression.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, RegularExpression);
        };
        RegularExpression.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RegularExpression.typeName = "RegularExpressions$RegularExpression";
        RegularExpression.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return RegularExpression;
    })(projects_1.projects.Document);
    regularexpressions.RegularExpression = RegularExpression;
})(regularexpressions = exports.regularexpressions || (exports.regularexpressions = {}));
