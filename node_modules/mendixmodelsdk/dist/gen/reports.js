var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require('./pages');
var reports;
(function (reports) {
    var AggregateFunctionEnum = (function (_super) {
        __extends(AggregateFunctionEnum, _super);
        function AggregateFunctionEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "reports.AggregateFunctionEnum";
        }
        AggregateFunctionEnum.Sum = new AggregateFunctionEnum("Sum", {});
        AggregateFunctionEnum.Average = new AggregateFunctionEnum("Average", {});
        AggregateFunctionEnum.Count = new AggregateFunctionEnum("Count", {});
        AggregateFunctionEnum.Minimum = new AggregateFunctionEnum("Minimum", {});
        AggregateFunctionEnum.Maximum = new AggregateFunctionEnum("Maximum", {});
        return AggregateFunctionEnum;
    })(internal.IEnum);
    reports.AggregateFunctionEnum = AggregateFunctionEnum;
    var ColumnFormat = (function (_super) {
        __extends(ColumnFormat, _super);
        function ColumnFormat() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "reports.ColumnFormat";
        }
        ColumnFormat.Default = new ColumnFormat("Default", {});
        ColumnFormat.MonthName = new ColumnFormat("MonthName", {});
        ColumnFormat.WeekdayName = new ColumnFormat("WeekdayName", {});
        return ColumnFormat;
    })(internal.IEnum);
    reports.ColumnFormat = ColumnFormat;
    var ChartType = (function (_super) {
        __extends(ChartType, _super);
        function ChartType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "reports.ChartType";
        }
        ChartType.VerticalBars = new ChartType("VerticalBars", {});
        ChartType.VerticalBars3D = new ChartType("VerticalBars3D", {});
        ChartType.HorizontalBars = new ChartType("HorizontalBars", {});
        ChartType.Lines = new ChartType("Lines", {});
        ChartType.Area = new ChartType("Area", {});
        return ChartType;
    })(internal.IEnum);
    reports.ChartType = ChartType;
    var AspectRatio = (function (_super) {
        __extends(AspectRatio, _super);
        function AspectRatio() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "reports.AspectRatio";
        }
        AspectRatio.SixteenToNine = new AspectRatio("SixteenToNine", {});
        AspectRatio.ThreeToTwo = new AspectRatio("ThreeToTwo", {});
        AspectRatio.FourToThree = new AspectRatio("FourToThree", {});
        AspectRatio.OneToOne = new AspectRatio("OneToOne", {});
        AspectRatio.ThreeToFour = new AspectRatio("ThreeToFour", {});
        AspectRatio.TwoToThree = new AspectRatio("TwoToThree", {});
        AspectRatio.NineToSixteen = new AspectRatio("NineToSixteen", {});
        return AspectRatio;
    })(internal.IEnum);
    reports.AspectRatio = AspectRatio;
    var DateRangeFieldEnum = (function (_super) {
        __extends(DateRangeFieldEnum, _super);
        function DateRangeFieldEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "reports.DateRangeFieldEnum";
        }
        DateRangeFieldEnum.Year = new DateRangeFieldEnum("Year", {});
        DateRangeFieldEnum.Month = new DateRangeFieldEnum("Month", {});
        DateRangeFieldEnum.Week = new DateRangeFieldEnum("Week", {});
        DateRangeFieldEnum.Period = new DateRangeFieldEnum("Period", {});
        DateRangeFieldEnum.Quarter = new DateRangeFieldEnum("Quarter", {});
        return DateRangeFieldEnum;
    })(internal.IEnum);
    reports.DateRangeFieldEnum = DateRangeFieldEnum;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Report+Widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ReportWidget = (function (_super) {
        __extends(ReportWidget, _super);
        function ReportWidget(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ReportWidget() cannot be invoked directly, please use 'model.reports.createReportWidget()'");
        }
        ReportWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportWidget.typeName = "Reports$ReportWidget";
        ReportWidget.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportWidget;
    })(pages_1.pages.Widget);
    reports.ReportWidget = ReportWidget;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Basic+Reports relevant section in reference guide}
     */
    var BasicReport = (function (_super) {
        __extends(BasicReport, _super);
        function BasicReport(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__dataSet = new internal.ByNameReferenceProperty(BasicReport, this, "dataSet", null, "DataSets$DataSet");
            this.__columns = new internal.PartListProperty(BasicReport, this, "columns", []);
            this.__aggregates = new internal.PartListProperty(BasicReport, this, "aggregates", []);
            this.__showExportButton = new internal.PrimitiveProperty(BasicReport, this, "showExportButton", false, internal.PrimitiveTypeEnum.Boolean);
            this.__zoomInfo = new internal.PartProperty(BasicReport, this, "zoomInfo", null, true);
            this.__isPagingEnabled = new internal.PrimitiveProperty(BasicReport, this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            this.__pageSize = new internal.PrimitiveProperty(BasicReport, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new BasicReport() cannot be invoked directly, please use 'model.reports.createBasicReport()'");
        }
        Object.defineProperty(BasicReport.prototype, "dataSet", {
            get: function () { return this.__dataSet.get(); },
            set: function (newValue) { this.__dataSet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "dataSetQualifiedName", {
            get: function () { return this.__dataSet.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "aggregates", {
            get: function () { return this.__aggregates.get(); },
            set: function (newValue) { this.__aggregates.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "showExportButton", {
            get: function () { return this.__showExportButton.get(); },
            set: function (newValue) { this.__showExportButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "zoomInfo", {
            get: function () { return this.__zoomInfo.get(); },
            set: function (newValue) { this.__zoomInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "isPagingEnabled", {
            get: function () { return this.__isPagingEnabled.get(); },
            set: function (newValue) { this.__isPagingEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReport.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReport);
        };
        BasicReport.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 1";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model)), (function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 2";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model)), (function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 3";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model))]);
            this.zoomInfo = ReportZoomInfo.create(this.model);
            this.pageSize = 20;
        };
        BasicReport.typeName = "Reports$BasicReport";
        BasicReport.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "zoomInfo": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BasicReport;
    })(ReportWidget);
    reports.BasicReport = BasicReport;
    var BasicReportAggregate = (function (_super) {
        __extends(BasicReportAggregate, _super);
        function BasicReportAggregate(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(BasicReportAggregate, this, "caption", null, true);
            this.__aggregateFunction = new internal.EnumProperty(BasicReportAggregate, this, "aggregateFunction", AggregateFunctionEnum.Sum, AggregateFunctionEnum);
            this.__applicablePerColumn = new internal.PrimitiveListProperty(BasicReportAggregate, this, "applicablePerColumn", [], internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new BasicReportAggregate() cannot be invoked directly, please use 'model.reports.createBasicReportAggregate()'");
        }
        Object.defineProperty(BasicReportAggregate.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportAggregate.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportAggregate.prototype, "applicablePerColumn", {
            get: function () { return this.__applicablePerColumn.get(); },
            set: function (newValue) { this.__applicablePerColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
         * The new BasicReportAggregate will be automatically stored in the 'aggregates' property of the parent BasicReport element passed as argument.
         */
        BasicReportAggregate.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BasicReportAggregate, "aggregates", true);
        };
        /*
         * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReportAggregate.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReportAggregate);
        };
        BasicReportAggregate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
            this.aggregateFunction = AggregateFunctionEnum.Sum;
        };
        BasicReportAggregate.typeName = "Reports$BasicReportAggregate";
        BasicReportAggregate.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return BasicReportAggregate;
    })(internal.Element);
    reports.BasicReportAggregate = BasicReportAggregate;
    var BasicReportColumn = (function (_super) {
        __extends(BasicReportColumn, _super);
        function BasicReportColumn(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(BasicReportColumn, this, "caption", null, true);
            this.__dataSetColumnName = new internal.PrimitiveProperty(BasicReportColumn, this, "dataSetColumnName", "", internal.PrimitiveTypeEnum.String);
            this.__width = new internal.PrimitiveProperty(BasicReportColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            this.__alignment = new internal.EnumProperty(BasicReportColumn, this, "alignment", pages_1.pages.AlignmentEnum.Left, pages_1.pages.AlignmentEnum);
            this.__format = new internal.EnumProperty(BasicReportColumn, this, "format", ColumnFormat.Default, ColumnFormat);
            if (arguments.length < 4)
                throw new Error("new BasicReportColumn() cannot be invoked directly, please use 'model.reports.createBasicReportColumn()'");
        }
        Object.defineProperty(BasicReportColumn.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "dataSetColumnName", {
            get: function () { return this.__dataSetColumnName.get(); },
            set: function (newValue) { this.__dataSetColumnName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "alignment", {
            get: function () { return this.__alignment.get(); },
            set: function (newValue) { this.__alignment.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "format", {
            get: function () { return this.__format.get(); },
            set: function (newValue) { this.__format.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
         * The new BasicReportColumn will be automatically stored in the 'columns' property of the parent BasicReport element passed as argument.
         */
        BasicReportColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BasicReportColumn, "columns", true);
        };
        /*
         * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReportColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReportColumn);
        };
        BasicReportColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
            this.width = 1;
            this.alignment = pages_1.pages.AlignmentEnum.Left;
            this.format = ColumnFormat.Default;
        };
        BasicReportColumn.typeName = "Reports$BasicReportColumn";
        BasicReportColumn.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return BasicReportColumn;
    })(internal.Element);
    reports.BasicReportColumn = BasicReportColumn;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Report+Button relevant section in reference guide}
     */
    var ReportButton = (function (_super) {
        __extends(ReportButton, _super);
        function ReportButton(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(ReportButton, this, "caption", null, true);
            if (arguments.length < 4)
                throw new Error("new ReportButton() cannot be invoked directly, please use 'model.reports.createReportButton()'");
        }
        Object.defineProperty(ReportButton.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportButton.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportButton);
        };
        ReportButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Generate report";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        ReportButton.typeName = "Reports$ReportButton";
        ReportButton.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportButton;
    })(pages_1.pages.Widget);
    reports.ReportButton = ReportButton;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Report+Chart relevant section in reference guide}
     */
    var ReportChart = (function (_super) {
        __extends(ReportChart, _super);
        function ReportChart(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__dataSet = new internal.ByNameReferenceProperty(ReportChart, this, "dataSet", null, "DataSets$DataSet");
            this.__type = new internal.EnumProperty(ReportChart, this, "type", ChartType.VerticalBars, ChartType);
            this.__seriess = new internal.PartListProperty(ReportChart, this, "seriess", []);
            this.__xAxisCaption = new internal.PartProperty(ReportChart, this, "xAxisCaption", null, true);
            this.__yAxisCaption = new internal.PartProperty(ReportChart, this, "yAxisCaption", null, true);
            this.__xAxisColumn = new internal.PrimitiveProperty(ReportChart, this, "xAxisColumn", "", internal.PrimitiveTypeEnum.String);
            this.__xAxisFormat = new internal.EnumProperty(ReportChart, this, "xAxisFormat", ColumnFormat.Default, ColumnFormat);
            this.__yAxisPrecision = new internal.PrimitiveProperty(ReportChart, this, "yAxisPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            this.__yAxisUseMinMax = new internal.PrimitiveProperty(ReportChart, this, "yAxisUseMinMax", false, internal.PrimitiveTypeEnum.Boolean);
            this.__yAxisMinimum = new internal.PrimitiveProperty(ReportChart, this, "yAxisMinimum", 0, internal.PrimitiveTypeEnum.Double);
            this.__yAxisMaximum = new internal.PrimitiveProperty(ReportChart, this, "yAxisMaximum", 0, internal.PrimitiveTypeEnum.Double);
            this.__aspectRatio = new internal.EnumProperty(ReportChart, this, "aspectRatio", AspectRatio.FourToThree, AspectRatio);
            if (arguments.length < 4)
                throw new Error("new ReportChart() cannot be invoked directly, please use 'model.reports.createReportChart()'");
        }
        Object.defineProperty(ReportChart.prototype, "dataSet", {
            get: function () { return this.__dataSet.get(); },
            set: function (newValue) { this.__dataSet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "dataSetQualifiedName", {
            get: function () { return this.__dataSet.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "seriess", {
            get: function () { return this.__seriess.get(); },
            set: function (newValue) { this.__seriess.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisCaption", {
            get: function () { return this.__xAxisCaption.get(); },
            set: function (newValue) { this.__xAxisCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisCaption", {
            get: function () { return this.__yAxisCaption.get(); },
            set: function (newValue) { this.__yAxisCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisColumn", {
            get: function () { return this.__xAxisColumn.get(); },
            set: function (newValue) { this.__xAxisColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisFormat", {
            get: function () { return this.__xAxisFormat.get(); },
            set: function (newValue) { this.__xAxisFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisPrecision", {
            get: function () { return this.__yAxisPrecision.get(); },
            set: function (newValue) { this.__yAxisPrecision.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisUseMinMax", {
            get: function () { return this.__yAxisUseMinMax.get(); },
            set: function (newValue) { this.__yAxisUseMinMax.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisMinimum", {
            get: function () { return this.__yAxisMinimum.get(); },
            set: function (newValue) { this.__yAxisMinimum.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisMaximum", {
            get: function () { return this.__yAxisMaximum.get(); },
            set: function (newValue) { this.__yAxisMaximum.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "aspectRatio", {
            get: function () { return this.__aspectRatio.get(); },
            set: function (newValue) { this.__aspectRatio.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportChart.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportChart);
        };
        ReportChart.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = ChartType.VerticalBars;
            this.xAxisCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "X-axis caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.yAxisCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Y-axis caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.xAxisFormat = ColumnFormat.Default;
            this.yAxisPrecision = 2;
            this.aspectRatio = AspectRatio.FourToThree;
        };
        ReportChart.typeName = "Reports$ReportChart";
        ReportChart.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "xAxisCaption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "yAxisCaption": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportChart;
    })(pages_1.pages.Widget);
    reports.ReportChart = ReportChart;
    var ReportChartSeries = (function (_super) {
        __extends(ReportChartSeries, _super);
        function ReportChartSeries(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(ReportChartSeries, this, "caption", null, true);
            this.__dataSetColumn = new internal.PrimitiveProperty(ReportChartSeries, this, "dataSetColumn", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ReportChartSeries() cannot be invoked directly, please use 'model.reports.createReportChartSeries()'");
        }
        Object.defineProperty(ReportChartSeries.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChartSeries.prototype, "dataSetColumn", {
            get: function () { return this.__dataSetColumn.get(); },
            set: function (newValue) { this.__dataSetColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
         * The new ReportChartSeries will be automatically stored in the 'seriess' property of the parent ReportChart element passed as argument.
         */
        ReportChartSeries.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportChartSeries, "seriess", true);
        };
        /*
         * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportChartSeries.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportChartSeries);
        };
        ReportChartSeries.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
        };
        ReportChartSeries.typeName = "Reports$ReportChartSeries";
        ReportChartSeries.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ReportChartSeries;
    })(internal.Element);
    reports.ReportChartSeries = ReportChartSeries;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Date+Range+Field relevant section in reference guide}
     */
    var ReportDateRangeField = (function (_super) {
        __extends(ReportDateRangeField, _super);
        function ReportDateRangeField(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__caption = new internal.PartProperty(ReportDateRangeField, this, "caption", null, true);
            this.__type = new internal.EnumProperty(ReportDateRangeField, this, "type", DateRangeFieldEnum.Year, DateRangeFieldEnum);
            if (arguments.length < 4)
                throw new Error("new ReportDateRangeField() cannot be invoked directly, please use 'model.reports.createReportDateRangeField()'");
        }
        Object.defineProperty(ReportDateRangeField.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeField.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
         * The new ReportDateRangeField will be automatically stored in the 'fields' property of the parent ReportDateRangeSelector element passed as argument.
         */
        ReportDateRangeField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeField, "fields", true);
        };
        /*
         * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDateRangeField.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDateRangeField);
        };
        ReportDateRangeField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
            this.type = DateRangeFieldEnum.Year;
        };
        ReportDateRangeField.typeName = "Reports$ReportDateRangeField";
        ReportDateRangeField.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "caption": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return ReportDateRangeField;
    })(internal.Element);
    reports.ReportDateRangeField = ReportDateRangeField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ReportParameter = (function (_super) {
        __extends(ReportParameter, _super);
        function ReportParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterName = new internal.PrimitiveProperty(ReportParameter, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ReportParameter() cannot be invoked directly, please use 'model.reports.createReportParameter()'");
        }
        Object.defineProperty(ReportParameter.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ReportParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportParameter.typeName = "Reports$ReportParameter";
        ReportParameter.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportParameter;
    })(pages_1.pages.Widget);
    reports.ReportParameter = ReportParameter;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Date+Range+Selector relevant section in reference guide}
     */
    var ReportDateRangeSelector = (function (_super) {
        __extends(ReportDateRangeSelector, _super);
        function ReportDateRangeSelector(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__fields = new internal.PartListProperty(ReportDateRangeSelector, this, "fields", []);
            this.__minYear = new internal.PrimitiveProperty(ReportDateRangeSelector, this, "minYear", 0, internal.PrimitiveTypeEnum.Integer);
            this.__maxYear = new internal.PrimitiveProperty(ReportDateRangeSelector, this, "maxYear", 0, internal.PrimitiveTypeEnum.Integer);
            this.__fieldsPerRow = new internal.PrimitiveProperty(ReportDateRangeSelector, this, "fieldsPerRow", 0, internal.PrimitiveTypeEnum.Integer);
            this.__showFromToRange = new internal.PrimitiveProperty(ReportDateRangeSelector, this, "showFromToRange", false, internal.PrimitiveTypeEnum.Boolean);
            this.__fromCaption = new internal.PartProperty(ReportDateRangeSelector, this, "fromCaption", null, true);
            this.__toCaption = new internal.PartProperty(ReportDateRangeSelector, this, "toCaption", null, true);
            if (arguments.length < 4)
                throw new Error("new ReportDateRangeSelector() cannot be invoked directly, please use 'model.reports.createReportDateRangeSelector()'");
        }
        Object.defineProperty(ReportDateRangeSelector.prototype, "fields", {
            get: function () { return this.__fields.get(); },
            set: function (newValue) { this.__fields.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "minYear", {
            get: function () { return this.__minYear.get(); },
            set: function (newValue) { this.__minYear.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "maxYear", {
            get: function () { return this.__maxYear.get(); },
            set: function (newValue) { this.__maxYear.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "fieldsPerRow", {
            get: function () { return this.__fieldsPerRow.get(); },
            set: function (newValue) { this.__fieldsPerRow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "showFromToRange", {
            get: function () { return this.__showFromToRange.get(); },
            set: function (newValue) { this.__showFromToRange.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "fromCaption", {
            get: function () { return this.__fromCaption.get(); },
            set: function (newValue) { this.__fromCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "toCaption", {
            get: function () { return this.__toCaption.get(); },
            set: function (newValue) { this.__toCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDateRangeSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDateRangeSelector);
        };
        ReportDateRangeSelector.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.minYear = 2011;
            this.maxYear = 2015;
            this.fieldsPerRow = 3;
            this.showFromToRange = true;
            this.fromCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "From";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.toCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "To";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        ReportDateRangeSelector.typeName = "Reports$ReportDateRangeSelector";
        ReportDateRangeSelector.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "fromCaption": {
                    "required": {
                        "currentValue": true
                    }
                },
                "toCaption": {
                    "required": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportDateRangeSelector;
    })(ReportParameter);
    reports.ReportDateRangeSelector = ReportDateRangeSelector;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Drop+Down relevant section in reference guide}
     */
    var ReportDropDown = (function (_super) {
        __extends(ReportDropDown, _super);
        function ReportDropDown(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attribute = new internal.ByNameReferenceProperty(ReportDropDown, this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4)
                throw new Error("new ReportDropDown() cannot be invoked directly, please use 'model.reports.createReportDropDown()'");
        }
        Object.defineProperty(ReportDropDown.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDropDown.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDropDown);
        };
        ReportDropDown.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportDropDown.typeName = "Reports$ReportDropDown";
        ReportDropDown.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportDropDown;
    })(ReportParameter);
    reports.ReportDropDown = ReportDropDown;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Report+Pane relevant section in reference guide}
     */
    var ReportPane = (function (_super) {
        __extends(ReportPane, _super);
        function ReportPane(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__parameterWidget = new internal.PartProperty(ReportPane, this, "parameterWidget", null, false);
            this.__reportWidget = new internal.PartProperty(ReportPane, this, "reportWidget", null, false);
            this.__generateOnLoad = new internal.PrimitiveProperty(ReportPane, this, "generateOnLoad", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new ReportPane() cannot be invoked directly, please use 'model.reports.createReportPane()'");
        }
        Object.defineProperty(ReportPane.prototype, "parameterWidget", {
            get: function () { return this.__parameterWidget.get(); },
            set: function (newValue) { this.__parameterWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "reportWidget", {
            get: function () { return this.__reportWidget.get(); },
            set: function (newValue) { this.__reportWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "generateOnLoad", {
            get: function () { return this.__generateOnLoad.get(); },
            set: function (newValue) { this.__generateOnLoad.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportPane.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportPane);
        };
        ReportPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportPane.typeName = "Reports$ReportPane";
        ReportPane.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return ReportPane;
    })(pages_1.pages.Widget);
    reports.ReportPane = ReportPane;
    var ReportZoomInfo = (function (_super) {
        __extends(ReportZoomInfo, _super);
        function ReportZoomInfo(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__targetPage = new internal.ByNameReferenceProperty(ReportZoomInfo, this, "targetPage", null, "Pages$Page");
            this.__mappings = new internal.PartListProperty(ReportZoomInfo, this, "mappings", []);
            if (arguments.length < 4)
                throw new Error("new ReportZoomInfo() cannot be invoked directly, please use 'model.reports.createReportZoomInfo()'");
        }
        Object.defineProperty(ReportZoomInfo.prototype, "targetPage", {
            get: function () { return this.__targetPage.get(); },
            set: function (newValue) { this.__targetPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomInfo.prototype, "targetPageQualifiedName", {
            get: function () { return this.__targetPage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomInfo.prototype, "mappings", {
            get: function () { return this.__mappings.get(); },
            set: function (newValue) { this.__mappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
         * The new ReportZoomInfo will be automatically stored in the 'zoomInfo' property of the parent BasicReport element passed as argument.
         */
        ReportZoomInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportZoomInfo, "zoomInfo", false);
        };
        /*
         * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportZoomInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportZoomInfo);
        };
        ReportZoomInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportZoomInfo.typeName = "Reports$ReportZoomInfo";
        ReportZoomInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ReportZoomInfo;
    })(internal.Element);
    reports.ReportZoomInfo = ReportZoomInfo;
    var ReportZoomMapping = (function (_super) {
        __extends(ReportZoomMapping, _super);
        function ReportZoomMapping(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__targetParameterName = new internal.PrimitiveProperty(ReportZoomMapping, this, "targetParameterName", "", internal.PrimitiveTypeEnum.String);
            this.__sourceReportColumnName = new internal.PrimitiveProperty(ReportZoomMapping, this, "sourceReportColumnName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new ReportZoomMapping() cannot be invoked directly, please use 'model.reports.createReportZoomMapping()'");
        }
        Object.defineProperty(ReportZoomMapping.prototype, "targetParameterName", {
            get: function () { return this.__targetParameterName.get(); },
            set: function (newValue) { this.__targetParameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomMapping.prototype, "sourceReportColumnName", {
            get: function () { return this.__sourceReportColumnName.get(); },
            set: function (newValue) { this.__sourceReportColumnName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
         * The new ReportZoomMapping will be automatically stored in the 'mappings' property of the parent ReportZoomInfo element passed as argument.
         */
        ReportZoomMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportZoomMapping, "mappings", true);
        };
        /*
         * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportZoomMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportZoomMapping);
        };
        ReportZoomMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ReportZoomMapping.typeName = "Reports$ReportZoomMapping";
        ReportZoomMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ReportZoomMapping;
    })(internal.Element);
    reports.ReportZoomMapping = ReportZoomMapping;
})(reports = exports.reports || (exports.reports = {}));
var texts_1 = require('./texts');
