var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var scheduledevents;
(function (scheduledevents) {
    var IntervalType = (function (_super) {
        __extends(IntervalType, _super);
        function IntervalType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "scheduledevents.IntervalType";
        }
        IntervalType.Second = new IntervalType("Second", {});
        IntervalType.Minute = new IntervalType("Minute", {});
        IntervalType.Hour = new IntervalType("Hour", {});
        IntervalType.Day = new IntervalType("Day", {});
        IntervalType.Week = new IntervalType("Week", {});
        IntervalType.Month = new IntervalType("Month", {});
        IntervalType.Year = new IntervalType("Year", {});
        return IntervalType;
    })(internal.IEnum);
    scheduledevents.IntervalType = IntervalType;
    var TimeZoneEnum = (function (_super) {
        __extends(TimeZoneEnum, _super);
        function TimeZoneEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "scheduledevents.TimeZoneEnum";
        }
        TimeZoneEnum.UTC = new TimeZoneEnum("UTC", {});
        TimeZoneEnum.Server = new TimeZoneEnum("Server", {});
        return TimeZoneEnum;
    })(internal.IEnum);
    scheduledevents.TimeZoneEnum = TimeZoneEnum;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Scheduled+Events relevant section in reference guide}
     */
    var ScheduledEvent = (function (_super) {
        __extends(ScheduledEvent, _super);
        function ScheduledEvent(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__startDateTime = new internal.PrimitiveProperty(ScheduledEvent, this, "startDateTime", null, internal.PrimitiveTypeEnum.DateTime);
            this.__timeZone = new internal.EnumProperty(ScheduledEvent, this, "timeZone", TimeZoneEnum.UTC, TimeZoneEnum);
            this.__interval = new internal.PrimitiveProperty(ScheduledEvent, this, "interval", 0, internal.PrimitiveTypeEnum.Integer);
            this.__intervalType = new internal.EnumProperty(ScheduledEvent, this, "intervalType", IntervalType.Minute, IntervalType);
            this.__microflow = new internal.ByNameReferenceProperty(ScheduledEvent, this, "microflow", null, "Microflows$Microflow");
            this.__enabled = new internal.PrimitiveProperty(ScheduledEvent, this, "enabled", false, internal.PrimitiveTypeEnum.Boolean);
            this._containmentName = "documents";
        }
        Object.defineProperty(ScheduledEvent.prototype, "startDateTime", {
            get: function () { return this.__startDateTime.get(); },
            set: function (newValue) { this.__startDateTime.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "timeZone", {
            get: function () { return this.__timeZone.get(); },
            set: function (newValue) { this.__timeZone.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "interval", {
            get: function () { return this.__interval.get(); },
            set: function (newValue) { this.__interval.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "intervalType", {
            get: function () { return this.__intervalType.get(); },
            set: function (newValue) { this.__intervalType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "enabled", {
            get: function () { return this.__enabled.get(); },
            set: function (newValue) { this.__enabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ScheduledEvent unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        ScheduledEvent.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ScheduledEvent);
        };
        ScheduledEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.startDateTime = "" + Date.now();
            this.timeZone = TimeZoneEnum.UTC;
            this.intervalType = IntervalType.Minute;
        };
        ScheduledEvent.typeName = "ScheduledEvents$ScheduledEvent";
        ScheduledEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ScheduledEvent;
    })(projects_1.projects.Document);
    scheduledevents.ScheduledEvent = ScheduledEvent;
})(scheduledevents = exports.scheduledevents || (exports.scheduledevents = {}));
