import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace security {
    class SecurityLevel extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static CheckNothing: SecurityLevel;
        static CheckFormsAndMicroflows: SecurityLevel;
        static CheckEverything: SecurityLevel;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Security`.
     */
    interface IAccessRuleContainerBase extends internal.IElement {
        model: IModel;
        container: IProjectSecurity;
        load(): AccessRuleContainerBase;
        load(callback: (element: AccessRuleContainerBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AccessRuleContainerBase extends internal.Element implements IAccessRuleContainerBase {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        private __accessRules;
        accessRules: internal.IList<domainmodels.AccessRule>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Demo+Users relevant section in reference guide}
     */
    interface IDemoUser extends internal.IElement {
        model: IModel;
        container: IProjectSecurity;
        load(): DemoUser;
        load(callback: (element: DemoUser) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Demo+Users relevant section in reference guide}
     */
    class DemoUser extends internal.Element implements IDemoUser {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        private __userName;
        userName: string;
        private __password;
        password: string;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __userRoles;
        userRoles: internal.IList<IUserRole>;
        userRolesQualifiedNames: string[];
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSecurity): DemoUser;
        static create(model: IModel): DemoUser;
        _initializeDefaultProperties(): void;
    }
    interface IFileDocumentAccessRuleContainer extends IAccessRuleContainerBase {
        model: IModel;
        container: IProjectSecurity;
        load(): FileDocumentAccessRuleContainer;
        load(callback: (element: FileDocumentAccessRuleContainer) => void): any;
    }
    class FileDocumentAccessRuleContainer extends AccessRuleContainerBase implements IFileDocumentAccessRuleContainer {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSecurity): FileDocumentAccessRuleContainer;
        static create(model: IModel): FileDocumentAccessRuleContainer;
        _initializeDefaultProperties(): void;
    }
    interface IImageAccessRuleContainer extends IAccessRuleContainerBase {
        model: IModel;
        container: IProjectSecurity;
        load(): ImageAccessRuleContainer;
        load(callback: (element: ImageAccessRuleContainer) => void): any;
    }
    class ImageAccessRuleContainer extends AccessRuleContainerBase implements IImageAccessRuleContainer {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSecurity): ImageAccessRuleContainer;
        static create(model: IModel): ImageAccessRuleContainer;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Module+Role relevant section in reference guide}
     */
    interface IModuleRole extends internal.IElement {
        model: IModel;
        container: IModuleSecurity;
        load(): ModuleRole;
        load(callback: (element: ModuleRole) => void): any;
        name: string;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Module+Role relevant section in reference guide}
     */
    class ModuleRole extends internal.Element implements IModuleRole {
        model: IModel;
        static typeName: string;
        container: ModuleSecurity;
        private __name;
        name: string;
        private __description;
        description: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ModuleSecurity): ModuleRole;
        static create(model: IModel): ModuleRole;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Module+Security relevant section in reference guide}
     */
    interface IModuleSecurity extends internal.IModelUnit {
        model: IModel;
        container: projects.IModule;
        load(): ModuleSecurity;
        load(callback: (element: ModuleSecurity) => void): any;
        moduleRoles: internal.IList<IModuleRole>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Module+Security relevant section in reference guide}
     */
    class ModuleSecurity extends internal.ModelUnit implements IModuleSecurity {
        model: IModel;
        static typeName: string;
        container: projects.Module;
        private __moduleRoles;
        moduleRoles: internal.IList<ModuleRole>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IModule);
        /**
         * Creates a new ModuleSecurity unit in the SDK and on the server.
         * Expects one argument, a projects.Module in which this unit is contained.
         */
        static createIn(container: projects.IModule): ModuleSecurity;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Password+Policy relevant section in reference guide}
     */
    interface IPasswordPolicySettings extends internal.IElement {
        model: IModel;
        container: IProjectSecurity;
        load(): PasswordPolicySettings;
        load(callback: (element: PasswordPolicySettings) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Password+Policy relevant section in reference guide}
     */
    class PasswordPolicySettings extends internal.Element implements IPasswordPolicySettings {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        private __minimumLength;
        minimumLength: number;
        private __requireMixedCase;
        requireMixedCase: boolean;
        private __requireSymbol;
        requireSymbol: boolean;
        private __requireDigit;
        requireDigit: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSecurity): PasswordPolicySettings;
        static create(model: IModel): PasswordPolicySettings;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project+Security relevant section in reference guide}
     */
    interface IProjectSecurity extends projects.IProjectDocument {
        model: IModel;
        container: projects.IProject;
        load(): ProjectSecurity;
        load(callback: (element: ProjectSecurity) => void): any;
        userRoles: internal.IList<IUserRole>;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project+Security relevant section in reference guide}
     */
    class ProjectSecurity extends projects.ProjectDocument implements IProjectSecurity {
        model: IModel;
        static typeName: string;
        container: projects.Project;
        private __securityLevel;
        securityLevel: SecurityLevel;
        private __checkSecurity;
        checkSecurity: boolean;
        private __userRoles;
        userRoles: internal.IList<UserRole>;
        private __adminUserName;
        adminUserName: string;
        private __adminPassword;
        adminPassword: string;
        private __adminUserRoleName;
        adminUserRoleName: string;
        private __enableDemoUsers;
        enableDemoUsers: boolean;
        private __demoUsers;
        demoUsers: internal.IList<DemoUser>;
        private __enableGuestAccess;
        enableGuestAccess: boolean;
        private __guestUserRoleName;
        guestUserRoleName: string;
        private __signInMicroflow;
        signInMicroflow: microflows.IMicroflow;
        signInMicroflowQualifiedName: string;
        private __passwordPolicySettings;
        passwordPolicySettings: PasswordPolicySettings;
        private __fileDocumentAccess;
        /**
         * In version 6.0.0: deprecated
         */
        fileDocumentAccess: FileDocumentAccessRuleContainer;
        private __imageAccess;
        /**
         * In version 6.0.0: deprecated
         */
        imageAccess: ImageAccessRuleContainer;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new ProjectSecurity unit in the SDK and on the server.
         * Expects one argument, a projects.Project in which this unit is contained.
         */
        static createIn(container: projects.IProject): ProjectSecurity;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/User+Role relevant section in reference guide}
     */
    interface IUserRole extends internal.IElement {
        model: IModel;
        container: IProjectSecurity;
        load(): UserRole;
        load(callback: (element: UserRole) => void): any;
        name: string;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/User+Role relevant section in reference guide}
     */
    class UserRole extends internal.Element implements IUserRole {
        model: IModel;
        static typeName: string;
        container: ProjectSecurity;
        private __guid;
        guid: string;
        private __name;
        name: string;
        private __description;
        description: string;
        private __moduleRoles;
        moduleRoles: internal.IList<IModuleRole>;
        moduleRolesQualifiedNames: string[];
        private __manageAllRoles;
        manageAllRoles: boolean;
        private __manageableRoles;
        manageableRoles: internal.IList<IUserRole>;
        manageableRolesQualifiedNames: string[];
        private __manageUsersWithoutRoles;
        manageUsersWithoutRoles: boolean;
        private __checkSecurity;
        checkSecurity: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSecurity): UserRole;
        static create(model: IModel): UserRole;
        _initializeDefaultProperties(): void;
    }
}
import { domainmodels } from './domainmodels';
import { microflows } from './microflows';
import { IModel } from './base-model';
