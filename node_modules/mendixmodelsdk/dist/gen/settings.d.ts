import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace settings {
    class CertificateType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Authority: CertificateType;
        static Client: CertificateType;
    }
    class DatabaseType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Hsqldb: DatabaseType;
        static SqlServer: DatabaseType;
        static MySql: DatabaseType;
        static Oracle: DatabaseType;
        static PostgreSql: DatabaseType;
    }
    class FirstDayOfWeekEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Default: FirstDayOfWeekEnum;
        static Sunday: FirstDayOfWeekEnum;
        static Monday: FirstDayOfWeekEnum;
        static Tuesday: FirstDayOfWeekEnum;
        static Wednesday: FirstDayOfWeekEnum;
        static Thursday: FirstDayOfWeekEnum;
        static Friday: FirstDayOfWeekEnum;
        static Saturday: FirstDayOfWeekEnum;
    }
    class HashAlgorithmType extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static BCrypt: HashAlgorithmType;
        static SSHA256: HashAlgorithmType;
        static SHA256: HashAlgorithmType;
        static MD5: HashAlgorithmType;
    }
    class RoundingMode extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static HalfUp: RoundingMode;
        static HalfEven: RoundingMode;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Settings`.
     */
    interface ICertificate extends internal.IElement {
        model: IModel;
        container: ICertificateSettings;
        load(): Certificate;
        load(callback: (element: Certificate) => void): any;
    }
    class Certificate extends internal.Element implements ICertificate {
        model: IModel;
        static typeName: string;
        container: CertificateSettings;
        private __type;
        type: CertificateType;
        private __data;
        data: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: CertificateSettings): Certificate;
        static create(model: IModel): Certificate;
        _initializeDefaultProperties(): void;
    }
    interface IProjectSettingsPart extends internal.IElement {
        model: IModel;
        container: IProjectSettings;
        load(): ProjectSettingsPart;
        load(callback: (element: ProjectSettingsPart) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ProjectSettingsPart extends internal.Element implements IProjectSettingsPart {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ICertificateSettings extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): CertificateSettings;
        load(callback: (element: CertificateSettings) => void): any;
    }
    class CertificateSettings extends ProjectSettingsPart implements ICertificateSettings {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __certificates;
        certificates: internal.IList<Certificate>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): CertificateSettings;
        static create(model: IModel): CertificateSettings;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Configuration relevant section in reference guide}
     */
    interface IConfiguration extends internal.IElement {
        model: IModel;
        container: IConfigurationSettings;
        load(): Configuration;
        load(callback: (element: Configuration) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Configuration relevant section in reference guide}
     */
    class Configuration extends internal.Element implements IConfiguration {
        model: IModel;
        static typeName: string;
        container: ConfigurationSettings;
        private __name;
        name: string;
        private __applicationRootUrl;
        applicationRootUrl: string;
        private __runtimePortNumber;
        runtimePortNumber: number;
        private __adminPortNumber;
        adminPortNumber: number;
        private __runtimePortOnlyLocal;
        runtimePortOnlyLocal: boolean;
        private __adminPortOnlyLocal;
        adminPortOnlyLocal: boolean;
        private __maxJavaHeapSize;
        maxJavaHeapSize: number;
        private __emulateCloudSecurity;
        emulateCloudSecurity: boolean;
        private __extraJvmParameters;
        extraJvmParameters: string;
        private __databaseType;
        databaseType: DatabaseType;
        private __databaseUrl;
        databaseUrl: string;
        private __databaseName;
        databaseName: string;
        private __databaseUseIntegratedSecurity;
        databaseUseIntegratedSecurity: boolean;
        private __databaseUserName;
        databaseUserName: string;
        private __databasePassword;
        databasePassword: string;
        private __customSettings;
        customSettings: internal.IList<CustomSetting>;
        private __constantValues;
        constantValues: internal.IList<ConstantValue>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ConfigurationSettings): Configuration;
        static create(model: IModel): Configuration;
        _initializeDefaultProperties(): void;
    }
    interface IConfigurationSettings extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): ConfigurationSettings;
        load(callback: (element: ConfigurationSettings) => void): any;
    }
    class ConfigurationSettings extends ProjectSettingsPart implements IConfigurationSettings {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __configurations;
        configurations: internal.IList<Configuration>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): ConfigurationSettings;
        static create(model: IModel): ConfigurationSettings;
        _initializeDefaultProperties(): void;
    }
    interface IConstantValue extends internal.IElement {
        model: IModel;
        container: IConfiguration;
        load(): ConstantValue;
        load(callback: (element: ConstantValue) => void): any;
    }
    class ConstantValue extends internal.Element implements IConstantValue {
        model: IModel;
        static typeName: string;
        container: Configuration;
        private __constant;
        constant: constants.IConstant;
        constantQualifiedName: string;
        private __value;
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Configuration): ConstantValue;
        static create(model: IModel): ConstantValue;
        _initializeDefaultProperties(): void;
    }
    interface ICustomSetting extends internal.IElement {
        model: IModel;
        container: IConfiguration;
        load(): CustomSetting;
        load(callback: (element: CustomSetting) => void): any;
    }
    class CustomSetting extends internal.Element implements ICustomSetting {
        model: IModel;
        static typeName: string;
        container: Configuration;
        private __name;
        name: string;
        private __value;
        value: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Configuration): CustomSetting;
        static create(model: IModel): CustomSetting;
        _initializeDefaultProperties(): void;
    }
    interface IIntegrationProjectSettingsPart extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): IntegrationProjectSettingsPart;
        load(callback: (element: IntegrationProjectSettingsPart) => void): any;
    }
    class IntegrationProjectSettingsPart extends ProjectSettingsPart implements IIntegrationProjectSettingsPart {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): IntegrationProjectSettingsPart;
        static create(model: IModel): IntegrationProjectSettingsPart;
        _initializeDefaultProperties(): void;
    }
    interface ILanguage extends internal.IElement {
        model: IModel;
        container: ILanguageSettings;
        load(): Language;
        load(callback: (element: Language) => void): any;
    }
    class Language extends internal.Element implements ILanguage {
        model: IModel;
        static typeName: string;
        container: LanguageSettings;
        private __code;
        code: string;
        private __checkCompleteness;
        checkCompleteness: boolean;
        private __customDateFormat;
        customDateFormat: string;
        private __customTimeFormat;
        customTimeFormat: string;
        private __customDateTimeFormat;
        customDateTimeFormat: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: LanguageSettings): Language;
        static create(model: IModel): Language;
        _initializeDefaultProperties(): void;
    }
    interface ILanguageSettings extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): LanguageSettings;
        load(callback: (element: LanguageSettings) => void): any;
    }
    class LanguageSettings extends ProjectSettingsPart implements ILanguageSettings {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __defaultLanguageCode;
        defaultLanguageCode: string;
        private __languages;
        languages: internal.IList<Language>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): LanguageSettings;
        static create(model: IModel): LanguageSettings;
        _initializeDefaultProperties(): void;
    }
    interface IModelerSettings extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): ModelerSettings;
        load(callback: (element: ModelerSettings) => void): any;
    }
    class ModelerSettings extends ProjectSettingsPart implements IModelerSettings {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __lowerCaseMicroflowVariables;
        lowerCaseMicroflowVariables: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): ModelerSettings;
        static create(model: IModel): ModelerSettings;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project+Settings relevant section in reference guide}
     */
    interface IProjectSettings extends projects.IProjectDocument {
        model: IModel;
        container: projects.IProject;
        load(): ProjectSettings;
        load(callback: (element: ProjectSettings) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Project+Settings relevant section in reference guide}
     */
    class ProjectSettings extends projects.ProjectDocument implements IProjectSettings {
        model: IModel;
        static typeName: string;
        container: projects.Project;
        private __settingsParts;
        settingsParts: internal.IList<ProjectSettingsPart>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new ProjectSettings unit in the SDK and on the server.
         * Expects one argument, a projects.Project in which this unit is contained.
         */
        static createIn(container: projects.IProject): ProjectSettings;
        _initializeDefaultProperties(): void;
    }
    interface IRuntimeSettings extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): RuntimeSettings;
        load(callback: (element: RuntimeSettings) => void): any;
    }
    class RuntimeSettings extends ProjectSettingsPart implements IRuntimeSettings {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __afterStartupMicroflow;
        afterStartupMicroflow: microflows.IMicroflow;
        afterStartupMicroflowQualifiedName: string;
        private __beforeShutdownMicroflow;
        beforeShutdownMicroflow: microflows.IMicroflow;
        beforeShutdownMicroflowQualifiedName: string;
        private __healthCheckMicroflow;
        healthCheckMicroflow: microflows.IMicroflow;
        healthCheckMicroflowQualifiedName: string;
        private __firstDayOfWeek;
        firstDayOfWeek: FirstDayOfWeekEnum;
        private __defaultTimeZoneCode;
        defaultTimeZoneCode: string;
        private __scheduledEventTimeZoneCode;
        scheduledEventTimeZoneCode: string;
        private __hashAlgorithm;
        hashAlgorithm: HashAlgorithmType;
        private __roundingMode;
        roundingMode: RoundingMode;
        private __allowUserMultipleSessions;
        allowUserMultipleSessions: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): RuntimeSettings;
        static create(model: IModel): RuntimeSettings;
        _initializeDefaultProperties(): void;
    }
    interface IWebUIProjectSettingsPart extends IProjectSettingsPart {
        model: IModel;
        container: IProjectSettings;
        load(): WebUIProjectSettingsPart;
        load(callback: (element: WebUIProjectSettingsPart) => void): any;
    }
    class WebUIProjectSettingsPart extends ProjectSettingsPart implements IWebUIProjectSettingsPart {
        model: IModel;
        static typeName: string;
        container: ProjectSettings;
        private __theme;
        theme: string;
        private __feedbackWidgetUpdated;
        feedbackWidgetUpdated: boolean;
        private __enableWidgetBundling;
        enableWidgetBundling: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ProjectSettings): WebUIProjectSettingsPart;
        static create(model: IModel): WebUIProjectSettingsPart;
        _initializeDefaultProperties(): void;
    }
}
import { constants } from './constants';
import { microflows } from './microflows';
import { IModel } from './base-model';
