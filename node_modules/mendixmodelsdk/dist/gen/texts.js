var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var texts;
(function (texts) {
    var SystemText = (function (_super) {
        __extends(SystemText, _super);
        function SystemText(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__text = new internal.PartProperty(SystemText, this, "text", null, true);
            this.__key = new internal.PrimitiveProperty(SystemText, this, "key", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new SystemText() cannot be invoked directly, please use 'model.texts.createSystemText()'");
        }
        Object.defineProperty(SystemText.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SystemText.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * The new SystemText will be automatically stored in the 'systemTexts' property of the parent SystemTextCollection element passed as argument.
         */
        SystemText.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SystemText, "systemTexts", true);
        };
        /*
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SystemText.create = function (model) {
            return internal.instancehelpers.createElement(model, SystemText);
        };
        SystemText.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.text = Text.create(this.model);
        };
        SystemText.typeName = "Texts$SystemText";
        SystemText.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "text": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return SystemText;
    })(internal.Element);
    texts.SystemText = SystemText;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/System+Texts relevant section in reference guide}
     */
    var SystemTextCollection = (function (_super) {
        __extends(SystemTextCollection, _super);
        function SystemTextCollection(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__systemTexts = new internal.PartListProperty(SystemTextCollection, this, "systemTexts", []);
            this._containmentName = "projectDocuments";
        }
        Object.defineProperty(SystemTextCollection.prototype, "systemTexts", {
            get: function () { return this.__systemTexts.get(); },
            set: function (newValue) { this.__systemTexts.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new SystemTextCollection unit in the SDK and on the server.
         * Expects one argument, a projects.Project in which this unit is contained.
         */
        SystemTextCollection.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, SystemTextCollection);
        };
        SystemTextCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SystemTextCollection.typeName = "Texts$SystemTextCollection";
        SystemTextCollection.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return SystemTextCollection;
    })(projects_1.projects.ProjectDocument);
    texts.SystemTextCollection = SystemTextCollection;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Translatable+Texts relevant section in reference guide}
     */
    var Text = (function (_super) {
        __extends(Text, _super);
        function Text(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__translations = new internal.PartListProperty(Text, this, "translations", []);
            if (arguments.length < 4)
                throw new Error("new Text() cannot be invoked directly, please use 'model.texts.createText()'");
        }
        Object.defineProperty(Text.prototype, "translations", {
            get: function () { return this.__translations.get(); },
            set: function (newValue) { this.__translations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Text instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Text.create = function (model) {
            return internal.instancehelpers.createElement(model, Text);
        };
        Text.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.translations.replace([(function (translation) {
                    translation.languageCode = "en_US";
                    translation.text = "";
                    return translation;
                })(Translation.create(this.model))]);
        };
        Text.typeName = "Texts$Text";
        Text.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Text;
    })(internal.Element);
    texts.Text = Text;
    var Translation = (function (_super) {
        __extends(Translation, _super);
        function Translation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__languageCode = new internal.PrimitiveProperty(Translation, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
            this.__text = new internal.PrimitiveProperty(Translation, this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Translation() cannot be invoked directly, please use 'model.texts.createTranslation()'");
        }
        Object.defineProperty(Translation.prototype, "languageCode", {
            get: function () { return this.__languageCode.get(); },
            set: function (newValue) { this.__languageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Translation.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Translation instance in the SDK and on the server.
         * The new Translation will be automatically stored in the 'translations' property of the parent Text element passed as argument.
         */
        Translation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Translation, "translations", true);
        };
        /*
         * Creates and returns a new Translation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Translation.create = function (model) {
            return internal.instancehelpers.createElement(model, Translation);
        };
        Translation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Translation.typeName = "Texts$Translation";
        Translation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return Translation;
    })(internal.Element);
    texts.Translation = Translation;
})(texts = exports.texts || (exports.texts = {}));
