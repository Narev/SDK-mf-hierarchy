import * as internal from '../sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from './projects';
export declare namespace webservices {
    class AppServiceState extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Draft: AppServiceState;
        static Consumable: AppServiceState;
        static Deprecated: AppServiceState;
    }
    class HeaderAuthentication extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static None: HeaderAuthentication;
        static UsernamePassword: HeaderAuthentication;
        static Custom: HeaderAuthentication;
    }
    class SoapVersion extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static Soap11: SoapVersion;
        static Soap12: SoapVersion;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `WebServices`.
     */
    interface IDataMember extends internal.IElement {
        model: IModel;
        load(): DataMember;
        load(callback: (element: DataMember) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataMember extends internal.Element implements IDataMember {
        model: IModel;
        static typeName: string;
        private __isLockedByContract;
        isLockedByContract: boolean;
        private __exposedName;
        exposedName: string;
        private __isOptionalByContract;
        isOptionalByContract: boolean;
        private __isOptional;
        isOptional: boolean;
        private __isNillableByContract;
        isNillableByContract: boolean;
        private __isNillable;
        isNillable: boolean;
        private __isKey;
        isKey: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IDataEntityBase extends IDataMember {
        model: IModel;
        load(): DataEntityBase;
        load(callback: (element: DataEntityBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataEntityBase extends DataMember implements IDataEntityBase {
        model: IModel;
        static typeName: string;
        private __childMembers;
        childMembers: internal.IList<DataMember>;
        private __entity;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        private __exposedItemName;
        exposedItemName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IDataAssociation extends IDataEntityBase {
        model: IModel;
        container: IDataEntityBase;
        load(): DataAssociation;
        load(callback: (element: DataAssociation) => void): any;
    }
    class DataAssociation extends DataEntityBase implements IDataAssociation {
        model: IModel;
        static typeName: string;
        container: DataEntityBase;
        private __associationByContract;
        associationByContract: appservices.MsdAssociation;
        private __association;
        association: domainmodels.IAssociationBase;
        associationQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataEntityBase): DataAssociation;
        static create(model: IModel): DataAssociation;
        _initializeDefaultProperties(): void;
    }
    interface IDataAttribute extends IDataMember {
        model: IModel;
        container: IDataEntityBase;
        load(): DataAttribute;
        load(callback: (element: DataAttribute) => void): any;
    }
    class DataAttribute extends DataMember implements IDataAttribute {
        model: IModel;
        static typeName: string;
        container: DataEntityBase;
        private __attributeByContract;
        attributeByContract: appservices.MsdAttribute;
        private __attribute;
        attribute: domainmodels.IAttribute;
        attributeQualifiedName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DataEntityBase): DataAttribute;
        static create(model: IModel): DataAttribute;
        _initializeDefaultProperties(): void;
    }
    interface IDataEntity extends IDataEntityBase {
        model: IModel;
        load(): DataEntity;
        load(callback: (element: DataEntity) => void): any;
    }
    class DataEntity extends DataEntityBase implements IDataEntity {
        model: IModel;
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): DataEntity;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Imported+Web+Services relevant section in reference guide}
     */
    interface IImportedWebService extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): ImportedWebService;
        load(callback: (element: ImportedWebService) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Imported+Web+Services relevant section in reference guide}
     */
    class ImportedWebService extends projects.Document implements IImportedWebService {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __wsdlDescription;
        wsdlDescription: WsdlDescription;
        private __wsdlUrl;
        wsdlUrl: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new ImportedWebService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): ImportedWebService;
        _initializeDefaultProperties(): void;
    }
    interface IOperationInfo extends internal.IElement {
        model: IModel;
        container: IServiceInfo;
        load(): OperationInfo;
        load(callback: (element: OperationInfo) => void): any;
    }
    class OperationInfo extends internal.Element implements IOperationInfo {
        model: IModel;
        static typeName: string;
        container: ServiceInfo;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __soapAction;
        soapAction: string;
        private __requestHeaderRpcElement;
        requestHeaderRpcElement: RpcOperationElement;
        private __requestBodyRpcElement;
        requestBodyRpcElement: RpcOperationElement;
        private __responseBodyRpcElement;
        responseBodyRpcElement: RpcOperationElement;
        private __requestHeaderElementName;
        requestHeaderElementName: string;
        private __requestHeaderEncoded;
        requestHeaderEncoded: boolean;
        private __requestHeaderPartEncoding;
        requestHeaderPartEncoding: PartEncoding;
        private __requestBodyEncoded;
        requestBodyEncoded: boolean;
        private __requestBodyElementName;
        requestBodyElementName: string;
        private __requestBodyPartEncodings;
        requestBodyPartEncodings: internal.IList<PartEncoding>;
        private __responseBodyElementName;
        responseBodyElementName: string;
        private __allowSimpleMappingInheritance;
        allowSimpleMappingInheritance: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: ServiceInfo): OperationInfo;
        static create(model: IModel): OperationInfo;
        _initializeDefaultProperties(): void;
    }
    interface IPartEncoding extends internal.IElement {
        model: IModel;
        container: IOperationInfo;
        load(): PartEncoding;
        load(callback: (element: PartEncoding) => void): any;
    }
    class PartEncoding extends internal.Element implements IPartEncoding {
        model: IModel;
        static typeName: string;
        container: OperationInfo;
        private __partName;
        partName: string;
        private __partXsdType;
        partXsdType: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: OperationInfo): PartEncoding;
        static create(model: IModel): PartEncoding;
        _initializeDefaultProperties(): void;
    }
    interface IPublishedServiceBase extends projects.IDocument {
        model: IModel;
        container: projects.IFolderBase;
        load(): PublishedServiceBase;
        load(callback: (element: PublishedServiceBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class PublishedServiceBase extends projects.Document implements IPublishedServiceBase {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        private __versionedServices;
        versionedServices: internal.IList<VersionedService>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+App+Services relevant section in reference guide}
     */
    interface IPublishedAppService extends IPublishedServiceBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): PublishedAppService;
        load(callback: (element: PublishedAppService) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+App+Services relevant section in reference guide}
     */
    class PublishedAppService extends PublishedServiceBase implements IPublishedAppService {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedAppService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedAppService;
        _initializeDefaultProperties(): void;
    }
    interface IPublishedResource extends internal.IElement {
        model: IModel;
        load(): PublishedResource;
        load(callback: (element: PublishedResource) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class PublishedResource extends internal.Element implements IPublishedResource {
        model: IModel;
        static typeName: string;
        private __dataEntity;
        dataEntity: DataEntity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IPublishedOperation extends IPublishedResource {
        model: IModel;
        container: IVersionedService;
        load(): PublishedOperation;
        load(callback: (element: PublishedOperation) => void): any;
    }
    class PublishedOperation extends PublishedResource implements IPublishedOperation {
        model: IModel;
        static typeName: string;
        container: VersionedService;
        private __isLockedByContract;
        isLockedByContract: boolean;
        private __name;
        name: string;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        private __description;
        description: string;
        private __documentation;
        documentation: string;
        private __microflow;
        microflow: microflows.IMicroflow;
        microflowQualifiedName: string;
        private __parameters;
        parameters: internal.IList<PublishedParameter>;
        private __returnTypeNameByContract;
        returnTypeNameByContract: string;
        private __returnTypeSpecificationByContract;
        returnTypeSpecificationByContract: string;
        private __entityExposedNameByContract;
        entityExposedNameByContract: string;
        private __entityExposedName;
        entityExposedName: string;
        private __returnType;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        returnType: string;
        private __returnTypeIsOptional;
        returnTypeIsOptional: boolean;
        private __returnTypeIsNillable;
        returnTypeIsNillable: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: VersionedService): PublishedOperation;
        static create(model: IModel): PublishedOperation;
        _initializeDefaultProperties(): void;
    }
    interface IPublishedParameter extends internal.IElement {
        model: IModel;
        container: IPublishedOperation;
        load(): PublishedParameter;
        load(callback: (element: PublishedParameter) => void): any;
    }
    class PublishedParameter extends internal.Element implements IPublishedParameter {
        model: IModel;
        static typeName: string;
        container: PublishedOperation;
        private __isLockedByContract;
        isLockedByContract: boolean;
        private __parameter;
        parameter: microflows.IMicroflowParameter;
        parameterQualifiedName: string;
        private __parameterByContract;
        parameterByContract: appservices.MsdMicroflowParameter;
        private __entityExposedName;
        entityExposedName: string;
        private __isOptionalByContract;
        isOptionalByContract: boolean;
        private __isOptional;
        isOptional: boolean;
        private __isNillable;
        isNillable: boolean;
        private __entityExposedItemNameByContract;
        entityExposedItemNameByContract: string;
        private __entityExposedItemName;
        entityExposedItemName: string;
        private __type;
        /**
         * The value of this property is conceptually of type Common$DataType.
         */
        type: string;
        private __dataEntity;
        dataEntity: DataEntity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: PublishedOperation): PublishedParameter;
        static create(model: IModel): PublishedParameter;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    interface IPublishedWebService extends IPublishedServiceBase {
        model: IModel;
        container: projects.IFolderBase;
        load(): PublishedWebService;
        load(callback: (element: PublishedWebService) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    class PublishedWebService extends PublishedServiceBase implements IPublishedWebService {
        model: IModel;
        static typeName: string;
        container: projects.FolderBase;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedWebService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedWebService;
        _initializeDefaultProperties(): void;
    }
    interface IRpcMessagePartElement extends internal.IElement {
        model: IModel;
        container: IRpcOperationElement;
        load(): RpcMessagePartElement;
        load(callback: (element: RpcMessagePartElement) => void): any;
    }
    class RpcMessagePartElement extends internal.Element implements IRpcMessagePartElement {
        model: IModel;
        static typeName: string;
        container: RpcOperationElement;
        private __partName;
        partName: string;
        private __typeName;
        typeName: string;
        private __elementName;
        elementName: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: RpcOperationElement): RpcMessagePartElement;
        static create(model: IModel): RpcMessagePartElement;
        _initializeDefaultProperties(): void;
    }
    interface IRpcOperationElement extends internal.IElement {
        model: IModel;
        container: IOperationInfo;
        load(): RpcOperationElement;
        load(callback: (element: RpcOperationElement) => void): any;
    }
    class RpcOperationElement extends internal.Element implements IRpcOperationElement {
        model: IModel;
        static typeName: string;
        container: OperationInfo;
        private __name;
        name: string;
        private __messagePartElements;
        messagePartElements: internal.IList<RpcMessagePartElement>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: OperationInfo): RpcOperationElement;
        static create(model: IModel): RpcOperationElement;
        _initializeDefaultProperties(): void;
    }
    interface IServiceInfo extends internal.IElement {
        model: IModel;
        container: IWsdlDescription;
        load(): ServiceInfo;
        load(callback: (element: ServiceInfo) => void): any;
    }
    class ServiceInfo extends internal.Element implements IServiceInfo {
        model: IModel;
        static typeName: string;
        container: WsdlDescription;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __portName;
        portName: string;
        private __location;
        location: string;
        private __soapVersion;
        soapVersion: SoapVersion;
        private __locationConstant;
        locationConstant: constants.IConstant;
        locationConstantQualifiedName: string;
        private __operations;
        operations: internal.IList<OperationInfo>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WsdlDescription): ServiceInfo;
        static create(model: IModel): ServiceInfo;
        _initializeDefaultProperties(): void;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    interface IVersionedService extends internal.IElement {
        model: IModel;
        container: IPublishedServiceBase;
        load(): VersionedService;
        load(callback: (element: VersionedService) => void): any;
    }
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    class VersionedService extends internal.Element implements IVersionedService {
        model: IModel;
        static typeName: string;
        container: PublishedServiceBase;
        private __documentation;
        documentation: string;
        private __targetNamespace;
        targetNamespace: string;
        private __headerAuthentication;
        headerAuthentication: HeaderAuthentication;
        private __operations;
        operations: internal.IList<PublishedOperation>;
        private __isLockedByContract;
        isLockedByContract: boolean;
        private __enumerationsByContract;
        enumerationsByContract: appservices.MsdEnumerationContainer;
        private __headerImportMapping;
        headerImportMapping: importmappings.IImportMapping;
        headerImportMappingQualifiedName: string;
        private __headerMicroflow;
        headerMicroflow: microflows.IMicroflow;
        headerMicroflowQualifiedName: string;
        private __versionNumber;
        versionNumber: number;
        private __caption;
        caption: string;
        private __description;
        description: string;
        private __appServiceState;
        appServiceState: AppServiceState;
        private __image;
        image: images.IImage;
        imageQualifiedName: string;
        private __validate;
        validate: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: PublishedServiceBase): VersionedService;
        static create(model: IModel): VersionedService;
        _initializeDefaultProperties(): void;
    }
    interface IWsdlDescription extends internal.IElement {
        model: IModel;
        load(): WsdlDescription;
        load(callback: (element: WsdlDescription) => void): any;
    }
    class WsdlDescription extends internal.Element implements IWsdlDescription {
        model: IModel;
        static typeName: string;
        private __wsdlEntries;
        wsdlEntries: internal.IList<WsdlEntry>;
        private __schemaEntries;
        schemaEntries: internal.IList<xmlschemas.XmlSchemaEntry>;
        private __services;
        services: internal.IList<ServiceInfo>;
        private __targetNamespace;
        targetNamespace: string;
        private __importsHaveLocations;
        importsHaveLocations: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): WsdlDescription;
        _initializeDefaultProperties(): void;
    }
    interface IWsdlEntry extends internal.IElement {
        model: IModel;
        container: IWsdlDescription;
        load(): WsdlEntry;
        load(callback: (element: WsdlEntry) => void): any;
    }
    class WsdlEntry extends internal.Element implements IWsdlEntry {
        model: IModel;
        static typeName: string;
        container: WsdlDescription;
        private __location;
        location: string;
        private __contents;
        contents: string;
        private __localizedLocationFormat;
        localizedLocationFormat: string;
        private __localizedContentsFormat;
        localizedContentsFormat: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: WsdlDescription): WsdlEntry;
        static create(model: IModel): WsdlEntry;
        _initializeDefaultProperties(): void;
    }
}
import { appservices } from './appservices';
import { constants } from './constants';
import { domainmodels } from './domainmodels';
import { images } from './images';
import { importmappings } from './importmappings';
import { microflows } from './microflows';
import { xmlschemas } from './xmlschemas';
import { IModel } from './base-model';
