var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var webservices;
(function (webservices) {
    var AppServiceState = (function (_super) {
        __extends(AppServiceState, _super);
        function AppServiceState() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "webservices.AppServiceState";
        }
        AppServiceState.Draft = new AppServiceState("Draft", {});
        AppServiceState.Consumable = new AppServiceState("Consumable", {});
        AppServiceState.Deprecated = new AppServiceState("Deprecated", {});
        return AppServiceState;
    })(internal.IEnum);
    webservices.AppServiceState = AppServiceState;
    var HeaderAuthentication = (function (_super) {
        __extends(HeaderAuthentication, _super);
        function HeaderAuthentication() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "webservices.HeaderAuthentication";
        }
        HeaderAuthentication.None = new HeaderAuthentication("None", {});
        HeaderAuthentication.UsernamePassword = new HeaderAuthentication("UsernamePassword", {});
        HeaderAuthentication.Custom = new HeaderAuthentication("Custom", {});
        return HeaderAuthentication;
    })(internal.IEnum);
    webservices.HeaderAuthentication = HeaderAuthentication;
    var SoapVersion = (function (_super) {
        __extends(SoapVersion, _super);
        function SoapVersion() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "webservices.SoapVersion";
        }
        SoapVersion.Soap11 = new SoapVersion("Soap11", {});
        SoapVersion.Soap12 = new SoapVersion("Soap12", {});
        return SoapVersion;
    })(internal.IEnum);
    webservices.SoapVersion = SoapVersion;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DataMember = (function (_super) {
        __extends(DataMember, _super);
        function DataMember(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isLockedByContract = new internal.PrimitiveProperty(DataMember, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__exposedName = new internal.PrimitiveProperty(DataMember, this, "exposedName", "", internal.PrimitiveTypeEnum.String);
            this.__isOptionalByContract = new internal.PrimitiveProperty(DataMember, this, "isOptionalByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isOptional = new internal.PrimitiveProperty(DataMember, this, "isOptional", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isNillableByContract = new internal.PrimitiveProperty(DataMember, this, "isNillableByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isNillable = new internal.PrimitiveProperty(DataMember, this, "isNillable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isKey = new internal.PrimitiveProperty(DataMember, this, "isKey", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DataMember() cannot be invoked directly, please use 'model.webservices.createDataMember()'");
        }
        Object.defineProperty(DataMember.prototype, "isLockedByContract", {
            get: function () { return this.__isLockedByContract.get(); },
            set: function (newValue) { this.__isLockedByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "exposedName", {
            get: function () { return this.__exposedName.get(); },
            set: function (newValue) { this.__exposedName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "isOptionalByContract", {
            get: function () { return this.__isOptionalByContract.get(); },
            set: function (newValue) { this.__isOptionalByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "isOptional", {
            get: function () { return this.__isOptional.get(); },
            set: function (newValue) { this.__isOptional.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "isNillableByContract", {
            get: function () { return this.__isNillableByContract.get(); },
            set: function (newValue) { this.__isNillableByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "isNillable", {
            get: function () { return this.__isNillable.get(); },
            set: function (newValue) { this.__isNillable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataMember.prototype, "isKey", {
            get: function () { return this.__isKey.get(); },
            set: function (newValue) { this.__isKey.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DataMember.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataMember.typeName = "WebServices$DataMember";
        DataMember.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataMember;
    })(internal.Element);
    webservices.DataMember = DataMember;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DataEntityBase = (function (_super) {
        __extends(DataEntityBase, _super);
        function DataEntityBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__childMembers = new internal.PartListProperty(DataEntityBase, this, "childMembers", []);
            this.__entity = new internal.ByNameReferenceProperty(DataEntityBase, this, "entity", null, "DomainModels$Entity");
            this.__exposedItemName = new internal.PrimitiveProperty(DataEntityBase, this, "exposedItemName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new DataEntityBase() cannot be invoked directly, please use 'model.webservices.createDataEntityBase()'");
        }
        Object.defineProperty(DataEntityBase.prototype, "childMembers", {
            get: function () { return this.__childMembers.get(); },
            set: function (newValue) { this.__childMembers.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataEntityBase.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataEntityBase.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataEntityBase.prototype, "exposedItemName", {
            get: function () { return this.__exposedItemName.get(); },
            set: function (newValue) { this.__exposedItemName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DataEntityBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataEntityBase.typeName = "WebServices$DataEntityBase";
        DataEntityBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataEntityBase;
    })(DataMember);
    webservices.DataEntityBase = DataEntityBase;
    var DataAssociation = (function (_super) {
        __extends(DataAssociation, _super);
        function DataAssociation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__associationByContract = new internal.PartProperty(DataAssociation, this, "associationByContract", null, false);
            this.__association = new internal.ByNameReferenceProperty(DataAssociation, this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4)
                throw new Error("new DataAssociation() cannot be invoked directly, please use 'model.webservices.createDataAssociation()'");
        }
        Object.defineProperty(DataAssociation.prototype, "associationByContract", {
            get: function () { return this.__associationByContract.get(); },
            set: function (newValue) { this.__associationByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataAssociation.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataAssociation.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataAssociation instance in the SDK and on the server.
         * The new DataAssociation will be automatically stored in the 'childMembers' property of the parent DataEntityBase element passed as argument.
         */
        DataAssociation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataAssociation, "childMembers", true);
        };
        /*
         * Creates and returns a new DataAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataAssociation.create = function (model) {
            return internal.instancehelpers.createElement(model, DataAssociation);
        };
        DataAssociation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataAssociation.typeName = "WebServices$DataAssociation";
        DataAssociation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataAssociation;
    })(DataEntityBase);
    webservices.DataAssociation = DataAssociation;
    var DataAttribute = (function (_super) {
        __extends(DataAttribute, _super);
        function DataAttribute(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__attributeByContract = new internal.PartProperty(DataAttribute, this, "attributeByContract", null, false);
            this.__attribute = new internal.ByNameReferenceProperty(DataAttribute, this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4)
                throw new Error("new DataAttribute() cannot be invoked directly, please use 'model.webservices.createDataAttribute()'");
        }
        Object.defineProperty(DataAttribute.prototype, "attributeByContract", {
            get: function () { return this.__attributeByContract.get(); },
            set: function (newValue) { this.__attributeByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataAttribute.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataAttribute.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DataAttribute instance in the SDK and on the server.
         * The new DataAttribute will be automatically stored in the 'childMembers' property of the parent DataEntityBase element passed as argument.
         */
        DataAttribute.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataAttribute, "childMembers", true);
        };
        /*
         * Creates and returns a new DataAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataAttribute.create = function (model) {
            return internal.instancehelpers.createElement(model, DataAttribute);
        };
        DataAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataAttribute.typeName = "WebServices$DataAttribute";
        DataAttribute.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataAttribute;
    })(DataMember);
    webservices.DataAttribute = DataAttribute;
    var DataEntity = (function (_super) {
        __extends(DataEntity, _super);
        function DataEntity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DataEntity() cannot be invoked directly, please use 'model.webservices.createDataEntity()'");
        }
        /*
         * Creates and returns a new DataEntity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataEntity.create = function (model) {
            return internal.instancehelpers.createElement(model, DataEntity);
        };
        DataEntity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DataEntity.typeName = "WebServices$DataEntity";
        DataEntity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return DataEntity;
    })(DataEntityBase);
    webservices.DataEntity = DataEntity;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Imported+Web+Services relevant section in reference guide}
     */
    var ImportedWebService = (function (_super) {
        __extends(ImportedWebService, _super);
        function ImportedWebService(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__wsdlDescription = new internal.PartProperty(ImportedWebService, this, "wsdlDescription", null, false);
            this.__wsdlUrl = new internal.PrimitiveProperty(ImportedWebService, this, "wsdlUrl", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(ImportedWebService.prototype, "wsdlDescription", {
            get: function () { return this.__wsdlDescription.get(); },
            set: function (newValue) { this.__wsdlDescription.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportedWebService.prototype, "wsdlUrl", {
            get: function () { return this.__wsdlUrl.get(); },
            set: function (newValue) { this.__wsdlUrl.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ImportedWebService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        ImportedWebService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ImportedWebService);
        };
        ImportedWebService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ImportedWebService.typeName = "WebServices$ImportedWebService";
        ImportedWebService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return ImportedWebService;
    })(projects_1.projects.Document);
    webservices.ImportedWebService = ImportedWebService;
    var OperationInfo = (function (_super) {
        __extends(OperationInfo, _super);
        function OperationInfo(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(OperationInfo, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(OperationInfo, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__soapAction = new internal.PrimitiveProperty(OperationInfo, this, "soapAction", "", internal.PrimitiveTypeEnum.String);
            this.__requestHeaderRpcElement = new internal.PartProperty(OperationInfo, this, "requestHeaderRpcElement", null, true);
            this.__requestBodyRpcElement = new internal.PartProperty(OperationInfo, this, "requestBodyRpcElement", null, true);
            this.__responseBodyRpcElement = new internal.PartProperty(OperationInfo, this, "responseBodyRpcElement", null, true);
            this.__requestHeaderElementName = new internal.PrimitiveProperty(OperationInfo, this, "requestHeaderElementName", "", internal.PrimitiveTypeEnum.String);
            this.__requestHeaderEncoded = new internal.PrimitiveProperty(OperationInfo, this, "requestHeaderEncoded", false, internal.PrimitiveTypeEnum.Boolean);
            this.__requestHeaderPartEncoding = new internal.PartProperty(OperationInfo, this, "requestHeaderPartEncoding", null, false);
            this.__requestBodyEncoded = new internal.PrimitiveProperty(OperationInfo, this, "requestBodyEncoded", false, internal.PrimitiveTypeEnum.Boolean);
            this.__requestBodyElementName = new internal.PrimitiveProperty(OperationInfo, this, "requestBodyElementName", "", internal.PrimitiveTypeEnum.String);
            this.__requestBodyPartEncodings = new internal.PartListProperty(OperationInfo, this, "requestBodyPartEncodings", []);
            this.__responseBodyElementName = new internal.PrimitiveProperty(OperationInfo, this, "responseBodyElementName", "", internal.PrimitiveTypeEnum.String);
            this.__allowSimpleMappingInheritance = new internal.PrimitiveProperty(OperationInfo, this, "allowSimpleMappingInheritance", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new OperationInfo() cannot be invoked directly, please use 'model.webservices.createOperationInfo()'");
        }
        Object.defineProperty(OperationInfo.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "soapAction", {
            get: function () { return this.__soapAction.get(); },
            set: function (newValue) { this.__soapAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestHeaderRpcElement", {
            get: function () { return this.__requestHeaderRpcElement.get(); },
            set: function (newValue) { this.__requestHeaderRpcElement.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestBodyRpcElement", {
            get: function () { return this.__requestBodyRpcElement.get(); },
            set: function (newValue) { this.__requestBodyRpcElement.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "responseBodyRpcElement", {
            get: function () { return this.__responseBodyRpcElement.get(); },
            set: function (newValue) { this.__responseBodyRpcElement.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestHeaderElementName", {
            get: function () { return this.__requestHeaderElementName.get(); },
            set: function (newValue) { this.__requestHeaderElementName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestHeaderEncoded", {
            get: function () { return this.__requestHeaderEncoded.get(); },
            set: function (newValue) { this.__requestHeaderEncoded.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestHeaderPartEncoding", {
            get: function () { return this.__requestHeaderPartEncoding.get(); },
            set: function (newValue) { this.__requestHeaderPartEncoding.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestBodyEncoded", {
            get: function () { return this.__requestBodyEncoded.get(); },
            set: function (newValue) { this.__requestBodyEncoded.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestBodyElementName", {
            get: function () { return this.__requestBodyElementName.get(); },
            set: function (newValue) { this.__requestBodyElementName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "requestBodyPartEncodings", {
            get: function () { return this.__requestBodyPartEncodings.get(); },
            set: function (newValue) { this.__requestBodyPartEncodings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "responseBodyElementName", {
            get: function () { return this.__responseBodyElementName.get(); },
            set: function (newValue) { this.__responseBodyElementName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OperationInfo.prototype, "allowSimpleMappingInheritance", {
            get: function () { return this.__allowSimpleMappingInheritance.get(); },
            set: function (newValue) { this.__allowSimpleMappingInheritance.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new OperationInfo instance in the SDK and on the server.
         * The new OperationInfo will be automatically stored in the 'operations' property of the parent ServiceInfo element passed as argument.
         */
        OperationInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OperationInfo, "operations", true);
        };
        /*
         * Creates and returns a new OperationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OperationInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, OperationInfo);
        };
        OperationInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.requestHeaderRpcElement = RpcOperationElement.create(this.model);
            this.requestBodyRpcElement = RpcOperationElement.create(this.model);
            this.responseBodyRpcElement = RpcOperationElement.create(this.model);
        };
        OperationInfo.typeName = "WebServices$OperationInfo";
        OperationInfo.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "requestHeaderRpcElement": {
                    "required": {
                        "currentValue": true
                    }
                },
                "requestBodyRpcElement": {
                    "required": {
                        "currentValue": true
                    }
                },
                "responseBodyRpcElement": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return OperationInfo;
    })(internal.Element);
    webservices.OperationInfo = OperationInfo;
    var PartEncoding = (function (_super) {
        __extends(PartEncoding, _super);
        function PartEncoding(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__partName = new internal.PrimitiveProperty(PartEncoding, this, "partName", "", internal.PrimitiveTypeEnum.String);
            this.__partXsdType = new internal.PrimitiveProperty(PartEncoding, this, "partXsdType", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new PartEncoding() cannot be invoked directly, please use 'model.webservices.createPartEncoding()'");
        }
        Object.defineProperty(PartEncoding.prototype, "partName", {
            get: function () { return this.__partName.get(); },
            set: function (newValue) { this.__partName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PartEncoding.prototype, "partXsdType", {
            get: function () { return this.__partXsdType.get(); },
            set: function (newValue) { this.__partXsdType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PartEncoding instance in the SDK and on the server.
         * The new PartEncoding will be automatically stored in the 'requestHeaderPartEncoding' property of the parent OperationInfo element passed as argument.
         */
        PartEncoding.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PartEncoding, "requestHeaderPartEncoding", false);
        };
        /*
         * Creates and returns a new PartEncoding instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PartEncoding.create = function (model) {
            return internal.instancehelpers.createElement(model, PartEncoding);
        };
        PartEncoding.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PartEncoding.typeName = "WebServices$PartEncoding";
        PartEncoding.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return PartEncoding;
    })(internal.Element);
    webservices.PartEncoding = PartEncoding;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var PublishedServiceBase = (function (_super) {
        __extends(PublishedServiceBase, _super);
        function PublishedServiceBase(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__versionedServices = new internal.PartListProperty(PublishedServiceBase, this, "versionedServices", []);
            this._containmentName = "documents";
        }
        Object.defineProperty(PublishedServiceBase.prototype, "versionedServices", {
            get: function () { return this.__versionedServices.get(); },
            set: function (newValue) { this.__versionedServices.set(newValue); },
            enumerable: true,
            configurable: true
        });
        PublishedServiceBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PublishedServiceBase.typeName = "WebServices$PublishedServiceBase";
        PublishedServiceBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return PublishedServiceBase;
    })(projects_1.projects.Document);
    webservices.PublishedServiceBase = PublishedServiceBase;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+App+Services relevant section in reference guide}
     */
    var PublishedAppService = (function (_super) {
        __extends(PublishedAppService, _super);
        function PublishedAppService(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this._containmentName = "documents";
        }
        /**
         * Creates a new PublishedAppService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        PublishedAppService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, PublishedAppService);
        };
        PublishedAppService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PublishedAppService.typeName = "WebServices$PublishedAppService";
        PublishedAppService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return PublishedAppService;
    })(PublishedServiceBase);
    webservices.PublishedAppService = PublishedAppService;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var PublishedResource = (function (_super) {
        __extends(PublishedResource, _super);
        function PublishedResource(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__dataEntity = new internal.PartProperty(PublishedResource, this, "dataEntity", null, true);
            if (arguments.length < 4)
                throw new Error("new PublishedResource() cannot be invoked directly, please use 'model.webservices.createPublishedResource()'");
        }
        Object.defineProperty(PublishedResource.prototype, "dataEntity", {
            get: function () { return this.__dataEntity.get(); },
            set: function (newValue) { this.__dataEntity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        PublishedResource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataEntity = DataEntity.create(this.model);
        };
        PublishedResource.typeName = "WebServices$PublishedResource";
        PublishedResource.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "dataEntity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return PublishedResource;
    })(internal.Element);
    webservices.PublishedResource = PublishedResource;
    var PublishedOperation = (function (_super) {
        __extends(PublishedOperation, _super);
        function PublishedOperation(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isLockedByContract = new internal.PrimitiveProperty(PublishedOperation, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__name = new internal.PrimitiveProperty(PublishedOperation, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__image = new internal.ByNameReferenceProperty(PublishedOperation, this, "image", null, "Images$Image");
            this.__description = new internal.PrimitiveProperty(PublishedOperation, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(PublishedOperation, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__microflow = new internal.ByNameReferenceProperty(PublishedOperation, this, "microflow", null, "Microflows$Microflow");
            this.__parameters = new internal.PartListProperty(PublishedOperation, this, "parameters", []);
            this.__returnTypeNameByContract = new internal.PrimitiveProperty(PublishedOperation, this, "returnTypeNameByContract", "", internal.PrimitiveTypeEnum.String);
            this.__returnTypeSpecificationByContract = new internal.PrimitiveProperty(PublishedOperation, this, "returnTypeSpecificationByContract", "", internal.PrimitiveTypeEnum.String);
            this.__entityExposedNameByContract = new internal.PrimitiveProperty(PublishedOperation, this, "entityExposedNameByContract", "", internal.PrimitiveTypeEnum.String);
            this.__entityExposedName = new internal.PrimitiveProperty(PublishedOperation, this, "entityExposedName", "", internal.PrimitiveTypeEnum.String);
            this.__returnType = new internal.PrimitiveProperty(PublishedOperation, this, "returnType", "", internal.PrimitiveTypeEnum.String);
            this.__returnTypeIsOptional = new internal.PrimitiveProperty(PublishedOperation, this, "returnTypeIsOptional", false, internal.PrimitiveTypeEnum.Boolean);
            this.__returnTypeIsNillable = new internal.PrimitiveProperty(PublishedOperation, this, "returnTypeIsNillable", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new PublishedOperation() cannot be invoked directly, please use 'model.webservices.createPublishedOperation()'");
        }
        Object.defineProperty(PublishedOperation.prototype, "isLockedByContract", {
            get: function () { return this.__isLockedByContract.get(); },
            set: function (newValue) { this.__isLockedByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "returnTypeNameByContract", {
            get: function () { return this.__returnTypeNameByContract.get(); },
            set: function (newValue) { this.__returnTypeNameByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "returnTypeSpecificationByContract", {
            get: function () { return this.__returnTypeSpecificationByContract.get(); },
            set: function (newValue) { this.__returnTypeSpecificationByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "entityExposedNameByContract", {
            get: function () { return this.__entityExposedNameByContract.get(); },
            set: function (newValue) { this.__entityExposedNameByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "entityExposedName", {
            get: function () { return this.__entityExposedName.get(); },
            set: function (newValue) { this.__entityExposedName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "returnTypeIsOptional", {
            get: function () { return this.__returnTypeIsOptional.get(); },
            set: function (newValue) { this.__returnTypeIsOptional.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedOperation.prototype, "returnTypeIsNillable", {
            get: function () { return this.__returnTypeIsNillable.get(); },
            set: function (newValue) { this.__returnTypeIsNillable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PublishedOperation instance in the SDK and on the server.
         * The new PublishedOperation will be automatically stored in the 'operations' property of the parent VersionedService element passed as argument.
         */
        PublishedOperation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PublishedOperation, "operations", true);
        };
        /*
         * Creates and returns a new PublishedOperation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PublishedOperation.create = function (model) {
            return internal.instancehelpers.createElement(model, PublishedOperation);
        };
        PublishedOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.returnTypeNameByContract = "Nothing";
            this.entityExposedName = "Result";
            this.returnType = "Void";
        };
        PublishedOperation.typeName = "WebServices$PublishedOperation";
        PublishedOperation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return PublishedOperation;
    })(PublishedResource);
    webservices.PublishedOperation = PublishedOperation;
    var PublishedParameter = (function (_super) {
        __extends(PublishedParameter, _super);
        function PublishedParameter(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__isLockedByContract = new internal.PrimitiveProperty(PublishedParameter, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__parameter = new internal.ByNameReferenceProperty(PublishedParameter, this, "parameter", null, "Microflows$MicroflowParameter");
            this.__parameterByContract = new internal.PartProperty(PublishedParameter, this, "parameterByContract", null, true);
            this.__entityExposedName = new internal.PrimitiveProperty(PublishedParameter, this, "entityExposedName", "", internal.PrimitiveTypeEnum.String);
            this.__isOptionalByContract = new internal.PrimitiveProperty(PublishedParameter, this, "isOptionalByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isOptional = new internal.PrimitiveProperty(PublishedParameter, this, "isOptional", false, internal.PrimitiveTypeEnum.Boolean);
            this.__isNillable = new internal.PrimitiveProperty(PublishedParameter, this, "isNillable", false, internal.PrimitiveTypeEnum.Boolean);
            this.__entityExposedItemNameByContract = new internal.PrimitiveProperty(PublishedParameter, this, "entityExposedItemNameByContract", "", internal.PrimitiveTypeEnum.String);
            this.__entityExposedItemName = new internal.PrimitiveProperty(PublishedParameter, this, "entityExposedItemName", "", internal.PrimitiveTypeEnum.String);
            this.__type = new internal.PrimitiveProperty(PublishedParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
            this.__dataEntity = new internal.PartProperty(PublishedParameter, this, "dataEntity", null, true);
            if (arguments.length < 4)
                throw new Error("new PublishedParameter() cannot be invoked directly, please use 'model.webservices.createPublishedParameter()'");
        }
        Object.defineProperty(PublishedParameter.prototype, "isLockedByContract", {
            get: function () { return this.__isLockedByContract.get(); },
            set: function (newValue) { this.__isLockedByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "parameterByContract", {
            get: function () { return this.__parameterByContract.get(); },
            set: function (newValue) { this.__parameterByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "entityExposedName", {
            get: function () { return this.__entityExposedName.get(); },
            set: function (newValue) { this.__entityExposedName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "isOptionalByContract", {
            get: function () { return this.__isOptionalByContract.get(); },
            set: function (newValue) { this.__isOptionalByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "isOptional", {
            get: function () { return this.__isOptional.get(); },
            set: function (newValue) { this.__isOptional.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "isNillable", {
            get: function () { return this.__isNillable.get(); },
            set: function (newValue) { this.__isNillable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "entityExposedItemNameByContract", {
            get: function () { return this.__entityExposedItemNameByContract.get(); },
            set: function (newValue) { this.__entityExposedItemNameByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "entityExposedItemName", {
            get: function () { return this.__entityExposedItemName.get(); },
            set: function (newValue) { this.__entityExposedItemName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "type", {
            /**
             * The value of this property is conceptually of type Common$DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PublishedParameter.prototype, "dataEntity", {
            get: function () { return this.__dataEntity.get(); },
            set: function (newValue) { this.__dataEntity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new PublishedParameter instance in the SDK and on the server.
         * The new PublishedParameter will be automatically stored in the 'parameters' property of the parent PublishedOperation element passed as argument.
         */
        PublishedParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PublishedParameter, "parameters", true);
        };
        /*
         * Creates and returns a new PublishedParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PublishedParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, PublishedParameter);
        };
        PublishedParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.parameterByContract = appservices_1.appservices.MsdMicroflowParameter.create(this.model);
            this.type = "Void";
            this.dataEntity = DataEntity.create(this.model);
        };
        PublishedParameter.typeName = "WebServices$PublishedParameter";
        PublishedParameter.versionInfo = new exports.StructureVersionInfo({
            "properties": {
                "parameterByContract": {
                    "required": {
                        "currentValue": true
                    }
                },
                "dataEntity": {
                    "required": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.Element);
        return PublishedParameter;
    })(internal.Element);
    webservices.PublishedParameter = PublishedParameter;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    var PublishedWebService = (function (_super) {
        __extends(PublishedWebService, _super);
        function PublishedWebService(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this._containmentName = "documents";
        }
        /**
         * Creates a new PublishedWebService unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        PublishedWebService.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, PublishedWebService);
        };
        PublishedWebService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        PublishedWebService.typeName = "WebServices$PublishedWebService";
        PublishedWebService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return PublishedWebService;
    })(PublishedServiceBase);
    webservices.PublishedWebService = PublishedWebService;
    var RpcMessagePartElement = (function (_super) {
        __extends(RpcMessagePartElement, _super);
        function RpcMessagePartElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__partName = new internal.PrimitiveProperty(RpcMessagePartElement, this, "partName", "", internal.PrimitiveTypeEnum.String);
            this.__typeName = new internal.PrimitiveProperty(RpcMessagePartElement, this, "typeName", "", internal.PrimitiveTypeEnum.String);
            this.__elementName = new internal.PrimitiveProperty(RpcMessagePartElement, this, "elementName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new RpcMessagePartElement() cannot be invoked directly, please use 'model.webservices.createRpcMessagePartElement()'");
        }
        Object.defineProperty(RpcMessagePartElement.prototype, "partName", {
            get: function () { return this.__partName.get(); },
            set: function (newValue) { this.__partName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RpcMessagePartElement.prototype, "typeName", {
            get: function () { return this.__typeName.get(); },
            set: function (newValue) { this.__typeName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RpcMessagePartElement.prototype, "elementName", {
            get: function () { return this.__elementName.get(); },
            set: function (newValue) { this.__elementName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
         * The new RpcMessagePartElement will be automatically stored in the 'messagePartElements' property of the parent RpcOperationElement element passed as argument.
         */
        RpcMessagePartElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RpcMessagePartElement, "messagePartElements", true);
        };
        /*
         * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RpcMessagePartElement.create = function (model) {
            return internal.instancehelpers.createElement(model, RpcMessagePartElement);
        };
        RpcMessagePartElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RpcMessagePartElement.typeName = "WebServices$RpcMessagePartElement";
        RpcMessagePartElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RpcMessagePartElement;
    })(internal.Element);
    webservices.RpcMessagePartElement = RpcMessagePartElement;
    var RpcOperationElement = (function (_super) {
        __extends(RpcOperationElement, _super);
        function RpcOperationElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(RpcOperationElement, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__messagePartElements = new internal.PartListProperty(RpcOperationElement, this, "messagePartElements", []);
            if (arguments.length < 4)
                throw new Error("new RpcOperationElement() cannot be invoked directly, please use 'model.webservices.createRpcOperationElement()'");
        }
        Object.defineProperty(RpcOperationElement.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RpcOperationElement.prototype, "messagePartElements", {
            get: function () { return this.__messagePartElements.get(); },
            set: function (newValue) { this.__messagePartElements.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * The new RpcOperationElement will be automatically stored in the 'requestHeaderRpcElement' property of the parent OperationInfo element passed as argument.
         */
        RpcOperationElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RpcOperationElement, "requestHeaderRpcElement", false);
        };
        /*
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RpcOperationElement.create = function (model) {
            return internal.instancehelpers.createElement(model, RpcOperationElement);
        };
        RpcOperationElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        RpcOperationElement.typeName = "WebServices$RpcOperationElement";
        RpcOperationElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return RpcOperationElement;
    })(internal.Element);
    webservices.RpcOperationElement = RpcOperationElement;
    var ServiceInfo = (function (_super) {
        __extends(ServiceInfo, _super);
        function ServiceInfo(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(ServiceInfo, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(ServiceInfo, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__portName = new internal.PrimitiveProperty(ServiceInfo, this, "portName", "", internal.PrimitiveTypeEnum.String);
            this.__location = new internal.PrimitiveProperty(ServiceInfo, this, "location", "", internal.PrimitiveTypeEnum.String);
            this.__soapVersion = new internal.EnumProperty(ServiceInfo, this, "soapVersion", SoapVersion.Soap11, SoapVersion);
            this.__locationConstant = new internal.ByNameReferenceProperty(ServiceInfo, this, "locationConstant", null, "Constants$Constant");
            this.__operations = new internal.PartListProperty(ServiceInfo, this, "operations", []);
            if (arguments.length < 4)
                throw new Error("new ServiceInfo() cannot be invoked directly, please use 'model.webservices.createServiceInfo()'");
        }
        Object.defineProperty(ServiceInfo.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "portName", {
            get: function () { return this.__portName.get(); },
            set: function (newValue) { this.__portName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "soapVersion", {
            get: function () { return this.__soapVersion.get(); },
            set: function (newValue) { this.__soapVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "locationConstant", {
            get: function () { return this.__locationConstant.get(); },
            set: function (newValue) { this.__locationConstant.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "locationConstantQualifiedName", {
            get: function () { return this.__locationConstant.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ServiceInfo.prototype, "operations", {
            get: function () { return this.__operations.get(); },
            set: function (newValue) { this.__operations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new ServiceInfo instance in the SDK and on the server.
         * The new ServiceInfo will be automatically stored in the 'services' property of the parent WsdlDescription element passed as argument.
         */
        ServiceInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ServiceInfo, "services", true);
        };
        /*
         * Creates and returns a new ServiceInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ServiceInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, ServiceInfo);
        };
        ServiceInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.soapVersion = SoapVersion.Soap11;
        };
        ServiceInfo.typeName = "WebServices$ServiceInfo";
        ServiceInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return ServiceInfo;
    })(internal.Element);
    webservices.ServiceInfo = ServiceInfo;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/Published+Web+Services relevant section in reference guide}
     */
    var VersionedService = (function (_super) {
        __extends(VersionedService, _super);
        function VersionedService(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__documentation = new internal.PrimitiveProperty(VersionedService, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__targetNamespace = new internal.PrimitiveProperty(VersionedService, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
            this.__headerAuthentication = new internal.EnumProperty(VersionedService, this, "headerAuthentication", HeaderAuthentication.None, HeaderAuthentication);
            this.__operations = new internal.PartListProperty(VersionedService, this, "operations", []);
            this.__isLockedByContract = new internal.PrimitiveProperty(VersionedService, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
            this.__enumerationsByContract = new internal.PartProperty(VersionedService, this, "enumerationsByContract", null, false);
            this.__headerImportMapping = new internal.ByNameReferenceProperty(VersionedService, this, "headerImportMapping", null, "ImportMappings$ImportMapping");
            this.__headerMicroflow = new internal.ByNameReferenceProperty(VersionedService, this, "headerMicroflow", null, "Microflows$Microflow");
            this.__versionNumber = new internal.PrimitiveProperty(VersionedService, this, "versionNumber", 0, internal.PrimitiveTypeEnum.Integer);
            this.__caption = new internal.PrimitiveProperty(VersionedService, this, "caption", "", internal.PrimitiveTypeEnum.String);
            this.__description = new internal.PrimitiveProperty(VersionedService, this, "description", "", internal.PrimitiveTypeEnum.String);
            this.__appServiceState = new internal.EnumProperty(VersionedService, this, "appServiceState", AppServiceState.Draft, AppServiceState);
            this.__image = new internal.ByNameReferenceProperty(VersionedService, this, "image", null, "Images$Image");
            this.__validate = new internal.PrimitiveProperty(VersionedService, this, "validate", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new VersionedService() cannot be invoked directly, please use 'model.webservices.createVersionedService()'");
        }
        Object.defineProperty(VersionedService.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "targetNamespace", {
            get: function () { return this.__targetNamespace.get(); },
            set: function (newValue) { this.__targetNamespace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "headerAuthentication", {
            get: function () { return this.__headerAuthentication.get(); },
            set: function (newValue) { this.__headerAuthentication.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "operations", {
            get: function () { return this.__operations.get(); },
            set: function (newValue) { this.__operations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "isLockedByContract", {
            get: function () { return this.__isLockedByContract.get(); },
            set: function (newValue) { this.__isLockedByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "enumerationsByContract", {
            get: function () { return this.__enumerationsByContract.get(); },
            set: function (newValue) { this.__enumerationsByContract.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "headerImportMapping", {
            get: function () { return this.__headerImportMapping.get(); },
            set: function (newValue) { this.__headerImportMapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "headerImportMappingQualifiedName", {
            get: function () { return this.__headerImportMapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "headerMicroflow", {
            get: function () { return this.__headerMicroflow.get(); },
            set: function (newValue) { this.__headerMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "headerMicroflowQualifiedName", {
            get: function () { return this.__headerMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "versionNumber", {
            get: function () { return this.__versionNumber.get(); },
            set: function (newValue) { this.__versionNumber.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "appServiceState", {
            get: function () { return this.__appServiceState.get(); },
            set: function (newValue) { this.__appServiceState.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VersionedService.prototype, "validate", {
            get: function () { return this.__validate.get(); },
            set: function (newValue) { this.__validate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new VersionedService instance in the SDK and on the server.
         * The new VersionedService will be automatically stored in the 'versionedServices' property of the parent PublishedServiceBase element passed as argument.
         */
        VersionedService.createIn = function (container) {
            return internal.instancehelpers.createElement(container, VersionedService, "versionedServices", true);
        };
        /*
         * Creates and returns a new VersionedService instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VersionedService.create = function (model) {
            return internal.instancehelpers.createElement(model, VersionedService);
        };
        VersionedService.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.targetNamespace = "http://www.example.com/";
            this.headerAuthentication = HeaderAuthentication.None;
            this.appServiceState = AppServiceState.Draft;
        };
        VersionedService.typeName = "WebServices$VersionedService";
        VersionedService.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return VersionedService;
    })(internal.Element);
    webservices.VersionedService = VersionedService;
    var WsdlDescription = (function (_super) {
        __extends(WsdlDescription, _super);
        function WsdlDescription(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__wsdlEntries = new internal.PartListProperty(WsdlDescription, this, "wsdlEntries", []);
            this.__schemaEntries = new internal.PartListProperty(WsdlDescription, this, "schemaEntries", []);
            this.__services = new internal.PartListProperty(WsdlDescription, this, "services", []);
            this.__targetNamespace = new internal.PrimitiveProperty(WsdlDescription, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
            this.__importsHaveLocations = new internal.PrimitiveProperty(WsdlDescription, this, "importsHaveLocations", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new WsdlDescription() cannot be invoked directly, please use 'model.webservices.createWsdlDescription()'");
        }
        Object.defineProperty(WsdlDescription.prototype, "wsdlEntries", {
            get: function () { return this.__wsdlEntries.get(); },
            set: function (newValue) { this.__wsdlEntries.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlDescription.prototype, "schemaEntries", {
            get: function () { return this.__schemaEntries.get(); },
            set: function (newValue) { this.__schemaEntries.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlDescription.prototype, "services", {
            get: function () { return this.__services.get(); },
            set: function (newValue) { this.__services.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlDescription.prototype, "targetNamespace", {
            get: function () { return this.__targetNamespace.get(); },
            set: function (newValue) { this.__targetNamespace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlDescription.prototype, "importsHaveLocations", {
            get: function () { return this.__importsHaveLocations.get(); },
            set: function (newValue) { this.__importsHaveLocations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WsdlDescription instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WsdlDescription.create = function (model) {
            return internal.instancehelpers.createElement(model, WsdlDescription);
        };
        WsdlDescription.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WsdlDescription.typeName = "WebServices$WsdlDescription";
        WsdlDescription.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WsdlDescription;
    })(internal.Element);
    webservices.WsdlDescription = WsdlDescription;
    var WsdlEntry = (function (_super) {
        __extends(WsdlEntry, _super);
        function WsdlEntry(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__location = new internal.PrimitiveProperty(WsdlEntry, this, "location", "", internal.PrimitiveTypeEnum.String);
            this.__contents = new internal.PrimitiveProperty(WsdlEntry, this, "contents", "", internal.PrimitiveTypeEnum.String);
            this.__localizedLocationFormat = new internal.PrimitiveProperty(WsdlEntry, this, "localizedLocationFormat", "", internal.PrimitiveTypeEnum.String);
            this.__localizedContentsFormat = new internal.PrimitiveProperty(WsdlEntry, this, "localizedContentsFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new WsdlEntry() cannot be invoked directly, please use 'model.webservices.createWsdlEntry()'");
        }
        Object.defineProperty(WsdlEntry.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlEntry.prototype, "contents", {
            get: function () { return this.__contents.get(); },
            set: function (newValue) { this.__contents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlEntry.prototype, "localizedLocationFormat", {
            get: function () { return this.__localizedLocationFormat.get(); },
            set: function (newValue) { this.__localizedLocationFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WsdlEntry.prototype, "localizedContentsFormat", {
            get: function () { return this.__localizedContentsFormat.get(); },
            set: function (newValue) { this.__localizedContentsFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new WsdlEntry instance in the SDK and on the server.
         * The new WsdlEntry will be automatically stored in the 'wsdlEntries' property of the parent WsdlDescription element passed as argument.
         */
        WsdlEntry.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WsdlEntry, "wsdlEntries", true);
        };
        /*
         * Creates and returns a new WsdlEntry instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WsdlEntry.create = function (model) {
            return internal.instancehelpers.createElement(model, WsdlEntry);
        };
        WsdlEntry.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        WsdlEntry.typeName = "WebServices$WsdlEntry";
        WsdlEntry.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return WsdlEntry;
    })(internal.Element);
    webservices.WsdlEntry = WsdlEntry;
})(webservices = exports.webservices || (exports.webservices = {}));
var appservices_1 = require('./appservices');
