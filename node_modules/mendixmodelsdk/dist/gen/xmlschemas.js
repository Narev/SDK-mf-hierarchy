var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require('./projects');
var xmlschemas;
(function (xmlschemas) {
    var XmlPrimitiveType = (function (_super) {
        __extends(XmlPrimitiveType, _super);
        function XmlPrimitiveType() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "xmlschemas.XmlPrimitiveType";
        }
        XmlPrimitiveType.Unknown = new XmlPrimitiveType("Unknown", {});
        XmlPrimitiveType.Boolean = new XmlPrimitiveType("Boolean", {});
        XmlPrimitiveType.Date = new XmlPrimitiveType("Date", {});
        XmlPrimitiveType.Time = new XmlPrimitiveType("Time", {});
        XmlPrimitiveType.DateTime = new XmlPrimitiveType("DateTime", {});
        XmlPrimitiveType.Decimal = new XmlPrimitiveType("Decimal", {});
        XmlPrimitiveType.Float = new XmlPrimitiveType("Float", {});
        XmlPrimitiveType.Integer = new XmlPrimitiveType("Integer", {});
        XmlPrimitiveType.Binary = new XmlPrimitiveType("Binary", {});
        XmlPrimitiveType.String = new XmlPrimitiveType("String", {});
        XmlPrimitiveType.AnyType = new XmlPrimitiveType("AnyType", {});
        return XmlPrimitiveType;
    })(internal.IEnum);
    xmlschemas.XmlPrimitiveType = XmlPrimitiveType;
    /**
     * See: {@link https://world.mendix.com/display/refguide6/XML+Schemas relevant section in reference guide}
     */
    var XmlSchema = (function (_super) {
        __extends(XmlSchema, _super);
        function XmlSchema(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__entries = new internal.PartListProperty(XmlSchema, this, "entries", []);
            this.__filePath = new internal.PrimitiveProperty(XmlSchema, this, "filePath", "", internal.PrimitiveTypeEnum.String);
            this._containmentName = "documents";
        }
        Object.defineProperty(XmlSchema.prototype, "entries", {
            get: function () { return this.__entries.get(); },
            set: function (newValue) { this.__entries.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XmlSchema.prototype, "filePath", {
            get: function () { return this.__filePath.get(); },
            set: function (newValue) { this.__filePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new XmlSchema unit in the SDK and on the server.
         * Expects one argument, a projects.FolderBase in which this unit is contained.
         */
        XmlSchema.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, XmlSchema);
        };
        XmlSchema.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        XmlSchema.typeName = "XmlSchemas$XmlSchema";
        XmlSchema.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
        return XmlSchema;
    })(projects_1.projects.Document);
    xmlschemas.XmlSchema = XmlSchema;
    var XmlSchemaEntry = (function (_super) {
        __extends(XmlSchemaEntry, _super);
        function XmlSchemaEntry(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__targetNamespace = new internal.PrimitiveProperty(XmlSchemaEntry, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
            this.__location = new internal.PrimitiveProperty(XmlSchemaEntry, this, "location", "", internal.PrimitiveTypeEnum.String);
            this.__contents = new internal.PrimitiveProperty(XmlSchemaEntry, this, "contents", "", internal.PrimitiveTypeEnum.String);
            this.__localizedLocationFormat = new internal.PrimitiveProperty(XmlSchemaEntry, this, "localizedLocationFormat", "", internal.PrimitiveTypeEnum.String);
            this.__localizedContentsFormat = new internal.PrimitiveProperty(XmlSchemaEntry, this, "localizedContentsFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new XmlSchemaEntry() cannot be invoked directly, please use 'model.xmlschemas.createXmlSchemaEntry()'");
        }
        Object.defineProperty(XmlSchemaEntry.prototype, "targetNamespace", {
            get: function () { return this.__targetNamespace.get(); },
            set: function (newValue) { this.__targetNamespace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XmlSchemaEntry.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XmlSchemaEntry.prototype, "contents", {
            get: function () { return this.__contents.get(); },
            set: function (newValue) { this.__contents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XmlSchemaEntry.prototype, "localizedLocationFormat", {
            get: function () { return this.__localizedLocationFormat.get(); },
            set: function (newValue) { this.__localizedLocationFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(XmlSchemaEntry.prototype, "localizedContentsFormat", {
            get: function () { return this.__localizedContentsFormat.get(); },
            set: function (newValue) { this.__localizedContentsFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new XmlSchemaEntry instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        XmlSchemaEntry.create = function (model) {
            return internal.instancehelpers.createElement(model, XmlSchemaEntry);
        };
        XmlSchemaEntry.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        XmlSchemaEntry.typeName = "XmlSchemas$XmlSchemaEntry";
        XmlSchemaEntry.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return XmlSchemaEntry;
    })(internal.Element);
    xmlschemas.XmlSchemaEntry = XmlSchemaEntry;
})(xmlschemas = exports.xmlschemas || (exports.xmlschemas = {}));
