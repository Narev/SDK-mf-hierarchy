import * as classes from './gen/all-model-classes';
import { configuration } from './sdk/config';
import * as base from './gen/base-model';
import { ModelSdkClientImpl } from './model-sdk-client';
export declare type IModel = base.IModel;
/**
 * Implementation of {@link IModel}.
 */
export declare class Model extends base.BaseModel implements IModel {
    static createSdkClient(connectionConfig: configuration.ISdkConfig): ModelSdkClientImpl<base.IModel, Model>;
    /**
     * Returns the structural unit of type "Projects$Project" which is the project's root,
     * cast to the appropriate type.
     */
    root: classes.projects.IProject;
    private allModelClasses;
    _allModelClasses(): any;
    findModuleByQualifiedName(name: string): classes.projects.IModule;
    findLayoutByQualifiedName(qname: string): classes.pages.ILayout;
    findJavaActionByQualifiedName(qname: string): classes.javaactions.IJavaAction;
    findMicroflowByQualifiedName(qname: string): classes.microflows.IMicroflow;
    findSnippetByQualifiedName(qname: string): classes.pages.ISnippet;
    findMenuDocumentByQualifiedName(qname: string): classes.menus.IMenuDocument;
    findLayoutParameterByQualifiedName(qname: string): classes.pages.ILayoutParameter;
    findMicroflowParameterByQualifiedName(qname: string): classes.microflows.IMicroflowParameter;
    findRuleParameterByQualifiedName(qname: string): classes.microflows.IRuleParameter;
    findPageByQualifiedName(qname: string): classes.pages.IPage;
    findAssociationBaseByQualifiedName(qname: string): classes.domainmodels.IAssociationBase;
    findEntityByQualifiedName(qname: string): classes.domainmodels.IEntity;
    findAttributeByQualifiedName(qname: string): classes.domainmodels.IAttribute;
    findAppServiceActionByQualifiedName(qname: string): classes.appservices.IAppServiceAction;
    findAppServiceActionParameterByQualifiedName(qname: string): classes.appservices.IAppServiceActionParameter;
    findXmlSchemaByQualifiedName(qname: string): classes.xmlschemas.IXmlSchema;
    findExportMappingByQualifiedName(qname: string): classes.exportmappings.IExportMapping;
    findImportMappingByQualifiedName(qname: string): classes.importmappings.IImportMapping;
    findUserRoleByQualifiedName(qname: string): classes.security.IUserRole;
    findRegularExpressionByQualifiedName(qname: string): classes.regularexpressions.IRegularExpression;
    findModuleRoleByQualifiedName(qname: string): classes.security.IModuleRole;
    findImportedWebServiceByQualifiedName(qname: string): classes.webservices.IImportedWebService;
    findDocumentTemplateByQualifiedName(qname: string): classes.documenttemplates.IDocumentTemplate;
    findRuleByQualifiedName(qname: string): classes.microflows.IRule;
    findDataSetByQualifiedName(qname: string): classes.datasets.IDataSet;
    findConstantByQualifiedName(qname: string): classes.constants.IConstant;
    findImageByQualifiedName(qname: string): classes.images.IImage;
    findJavaActionParameterByQualifiedName(qname: string): classes.javaactions.IJavaActionParameter;
    findEnumerationByQualifiedName(qname: string): classes.enumerations.IEnumeration;
}
export declare type ModelSdkClient = ModelSdkClientImpl<IModel, Model>;
