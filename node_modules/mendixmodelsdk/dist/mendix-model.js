var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var classes = require('./gen/all-model-classes');
var lodash = require('lodash');
var base = require('./gen/base-model');
var model_sdk_client_1 = require('./model-sdk-client');
/**
 * Implementation of {@link IModel}.
 */
var Model = (function (_super) {
    __extends(Model, _super);
    function Model() {
        _super.apply(this, arguments);
    }
    Model.createSdkClient = function (connectionConfig) {
        return new model_sdk_client_1.ModelSdkClientImpl(connectionConfig, Model);
    };
    Object.defineProperty(Model.prototype, "root", {
        /**
         * Returns the structural unit of type "Projects$Project" which is the project's root,
         * cast to the appropriate type.
         */
        get: function () {
            if (this._unitsByType["Projects$Project"].length !== 1)
                throw new Error("Illegal State: project root data not available");
            return this._unitsByType["Projects$Project"][0];
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype._allModelClasses = function () {
        if (!this.allModelClasses) {
            this.allModelClasses = require('./gen/all-model-classes');
        }
        return this.allModelClasses;
    };
    Model.prototype.findModuleByQualifiedName = function (name) {
        return lodash.find(_super.prototype.allModules.call(this), function (m) { return m.name === name; });
    };
    Model.prototype.findLayoutByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allLayouts, qname);
    };
    Model.prototype.findJavaActionByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allJavaActions, qname);
    };
    Model.prototype.findMicroflowByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allMicroflows, qname);
    };
    Model.prototype.findSnippetByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allSnippets, qname);
    };
    Model.prototype.findMenuDocumentByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allMenuDocuments, qname);
    };
    Model.prototype.findLayoutParameterByQualifiedName = function (qname) {
        // TODO  implement
        _super.prototype._warnAboutUnsupportedType.call(this, 'layoutParameter', qname);
        return null;
    };
    Model.prototype.findMicroflowParameterByQualifiedName = function (qname) {
        // TODO  implement
        _super.prototype._warnAboutUnsupportedType.call(this, 'microflowParameter', qname);
        return null;
    };
    Model.prototype.findRuleParameterByQualifiedName = function (qname) {
        // TODO  implement
        _super.prototype._warnAboutUnsupportedType.call(this, 'ruleParameter', qname);
        return null;
    };
    Model.prototype.findPageByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allPages, qname);
    };
    Model.prototype.findAssociationBaseByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, //reuse resolveElement for pre condition checks..
        function (assocQname) {
            var parts = _super.prototype._parseQname.call(_this, assocQname, 2);
            var module = _this.findModuleByQualifiedName(parts[0]);
            if (!module || !module.domainModel)
                return null;
            var assoc = module.domainModel.associations.find(function (assoc) { return assoc.name === parts[1]; });
            if (assoc)
                return assoc;
            return module.domainModel.crossAssociations.find(function (assoc) { return assoc.name === parts[1]; });
        });
    };
    Model.prototype.findEntityByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, //reuse resolveElement for pre condition checks..
        function (entityQName) {
            var parts = _super.prototype._parseQname.call(_this, entityQName, 2);
            var module = _this.findModuleByQualifiedName(parts[0]);
            if (!module || !module.domainModel)
                return null;
            return module.domainModel.entities.find(function (entity) { return entity.name === parts[1]; });
        });
    };
    Model.prototype.findAttributeByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, //reuse resolveElement for pre condition checks..
        function (entityQName) { return _this.findEntityByQualifiedName(entityQName); }, function (entity, attrName) { return entity.attributes.find(function (attr) { return attr.name === attrName; }); });
    };
    Model.prototype.findAppServiceActionByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, function (appserviceName) { return _super.prototype._resolveInCollection.call(_this, _super.prototype.allConsumedAppServices, appserviceName); }, function (service, actionName) { return service.actions.find(function (action) { return action.name === actionName; }); });
    };
    Model.prototype.findAppServiceActionParameterByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, function (appserviceName) { return _super.prototype._resolveInCollection.call(_this, _super.prototype.allConsumedAppServices, appserviceName); }, function (service, actionName) { return service.actions.find(function (action) { return action.name === actionName; }); }, function (action, paramName) { return action.parameters.find(function (param) { return param.name === paramName; }); });
    };
    Model.prototype.findXmlSchemaByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allXmlSchemas, qname);
    };
    Model.prototype.findExportMappingByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allExportMappings, qname);
    };
    Model.prototype.findImportMappingByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allImportMappings, qname);
    };
    Model.prototype.findUserRoleByQualifiedName = function (qname) {
        if (!qname)
            return null;
        var securities = _super.prototype.allProjectSecurities.call(this);
        if (!securities.length)
            return null;
        // .. might be multiple securities in theory if there is an teamserver conflict..
        securities[0].userRoles.find(function (role) { return role.name === qname; });
    };
    Model.prototype.findRegularExpressionByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allRegularExpressions, qname);
    };
    Model.prototype.findModuleRoleByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, //reuse resolveElement for pre condition checks..
        function (assocQname) {
            var parts = _super.prototype._parseQname.call(_this, assocQname, 2);
            var module = _this.findModuleByQualifiedName(parts[0]);
            if (!module || !module.moduleSecurity)
                return null;
            return module.moduleSecurity.moduleRoles.find(function (role) { return role.name === parts[1]; });
        });
    };
    Model.prototype.findImportedWebServiceByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allImportedWebServices, qname);
    };
    Model.prototype.findDocumentTemplateByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allDocumentTemplates, qname);
    };
    Model.prototype.findRuleByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allRules, qname);
    };
    Model.prototype.findDataSetByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allDataSets, qname);
    };
    Model.prototype.findConstantByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allConstants, qname);
    };
    Model.prototype.findImageByQualifiedName = function (qname) {
        if (!qname)
            return null;
        var parts = _super.prototype._parseQname.call(this, qname, 3, "image");
        var imageCollectionQName = parts[0] + "." + parts[1];
        var collection = lodash.find(this._unitsByType[classes.images.ImageCollection.typeName].slice(), function (c) { return c.qualifiedName === imageCollectionQName; });
        if (!collection)
            return null;
        return collection.images.find(function (i) { return i.name === parts[2]; });
    };
    Model.prototype.findJavaActionParameterByQualifiedName = function (qname) {
        var _this = this;
        return _super.prototype._resolveElement.call(this, qname, function (javaActionName) { return _this.findJavaActionByQualifiedName(javaActionName); }, function (action, paramName) { return action.parameters.find(function (p) { return p.name === paramName; }); });
    };
    Model.prototype.findEnumerationByQualifiedName = function (qname) {
        return _super.prototype._resolveInCollection.call(this, _super.prototype.allEnumerations, qname);
    };
    return Model;
})(base.BaseModel);
exports.Model = Model;
