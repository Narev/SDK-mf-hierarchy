import * as internal from './sdk/internal';
import { configuration } from './sdk/config';
import { common } from './common';
import { IModelApiClient } from './sdk/internal/model-api-client';
/**
 * Client class of the Mendix Model SDK.
 * By instantiating this class with appropriate configuration, you can create and read working copies.
 */
export declare class ModelSdkClientImpl<IT extends internal.IAbstractModel, CT extends internal.AbstractModel> {
    private connectionConfig;
    private modelConstructor;
    private client;
    constructor(connectionConfig: configuration.ISdkConfig, modelConstructor: {
        new (_client: IModelApiClient, _errorHandler: common.IErrorCallback, _connectionConfig: configuration.ISdkConfig): CT;
    });
    /**
     * Create a new working copy on the model server, and reads it for immediate editing.
     */
    createWorkingCopy(workingCopyParameters: configuration.ICreateWorkingCopyParameters, callback: common.ICallback<IT>, errorCallback: common.IErrorCallback): void;
    /**
     * Reads a working copy on the model server so it can be edited.
     */
    openWorkingCopy(workingCopyId: string, callback: common.ICallback<IT>, errorCallback: common.IErrorCallback): void;
    /**
     * Deletes this working copy from the server, and the (SDK) client.
     */
    deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Grants access to the member specified to his/her OpenID on this working copy.
     */
    grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Revokes access of the member specified to his/her OpenID on this working copy.
     */
    revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Returns whether the member specified to his/her OpenID has (been granted) access to this working copy.
     */
    checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback): void;
    /**
     * Exports this working copy as MPK.
     */
    exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
}
