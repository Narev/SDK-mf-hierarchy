var internal = require('./sdk/internal');
var config_1 = require('./sdk/config');
var abstract_model_1 = require('./sdk/internal/abstract-model');
var lodash = require('lodash');
var utils_1 = require('./sdk/utils');
/**
 * Client class of the Mendix Model SDK.
 * By instantiating this class with appropriate configuration, you can create and read working copies.
 */
var ModelSdkClientImpl = (function () {
    function ModelSdkClientImpl(connectionConfig, modelConstructor) {
        this.connectionConfig = connectionConfig;
        this.modelConstructor = modelConstructor;
        var defaultConfig = {
            endPoint: "https://model-api.cfapps.io"
        };
        var sdkConfig = lodash.extend({}, defaultConfig, connectionConfig);
        this.client = sdkConfig.client
            ? this.client = connectionConfig.client
            : new internal.ModelApiClientImpl(sdkConfig.transportation || new internal.RestTransportation(sdkConfig));
    }
    /**
     * Create a new working copy on the model server, and reads it for immediate editing.
     */
    ModelSdkClientImpl.prototype.createWorkingCopy = function (workingCopyParameters, callback, errorCallback) {
        var _this = this;
        config_1.configuration.checkCallbacks(callback, errorCallback);
        abstract_model_1.AbstractModel.create(this.client, workingCopyParameters, function (workingCopyInfo) {
            console.log("Created working copy " + workingCopyInfo.id);
            _this.openWorkingCopy(workingCopyInfo.id, callback, errorCallback);
        }, errorCallback);
    };
    /**
     * Reads a working copy on the model server so it can be edited.
     */
    ModelSdkClientImpl.prototype.openWorkingCopy = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkWorkingCopyId(workingCopyId);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        utils_1.utils.resetAlreadyPrintedWarningsState();
        abstract_model_1.AbstractModel.read(this.client, workingCopyId, this.connectionConfig, new this.modelConstructor(this.client, errorCallback, this.connectionConfig), callback, errorCallback);
    };
    /**
     * Deletes this working copy from the server, and the (SDK) client.
     */
    ModelSdkClientImpl.prototype.deleteWorkingCopy = function (workingCopyId, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.deleteWorkingCopy(workingCopyId, callback, errorCallback);
    };
    /**
     * Grants access to the member specified to his/her OpenID on this working copy.
     */
    ModelSdkClientImpl.prototype.grantAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.grantAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Revokes access of the member specified to his/her OpenID on this working copy.
     */
    ModelSdkClientImpl.prototype.revokeAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.revokeAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Returns whether the member specified to his/her OpenID has (been granted) access to this working copy.
     */
    ModelSdkClientImpl.prototype.checkAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        config_1.configuration.assertBackendAccess(this.connectionConfig);
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.checkAccess(workingCopyId, memberOpenId, callback, errorCallback);
    };
    /**
     * Exports this working copy as MPK.
     */
    ModelSdkClientImpl.prototype.exportMpk = function (workingCopyId, outFilePath, callback, errorCallback) {
        config_1.configuration.checkCallbacks(callback, errorCallback);
        this.client.exportMpk(workingCopyId, outFilePath, callback, errorCallback);
    };
    return ModelSdkClientImpl;
})();
exports.ModelSdkClientImpl = ModelSdkClientImpl;
