import { configuration } from '../config';
import { common } from '../../common';
import * as transport from './transport-interfaces';
import * as units from './units';
import * as transportation from './transportation';
/**
 * Internal API of the mendixmodelsdk.
 *
 * DISCLAIMER: End-users of the sdk should never instantiate classes in this module, or in submodules of this module.
 * Anything in this module, or its submodules, can be removed, or have changed signature, between sdk-versions.
 */
/**
 * The `modelapiclient` module provides typed communication with the Model API Server.
 */
/**
 * The IModelApiClient interface is used for forwarding calls to the underlying Mendix Model API.
 * Implementations of this interface serve as fully-typed clients for the Model API Server.
 * Default implementation: {@link ModelApiClientImpl}.
 * Note that all its methods are asynchronous, with the last two arguments always being a (success) callback and an error callback,
 * and we will only explain the "essential" arguments in their documentation.
 */
export interface IModelApiClient {
    createWorkingCopy(workingCopyInfo: configuration.ICreateWorkingCopyParameters, callback: common.ICallback<transport.IWorkingCopy>, errorCallback: common.IErrorCallback): any;
    /**
     * Loads all unit interfaces of the working copy indicated with `workingCopyId` as an array of normalized model JSON.
     */
    loadUnitInterfaces(workingCopyId: string, callback: common.ICallback<transport.IAbstractUnitJson[]>, errorCallback: common.IErrorCallback): any;
    /**
     * Retrieves the top-level working copy information/meta data for the working copy with given `workingCopyId`.
     */
    loadWorkingCopyMetaData(workingCopyId: string, callback: common.ICallback<transport.IWorkingCopy>, errorCallback: common.IErrorCallback): any;
    deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback): any;
    exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    /**
     * Retrieves a unit, as normalized model JSON, by working copy and unit ID.
     */
    loadUnitById<T extends units.AbstractUnit>(workingCopyId: string, unitId: string, callback: common.ICallback<transport.IAbstractUnitJson>, errorCallback: common.IErrorCallback): any;
    /**
     * Sends a sequence of deltas on the working copy with the given `workingCopyId` to the Model API Server;
     * batched if more than one is passed, as a single delta otherwise.
     */
    sendDeltas(workingCopyId: string, deltas: transport.IDelta[], callback: common.ICallback<Object>, errorCallback: common.IErrorCallback): any;
    /**
     * Returns an array of all filepaths in the working copy.
     */
    getFilePaths(workingCopyId: string, callback: common.ICallback<string[]>, errorCallback: common.IErrorCallback): any;
    /**
     * Downloads the file specified by the supplied filepath.
     */
    getFile(workingCopyId: string, filePath: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    /**
     * Uploads the supplied file to the specified filepath.
     */
    putFile(workingCopyId: string, inFilePath: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    /**
     * Deletes the file with the specified filepath.
     */
    deleteFile(workingCopyId: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
}
export declare class ModelApiClientImpl implements IModelApiClient {
    private transportation;
    constructor(transportation: transportation.ITransportation);
    createWorkingCopy(workingCopyInfo: configuration.ICreateWorkingCopyParameters, callback: common.ICallback<transport.IWorkingCopy>, errorCallback: common.IErrorCallback): void;
    loadWorkingCopyMetaData(workingCopyId: string, callback: common.ICallback<transport.IWorkingCopy>, errorCallback: common.IErrorCallback): void;
    loadUnitInterfaces(workingCopyId: string, callback: common.ICallback<transport.IAbstractUnitJson[]>, errorCallback: common.IErrorCallback): void;
    deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback): void;
    exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    loadUnitById<T extends units.AbstractUnit>(workingCopyId: string, unitId: string, callback: common.ICallback<transport.IAbstractUnitJson>, errorCallback: common.IErrorCallback): void;
    sendDeltas(workingCopyId: string, deltas: transport.IDelta[], callback: common.ICallback<Object>, errorCallback: common.IErrorCallback): void;
    getFilePaths(workingCopyId: string, callback: common.ICallback<string[]>, errorCallback: common.IErrorCallback): void;
    getFile(workingCopyId: string, filePath: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    putFile(workingCopyId: string, inFilePath: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    deleteFile(workingCopyId: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    private storeResponseAsFile(response, outFilePath, callback, errorCallback);
}
