var fs = require('fs');
var path = require('path');
/**
 * Default implementation of {@link IModelApiClient}.
 */
var apiEndPoint = '/api/v1/wc/';
var ModelApiClientImpl = (function () {
    function ModelApiClientImpl(transportation) {
        this.transportation = transportation;
    }
    ModelApiClientImpl.prototype.createWorkingCopy = function (workingCopyInfo, callback, errorCallback) {
        var data = {
            name: workingCopyInfo.name,
            description: workingCopyInfo.description || "",
            avatarUrl: workingCopyInfo.avatarUrl || ""
        };
        this.transportation.requestMultipartBinaryFileUpload("post", "" + apiEndPoint, data, "template", workingCopyInfo.template, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.loadWorkingCopyMetaData = function (workingCopyId, callback, errorCallback) {
        this.transportation.request("get", "" + apiEndPoint + workingCopyId, null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.loadUnitInterfaces = function (workingCopyId, callback, errorCallback) {
        this.transportation.request("get", "" + apiEndPoint + workingCopyId + "/units/", null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.deleteWorkingCopy = function (workingCopyId, callback, errorCallback) {
        this.transportation.request("delete", "" + apiEndPoint + workingCopyId, null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.grantAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        this.transportation.request("put", "" + apiEndPoint + workingCopyId + "/members/" + encodeURIComponent(memberOpenId), null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.revokeAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        this.transportation.request("delete", "" + apiEndPoint + workingCopyId + "/members/" + encodeURIComponent(memberOpenId), null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.checkAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        this.transportation.request("get", "" + apiEndPoint + workingCopyId + "/members/" + encodeURIComponent(memberOpenId), null, function (response) {
            callback(response.hasAccess);
        }, errorCallback);
    };
    ModelApiClientImpl.prototype.exportMpk = function (workingCopyId, outFilePath, callback, errorCallback) {
        var _this = this;
        if (!fs)
            throw new Error("cannot export MPK without file system");
        this.transportation.requestFileDownload("get", "" + apiEndPoint + workingCopyId + "/mpk", function (response) {
            _this.storeResponseAsFile(response, outFilePath, callback, errorCallback);
        }, errorCallback);
    };
    ModelApiClientImpl.prototype.loadUnitById = function (workingCopyId, unitId, callback, errorCallback) {
        this.transportation.request("get", "" + apiEndPoint + workingCopyId + "/units/" + unitId, null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.sendDeltas = function (workingCopyId, deltas, callback, errorCallback) {
        this.transportation.request("post", "" + apiEndPoint + workingCopyId + "/deltas", { deltas: deltas }, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.getFilePaths = function (workingCopyId, callback, errorCallback) {
        this.transportation.request("get", "" + apiEndPoint + workingCopyId + "/files", null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.getFile = function (workingCopyId, filePath, outFilePath, callback, errorCallback) {
        var _this = this;
        if (!fs)
            throw new Error("cannot export MPK without file system");
        this.transportation.requestFileDownload("get", "" + apiEndPoint + workingCopyId + "/files/" + encodeURIComponent(filePath), function (response) {
            _this.storeResponseAsFile(response, outFilePath, callback, errorCallback);
        }, errorCallback);
    };
    ModelApiClientImpl.prototype.putFile = function (workingCopyId, inFilePath, filePath, callback, errorCallback) {
        this.transportation.requestMultipartBinaryFileUpload("put", "" + apiEndPoint + workingCopyId + "/files/" + encodeURIComponent(filePath), {}, "file", inFilePath, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.deleteFile = function (workingCopyId, filePath, callback, errorCallback) {
        this.transportation.request("delete", "" + apiEndPoint + workingCopyId + "/files/" + encodeURIComponent(filePath), null, callback, errorCallback);
    };
    ModelApiClientImpl.prototype.storeResponseAsFile = function (response, outFilePath, callback, errorCallback) {
        var dirPath = path.dirname(outFilePath);
        fs.lstat(dirPath, function (err, stats) {
            if (err || !stats.isDirectory()) {
                var cwd = eval("process.cwd()"); // kludge to work around Node.js typings not being available for Model SDK
                return void errorCallback(new Error("target directory " + dirPath + " does not exist relative to " + cwd));
            }
            fs.open(outFilePath, "w", function (err, fd) {
                if (err)
                    return void errorCallback(new Error("Could not create file with path \"" + outFilePath + "\"; due to: " + err));
                fs.writeFile(outFilePath, response, 'binary', function (err) {
                    if (err)
                        return void errorCallback(new Error("Could not write to file with path \"" + outFilePath + "\"; due to: " + err));
                    callback(); // make sure we don't expose any arguments to the end-user
                });
            });
        });
    };
    return ModelApiClientImpl;
})();
exports.ModelApiClientImpl = ModelApiClientImpl;
