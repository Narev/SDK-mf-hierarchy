import * as structures from './structures';
import * as elements from './elements';
import { AbstractModel } from './abstract-model';
/**
 * The `units` module contains interfaces and base classes related to the concept of **units**.
 * For more information on this concept, see the README of this repository, under "About Mendix models".
 */
/**
 * An abstract unit is a vertex, and usually: a node, in the project tree, i.e. a macro-level construct.
 * Examples are: modules, folders, microflows, pages.
 * This interface is implemented by {@link AbstractUnit}.
 */
export interface IAbstractUnit extends structures.IStructure {
    /**
     * The parent unit of this unit.
     */
    container: IStructuralUnit;
    /**
     * The name of the property of the parent's type which owns this unit.
     */
    _containmentName: string;
    /**
     * The {@link modelstore.IModelStore model store} holding the Mendix model this unit abides in.
     */
    _model: AbstractModel;
    /**
     * Whether this unit has been completely loaded and does not consist of the unit's interface
     *  (which corresponds to the unit being partial).
     */
    isLoaded: boolean;
    /**
     * Whether this unit is currently being loaded.
     */
    _isLoading: boolean;
    /**
     * Registers a callback taking this unit as argument, to be executed after the unit has been mark
     * as completely loaded.
     */
    _registerAfterLoadCallback(callback: (unit: IAbstractUnit) => void): any;
    /**
     * Mark this unit as having been loaded.
     */
    _markLoaded(): any;
    /**
     * Mark this unit as being loaded.
     */
    _markLoading(): any;
}
export declare type IAbstractUnitConstructor = typeof ModelUnit | typeof AbstractUnit;
/**
 * Base class for implementations of {@link IAbstractUnit}.
 */
export declare class AbstractUnit extends structures.Structure implements IAbstractUnit {
    container: StructuralUnit;
    _containmentName: string;
    _model: AbstractModel;
    constructor(model: AbstractModel, typeName: string, id: string, isPartial: boolean, container: IStructuralUnit);
    private _afterLoadCallbacks;
    _isLoading: boolean;
    /**
     * Checks whether all attributes are available at this instant;
     * if false, a load is required to access these properties.
     */
    isLoaded: boolean;
    _markLoaded(): void;
    _markLoading(): void;
    _registerAfterLoadCallback(callback: (unit: IAbstractUnit) => void): void;
    _updateWithJsonImpl(json: transport.IAbstractUnitJson): void;
    _dispose(): void;
    /**
     * Sends the create delta for this unit and all pending deltas.
     */
    _handleCreateSelf(): void;
}
export interface IStructuralUnit extends IAbstractUnit {
}
/**
 * Implementation of {@link IStructuralUnit}.
 */
export declare class StructuralUnit extends AbstractUnit implements IStructuralUnit {
    constructor(model: AbstractModel, typeName: string, id: string, _ignoredIsPartial: boolean, container: IStructuralUnit);
    unit: StructuralUnit;
}
/**
 * Model Units
 *
 * A model unit is a leaf (not a node) in the project tree and the root containing model {@link elements.Element} elements.
 * It is both a(n abstract) unit as well as "model element-like" by virtue of being an MxAbstractElement,
 * but minus the following features of MxElement:
 *  public - a model unit is public by nature
 *  container - a model unit is itself the root of the tree of elements it contains
 *
 * A unit acts as scope to resolve by-id references and keeps a cache of elements it owns.
 */
export interface IModelUnit extends IAbstractUnit, elements.IAbstractElement {
    container: IStructuralUnit;
    moduleName: string;
}
export interface IElementsCache {
    [id: string]: elements.AbstractElement;
}
/**
 * Implementation of {@link IModelUnit}.
 */
export declare class ModelUnit extends elements.AbstractElement implements IModelUnit {
    container: StructuralUnit;
    _containmentName: string;
    _elementsCache: IElementsCache;
    _isLoading: boolean;
    private _afterLoadCallbacks;
    _markLoaded: () => void;
    _markLoading: () => void;
    _registerAfterLoadCallback: (callback: (unit: IAbstractUnit) => void) => void;
    _handleCreateSelf: () => void;
    constructor(model: AbstractModel, typeName: string, id: string, isPartial: boolean, container: IStructuralUnit);
    protected _updateWithJsonImpl(json: transport.IAbstractUnitJson): void;
    unit: ModelUnit;
    isLoaded: boolean;
    /**
     * Returns the module name of the model unit, which is the first section of the qualified name.
     */
    moduleName: string;
    _dispose(): void;
}
import * as transport from './transport-interfaces';
