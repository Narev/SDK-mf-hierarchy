var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var structures = require('./structures');
var elements = require('./elements');
/**
 * Base class for implementations of {@link IAbstractUnit}.
 */
var AbstractUnit = (function (_super) {
    __extends(AbstractUnit, _super);
    function AbstractUnit(model, typeName, id, isPartial, container) {
        _super.call(this, model, typeName, id, isPartial, container);
        this._afterLoadCallbacks = [];
        this._isLoading = false;
    }
    Object.defineProperty(AbstractUnit.prototype, "isLoaded", {
        /**
         * Checks whether all attributes are available at this instant;
         * if false, a load is required to access these properties.
         */
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    AbstractUnit.prototype._markLoaded = function () {
        var _this = this;
        this._isLoading = false;
        this._isPartial = false;
        this._afterLoadCallbacks.forEach(function (cb) { return cb(_this); });
    };
    AbstractUnit.prototype._markLoading = function () {
        if (this._isLoading || this.isLoaded)
            throw new Error("Illegal state: cannot re-load a unit that's already loaded");
        this._isLoading = true;
    };
    AbstractUnit.prototype._registerAfterLoadCallback = function (callback) {
        this._afterLoadCallbacks.push(callback);
    };
    AbstractUnit.prototype._updateWithJsonImpl = function (json) {
        _super.prototype._updateWithJsonImpl.call(this, json.contents);
    };
    AbstractUnit.prototype._dispose = function () {
        this._model._uncache(this);
        _super.prototype._dispose.call(this);
    };
    /**
     * Sends the create delta for this unit and all pending deltas.
     */
    AbstractUnit.prototype._handleCreateSelf = function () {
        var _this = this;
        this.unit._model._sendDelta({
            deltaType: deltas.DeltaTypes.CREATE_UNIT,
            unitId: this.id,
            containerId: this.container.id,
            containmentName: this._containmentName,
            contentType: this.typeName
        });
        this._isNew = false;
        this._pendingDeltasAfterCreate.forEach(function (pending) {
            // FIXME: MWE: this is ugly, put lambdas in the queue or something. also see elements.ts
            if (pending instanceof Array) {
                pending[0]._sendCreateDelta(_this, pending[1]);
            }
            else {
                var delta = pending;
                delta.unitId = _this.unit.id;
                _this.unit._model._sendDelta(delta);
            }
        });
    };
    return AbstractUnit;
})(structures.Structure);
exports.AbstractUnit = AbstractUnit;
/**
 * Implementation of {@link IStructuralUnit}.
 */
var StructuralUnit = (function (_super) {
    __extends(StructuralUnit, _super);
    function StructuralUnit(model, typeName, id, _ignoredIsPartial, container) {
        // _ignoredPartial argument is here, because structural units are always loaded completely, 
        // but it is nice to keep the constructors for all units uniform so that the factories are simpler.
        _super.call(this, model, typeName, id, false, container);
    }
    Object.defineProperty(StructuralUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    return StructuralUnit;
})(AbstractUnit);
exports.StructuralUnit = StructuralUnit;
/**
 * Implementation of {@link IModelUnit}.
 */
var ModelUnit = (function (_super) {
    __extends(ModelUnit, _super);
    function ModelUnit(model, typeName, id, isPartial, container) {
        _super.call(this, model, typeName, id, isPartial, container);
        this._elementsCache = {}; // all elements that are contained in this model unit - used to resolve references-by-id for example
        this._isLoading = false;
        this._afterLoadCallbacks = [];
        /* mimics multiple inheritance */
        this._markLoaded = AbstractUnit.prototype._markLoaded;
        this._markLoading = AbstractUnit.prototype._markLoading;
        this._registerAfterLoadCallback = AbstractUnit.prototype._registerAfterLoadCallback;
        this._handleCreateSelf = AbstractUnit.prototype._handleCreateSelf;
    }
    ModelUnit.prototype._updateWithJsonImpl = function (json) {
        AbstractUnit.prototype._updateWithJsonImpl.call(this, json); // delegate
    };
    Object.defineProperty(ModelUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelUnit.prototype, "isLoaded", {
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelUnit.prototype, "moduleName", {
        /**
         * Returns the module name of the model unit, which is the first section of the qualified name.
         */
        get: function () {
            return this.qualifiedName.split(".")[0];
        },
        enumerable: true,
        configurable: true
    });
    ModelUnit.prototype._dispose = function () {
        this._model._uncache(this);
        _super.prototype._dispose.call(this); // follow AbstractElement chain
    };
    return ModelUnit;
})(elements.AbstractElement);
exports.ModelUnit = ModelUnit;
var deltas = require('./deltas');
