import * as internal from '../../src/sdk/internal';
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from '../../src/common';
export declare namespace domainmodels_simple {
    class MyEnum extends internal.IEnum {
        protected qualifiedTsTypeName: string;
        static FirstValue: MyEnum;
        static SecondValue: MyEnum;
        static AnotherValue: MyEnum;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DomainModels_simple`.
     */
    /**
     * In version 6.2.0: deleted
     * In version 6.0.4: deprecated
     * In version 6.0.1: introduced
     */
    interface IAttribute extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): Attribute;
        load(callback: (element: Attribute) => void): any;
        name: string;
        /**
         * This property is required and cannot be set to null.

         *
         * In version 6.0.4: added required
         * In version 6.0.2: removed required
         * In version 6.0.1: added required
         */
        type: IAttributeType;
    }
    /**
     * In version 6.2.0: deleted
     * In version 6.0.4: deprecated
     * In version 6.0.1: introduced
     */
    class Attribute extends internal.Element implements IAttribute {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __name;
        name: string;
        private __dataStorageGuid;
        dataStorageGuid: string;
        private __type;
        /**
         * In version 6.0.4: added required
         * In version 6.0.2: removed required
         * In version 6.0.1: added required
         */
        type: AttributeType;
        private __documentation;
        documentation: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): Attribute;
        static create(model: IModel): Attribute;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.4: introduced, added public
     */
    interface IAttribute2 extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): Attribute2;
        load(callback: (element: Attribute2) => void): any;
        name: string;
    }
    /**
     * In version 6.0.4: introduced, added public
     */
    class Attribute2 extends internal.Element implements IAttribute2 {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __name;
        name: string;
        private __coolNewThingy;
        coolNewThingy: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): Attribute2;
        static create(model: IModel): Attribute2;
        _initializeDefaultProperties(): void;
    }
    interface IAttributeType extends internal.IElement {
        model: IModel;
        container: IAttribute;
        load(): AttributeType;
        load(callback: (element: AttributeType) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeType extends internal.Element implements IAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface INumericAttributeTypeBase extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): NumericAttributeTypeBase;
        load(callback: (element: NumericAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class NumericAttributeTypeBase extends AttributeType implements INumericAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IIntegerAttributeTypeBase extends INumericAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): IntegerAttributeTypeBase;
        load(callback: (element: IntegerAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class IntegerAttributeTypeBase extends NumericAttributeTypeBase implements IIntegerAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IAutoNumberAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): AutoNumberAttributeType;
        load(callback: (element: AutoNumberAttributeType) => void): any;
    }
    class AutoNumberAttributeType extends IntegerAttributeTypeBase implements IAutoNumberAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): AutoNumberAttributeType;
        static create(model: IModel): AutoNumberAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IBinaryAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): BinaryAttributeType;
        load(callback: (element: BinaryAttributeType) => void): any;
    }
    class BinaryAttributeType extends AttributeType implements IBinaryAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): BinaryAttributeType;
        static create(model: IModel): BinaryAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IBooleanAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): BooleanAttributeType;
        load(callback: (element: BooleanAttributeType) => void): any;
    }
    class BooleanAttributeType extends AttributeType implements IBooleanAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): BooleanAttributeType;
        static create(model: IModel): BooleanAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IDecimalAttributeTypeBase extends INumericAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): DecimalAttributeTypeBase;
        load(callback: (element: DecimalAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DecimalAttributeTypeBase extends NumericAttributeTypeBase implements IDecimalAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface IFloatAttributeTypeBase extends IDecimalAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): FloatAttributeTypeBase;
        load(callback: (element: FloatAttributeTypeBase) => void): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class FloatAttributeTypeBase extends DecimalAttributeTypeBase implements IFloatAttributeTypeBase {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        _initializeDefaultProperties(): void;
    }
    interface ICurrencyAttributeType extends IFloatAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): CurrencyAttributeType;
        load(callback: (element: CurrencyAttributeType) => void): any;
    }
    class CurrencyAttributeType extends FloatAttributeTypeBase implements ICurrencyAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): CurrencyAttributeType;
        static create(model: IModel): CurrencyAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IDateTimeAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): DateTimeAttributeType;
        load(callback: (element: DateTimeAttributeType) => void): any;
    }
    class DateTimeAttributeType extends AttributeType implements IDateTimeAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __localizeDate;
        localizeDate: boolean;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): DateTimeAttributeType;
        static create(model: IModel): DateTimeAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IDecimalAttributeType extends IDecimalAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): DecimalAttributeType;
        load(callback: (element: DecimalAttributeType) => void): any;
    }
    class DecimalAttributeType extends DecimalAttributeTypeBase implements IDecimalAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): DecimalAttributeType;
        static create(model: IModel): DecimalAttributeType;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.1: introduced
     */
    interface IDomainModel extends internal.IModelUnit {
        model: IModel;
        container: IProject;
        load(): DomainModel;
        load(callback: (element: DomainModel) => void): any;
        name: string;
        entities: internal.IList<IEntity>;
    }
    /**
     * In version 6.0.1: introduced
     */
    class DomainModel extends internal.ModelUnit implements IDomainModel {
        model: IModel;
        static typeName: string;
        container: Project;
        private __name;
        name: string;
        private __documentation;
        documentation: string;
        private __entities;
        entities: internal.IList<Entity>;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: IProject);
        /**
         * Creates a new DomainModel unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        static createIn(container: IProject): DomainModel;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.2: introduced, removed experimental
     * In version 6.0.1: added experimental
     * In version 6.0.0:
     */
    interface IEntity extends internal.IElement {
        model: IModel;
        container: IDomainModel;
        load(): Entity;
        load(callback: (element: Entity) => void): any;
        /**
         * In version 6.0.5: added public, added required
         * In version 6.0.2: removed public, removed required
         * In version 6.0.1: added public, added required
         */
        name: string;
        /**
         * In version 6.2.0: deleted
         * In version 6.0.4: deprecated
         * In version 6.0.1: introduced
         */
        attributes: internal.IList<IAttribute>;
        /**
         * In version 6.0.4: introduced
         */
        attributes2: internal.IList<IAttribute2>;
        /**
         * In version 6.0.4: introduced
         */
        newThing: INewElement;
    }
    /**
     * In version 6.0.2: introduced, removed experimental
     * In version 6.0.1: added experimental
     * In version 6.0.0:
     */
    class Entity extends internal.Element implements IEntity {
        model: IModel;
        static typeName: string;
        container: DomainModel;
        private __name;
        /**
         * In version 6.0.5: added public, added required
         * In version 6.0.2: removed public, removed required
         * In version 6.0.1: added public, added required
         */
        name: string;
        private __location;
        location: common.IPoint;
        private __documentation;
        documentation: string;
        private __attributes;
        /**
         * In version 6.2.0: deleted
         * In version 6.0.4: deprecated
         * In version 6.0.1: introduced
         */
        attributes: internal.IList<Attribute>;
        private __attributes2;
        /**
         * In version 6.0.4: introduced
         */
        attributes2: internal.IList<Attribute2>;
        private __superCool;
        superCool: SuperCoolElement;
        private __newThing;
        /**
         * In version 6.0.4: introduced
         */
        newThing: NewElement;
        private __nonUsedElement;
        /**
         * In version 6.0.5: introduced
         */
        nonUsedElement: VeryNewElement;
        private __experimentalElemInModel;
        /**
         * In version 6.0.4: introduced
         */
        experimentalElemInModel: ExperimentalElement;
        private __experimentalElemNotInModel;
        /**
         * In version 6.0.4: introduced
         */
        experimentalElemNotInModel: ExperimentalElement;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: DomainModel): Entity;
        static create(model: IModel): Entity;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.9: added experimental
     * In version 6.0.7: removed experimental
     * In version 6.0.6: added experimental
     * In version 6.0.4: introduced
     */
    interface IExperimentalElement extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): ExperimentalElement;
        load(callback: (element: ExperimentalElement) => void): any;
    }
    /**
     * In version 6.0.9: added experimental
     * In version 6.0.7: removed experimental
     * In version 6.0.6: added experimental
     * In version 6.0.4: introduced
     */
    class ExperimentalElement extends internal.Element implements IExperimentalElement {
        model: IModel;
        static typeName: string;
        container: Entity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static create(model: IModel): ExperimentalElement;
        _initializeDefaultProperties(): void;
    }
    interface IFloatAttributeType extends IFloatAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): FloatAttributeType;
        load(callback: (element: FloatAttributeType) => void): any;
    }
    class FloatAttributeType extends FloatAttributeTypeBase implements IFloatAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): FloatAttributeType;
        static create(model: IModel): FloatAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IHashedStringAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): HashedStringAttributeType;
        load(callback: (element: HashedStringAttributeType) => void): any;
    }
    class HashedStringAttributeType extends AttributeType implements IHashedStringAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): HashedStringAttributeType;
        static create(model: IModel): HashedStringAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface IIntegerAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): IntegerAttributeType;
        load(callback: (element: IntegerAttributeType) => void): any;
    }
    class IntegerAttributeType extends IntegerAttributeTypeBase implements IIntegerAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): IntegerAttributeType;
        static create(model: IModel): IntegerAttributeType;
        _initializeDefaultProperties(): void;
    }
    interface ILongAttributeType extends IIntegerAttributeTypeBase {
        model: IModel;
        container: IAttribute;
        load(): LongAttributeType;
        load(callback: (element: LongAttributeType) => void): any;
    }
    class LongAttributeType extends IntegerAttributeTypeBase implements ILongAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): LongAttributeType;
        static create(model: IModel): LongAttributeType;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.4: introduced
     */
    interface INewElement extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): NewElement;
        load(callback: (element: NewElement) => void): any;
        /**
         * In version 6.0.9: added public
         * In version 6.0.7: removed public
         * In version 6.0.6: added public
         */
        myNewProp: string;
    }
    /**
     * In version 6.0.4: introduced
     */
    class NewElement extends internal.Element implements INewElement {
        model: IModel;
        static typeName: string;
        container: Entity;
        private __myProp;
        /**
         * In version 6.0.9: added required
         * In version 6.0.7: removed required
         * In version 6.0.6: added required
         */
        myProp: NewElement2;
        private __myNewProp;
        /**
         * In version 6.0.9: added public
         * In version 6.0.7: removed public
         * In version 6.0.6: added public
         */
        myNewProp: string;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): NewElement;
        static create(model: IModel): NewElement;
        _initializeDefaultProperties(): void;
    }
    interface INewElement2 extends internal.IElement {
        model: IModel;
        container: INewElement;
        load(): NewElement2;
        load(callback: (element: NewElement2) => void): any;
    }
    class NewElement2 extends internal.Element implements INewElement2 {
        model: IModel;
        static typeName: string;
        container: NewElement;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: NewElement): NewElement2;
        static create(model: IModel): NewElement2;
        _initializeDefaultProperties(): void;
    }
    interface IProject extends internal.IStructuralUnit {
        model: IModel;
        domainModel: IDomainModel;
    }
    class Project extends internal.StructuralUnit implements IProject {
        model: IModel;
        static typeName: string;
        private __domainModel;
        domainModel: IDomainModel;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: internal.IStructuralUnit);
        _initializeDefaultProperties(): void;
    }
    interface IStringAttributeType extends IAttributeType {
        model: IModel;
        container: IAttribute;
        load(): StringAttributeType;
        load(callback: (element: StringAttributeType) => void): any;
    }
    class StringAttributeType extends AttributeType implements IStringAttributeType {
        model: IModel;
        static typeName: string;
        container: Attribute;
        private __length;
        length: number;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Attribute): StringAttributeType;
        static create(model: IModel): StringAttributeType;
        _initializeDefaultProperties(): void;
    }
    /**
     * In version 6.0.4: removed public, removed experimental
     * In version 6.0.1: added public, added experimental
     */
    interface ISuperCoolElement extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): SuperCoolElement;
        load(callback: (element: SuperCoolElement) => void): any;
    }
    /**
     * In version 6.0.4: removed public, removed experimental
     * In version 6.0.1: added public, added experimental
     */
    class SuperCoolElement extends internal.Element implements ISuperCoolElement {
        model: IModel;
        static typeName: string;
        container: Entity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): SuperCoolElement;
        static create(model: IModel): SuperCoolElement;
        _initializeDefaultProperties(): void;
    }
    interface IVeryNewElement extends internal.IElement {
        model: IModel;
        container: IEntity;
        load(): VeryNewElement;
        load(callback: (element: VeryNewElement) => void): any;
    }
    class VeryNewElement extends internal.Element implements IVeryNewElement {
        model: IModel;
        static typeName: string;
        container: Entity;
        static versionInfo: StructureVersionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        static createIn(container: Entity): VeryNewElement;
        static create(model: IModel): VeryNewElement;
        _initializeDefaultProperties(): void;
    }
}
import { IModel } from './base-model';
