var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require('../../src/sdk/internal');
exports.StructureVersionInfo = internal.StructureVersionInfo;
var utils_1 = require('../../src/sdk/utils');
var domainmodels_simple;
(function (domainmodels_simple) {
    var MyEnum = (function (_super) {
        __extends(MyEnum, _super);
        function MyEnum() {
            _super.apply(this, arguments);
            this.qualifiedTsTypeName = "domainmodels_simple.MyEnum";
        }
        MyEnum.FirstValue = new MyEnum("FirstValue", {
            "introduced": "6.0.1",
            "deprecated": "6.0.4",
            "deprecationMessage": null,
            "deleted": "6.1.0",
            "deletionMessage": null
        });
        MyEnum.SecondValue = new MyEnum("SecondValue", {});
        MyEnum.AnotherValue = new MyEnum("AnotherValue", {});
        return MyEnum;
    })(internal.IEnum);
    domainmodels_simple.MyEnum = MyEnum;
    /**
     * In version 6.2.0: deleted
     * In version 6.0.4: deprecated
     * In version 6.0.1: introduced
     */
    var Attribute = (function (_super) {
        __extends(Attribute, _super);
        function Attribute(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(Attribute, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__dataStorageGuid = new internal.PrimitiveProperty(Attribute, this, "dataStorageGuid", "", internal.PrimitiveTypeEnum.Guid);
            this.__type = new internal.PartProperty(Attribute, this, "type", null, true);
            this.__documentation = new internal.PrimitiveProperty(Attribute, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Attribute() cannot be invoked directly, please use 'model.domainmodels_simple.createAttribute()'");
        }
        Object.defineProperty(Attribute.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "dataStorageGuid", {
            get: function () { return this.__dataStorageGuid.get(); },
            set: function (newValue) { this.__dataStorageGuid.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "type", {
            /**
             * In version 6.0.4: added required
             * In version 6.0.2: removed required
             * In version 6.0.1: added required
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Attribute instance in the SDK and on the server.
         * The new Attribute will be automatically stored in the 'attributes' property of the parent Entity element passed as argument.
         */
        Attribute.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Attribute, "attributes", true);
        };
        /*
         * Creates and returns a new Attribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Attribute.create = function (model) {
            return internal.instancehelpers.createElement(model, Attribute);
        };
        Attribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataStorageGuid = utils_1.utils.randomUuid();
            this.type = StringAttributeType.create(this.model);
        };
        Attribute.typeName = "DomainModels_simple$Attribute";
        Attribute.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.1",
            "deprecated": "6.0.4",
            "deprecationMessage": "Use Attribute2 instead",
            "deleted": "6.2.0",
            "deletionMessage": "Attribute2 is superior",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "type": {
                    "public": {
                        "currentValue": true
                    },
                    "required": {
                        "currentValue": true,
                        "changedIn": ["6.0.4", "6.0.2", "6.0.1"]
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return Attribute;
    })(internal.Element);
    domainmodels_simple.Attribute = Attribute;
    /**
     * In version 6.0.4: introduced, added public
     */
    var Attribute2 = (function (_super) {
        __extends(Attribute2, _super);
        function Attribute2(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(Attribute2, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__coolNewThingy = new internal.PrimitiveProperty(Attribute2, this, "coolNewThingy", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new Attribute2() cannot be invoked directly, please use 'model.domainmodels_simple.createAttribute2()'");
        }
        Object.defineProperty(Attribute2.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attribute2.prototype, "coolNewThingy", {
            get: function () { return this.__coolNewThingy.get(); },
            set: function (newValue) { this.__coolNewThingy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Attribute2 instance in the SDK and on the server.
         * The new Attribute2 will be automatically stored in the 'attributes2' property of the parent Entity element passed as argument.
         */
        Attribute2.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Attribute2, "attributes2", true);
        };
        /*
         * Creates and returns a new Attribute2 instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Attribute2.create = function (model) {
            return internal.instancehelpers.createElement(model, Attribute2);
        };
        Attribute2.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Attribute2.typeName = "DomainModels_simple$Attribute2";
        Attribute2.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.4",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                }
            },
            "public": {
                "currentValue": true,
                "changedIn": ["6.0.4"]
            }
        }, internal.StructureType.Element);
        return Attribute2;
    })(internal.Element);
    domainmodels_simple.Attribute2 = Attribute2;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeType = (function (_super) {
        __extends(AttributeType, _super);
        function AttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new AttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createAttributeType()'");
        }
        AttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AttributeType.typeName = "DomainModels_simple$AttributeType";
        AttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AttributeType;
    })(internal.Element);
    domainmodels_simple.AttributeType = AttributeType;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var NumericAttributeTypeBase = (function (_super) {
        __extends(NumericAttributeTypeBase, _super);
        function NumericAttributeTypeBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new NumericAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels_simple.createNumericAttributeTypeBase()'");
        }
        NumericAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NumericAttributeTypeBase.typeName = "DomainModels_simple$NumericAttributeTypeBase";
        NumericAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NumericAttributeTypeBase;
    })(AttributeType);
    domainmodels_simple.NumericAttributeTypeBase = NumericAttributeTypeBase;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var IntegerAttributeTypeBase = (function (_super) {
        __extends(IntegerAttributeTypeBase, _super);
        function IntegerAttributeTypeBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new IntegerAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels_simple.createIntegerAttributeTypeBase()'");
        }
        IntegerAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerAttributeTypeBase.typeName = "DomainModels_simple$IntegerAttributeTypeBase";
        IntegerAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerAttributeTypeBase;
    })(NumericAttributeTypeBase);
    domainmodels_simple.IntegerAttributeTypeBase = IntegerAttributeTypeBase;
    var AutoNumberAttributeType = (function (_super) {
        __extends(AutoNumberAttributeType, _super);
        function AutoNumberAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new AutoNumberAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createAutoNumberAttributeType()'");
        }
        /*
         * Creates and returns a new AutoNumberAttributeType instance in the SDK and on the server.
         * The new AutoNumberAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        AutoNumberAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AutoNumberAttributeType, "type", false);
        };
        /*
         * Creates and returns a new AutoNumberAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AutoNumberAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, AutoNumberAttributeType);
        };
        AutoNumberAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        AutoNumberAttributeType.typeName = "DomainModels_simple$AutoNumberAttributeType";
        AutoNumberAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return AutoNumberAttributeType;
    })(IntegerAttributeTypeBase);
    domainmodels_simple.AutoNumberAttributeType = AutoNumberAttributeType;
    var BinaryAttributeType = (function (_super) {
        __extends(BinaryAttributeType, _super);
        function BinaryAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new BinaryAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createBinaryAttributeType()'");
        }
        /*
         * Creates and returns a new BinaryAttributeType instance in the SDK and on the server.
         * The new BinaryAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        BinaryAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BinaryAttributeType, "type", false);
        };
        /*
         * Creates and returns a new BinaryAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BinaryAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, BinaryAttributeType);
        };
        BinaryAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BinaryAttributeType.typeName = "DomainModels_simple$BinaryAttributeType";
        BinaryAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BinaryAttributeType;
    })(AttributeType);
    domainmodels_simple.BinaryAttributeType = BinaryAttributeType;
    var BooleanAttributeType = (function (_super) {
        __extends(BooleanAttributeType, _super);
        function BooleanAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new BooleanAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createBooleanAttributeType()'");
        }
        /*
         * Creates and returns a new BooleanAttributeType instance in the SDK and on the server.
         * The new BooleanAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        BooleanAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BooleanAttributeType, "type", false);
        };
        /*
         * Creates and returns a new BooleanAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BooleanAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, BooleanAttributeType);
        };
        BooleanAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        BooleanAttributeType.typeName = "DomainModels_simple$BooleanAttributeType";
        BooleanAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return BooleanAttributeType;
    })(AttributeType);
    domainmodels_simple.BooleanAttributeType = BooleanAttributeType;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DecimalAttributeTypeBase = (function (_super) {
        __extends(DecimalAttributeTypeBase, _super);
        function DecimalAttributeTypeBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DecimalAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels_simple.createDecimalAttributeTypeBase()'");
        }
        DecimalAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalAttributeTypeBase.typeName = "DomainModels_simple$DecimalAttributeTypeBase";
        DecimalAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalAttributeTypeBase;
    })(NumericAttributeTypeBase);
    domainmodels_simple.DecimalAttributeTypeBase = DecimalAttributeTypeBase;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var FloatAttributeTypeBase = (function (_super) {
        __extends(FloatAttributeTypeBase, _super);
        function FloatAttributeTypeBase(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new FloatAttributeTypeBase() cannot be invoked directly, please use 'model.domainmodels_simple.createFloatAttributeTypeBase()'");
        }
        FloatAttributeTypeBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatAttributeTypeBase.typeName = "DomainModels_simple$FloatAttributeTypeBase";
        FloatAttributeTypeBase.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatAttributeTypeBase;
    })(DecimalAttributeTypeBase);
    domainmodels_simple.FloatAttributeTypeBase = FloatAttributeTypeBase;
    var CurrencyAttributeType = (function (_super) {
        __extends(CurrencyAttributeType, _super);
        function CurrencyAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new CurrencyAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createCurrencyAttributeType()'");
        }
        /*
         * Creates and returns a new CurrencyAttributeType instance in the SDK and on the server.
         * The new CurrencyAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        CurrencyAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CurrencyAttributeType, "type", false);
        };
        /*
         * Creates and returns a new CurrencyAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CurrencyAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, CurrencyAttributeType);
        };
        CurrencyAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        CurrencyAttributeType.typeName = "DomainModels_simple$CurrencyAttributeType";
        CurrencyAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return CurrencyAttributeType;
    })(FloatAttributeTypeBase);
    domainmodels_simple.CurrencyAttributeType = CurrencyAttributeType;
    var DateTimeAttributeType = (function (_super) {
        __extends(DateTimeAttributeType, _super);
        function DateTimeAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__localizeDate = new internal.PrimitiveProperty(DateTimeAttributeType, this, "localizeDate", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4)
                throw new Error("new DateTimeAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createDateTimeAttributeType()'");
        }
        Object.defineProperty(DateTimeAttributeType.prototype, "localizeDate", {
            get: function () { return this.__localizeDate.get(); },
            set: function (newValue) { this.__localizeDate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new DateTimeAttributeType instance in the SDK and on the server.
         * The new DateTimeAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        DateTimeAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DateTimeAttributeType, "type", false);
        };
        /*
         * Creates and returns a new DateTimeAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DateTimeAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DateTimeAttributeType);
        };
        DateTimeAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.localizeDate = true;
        };
        DateTimeAttributeType.typeName = "DomainModels_simple$DateTimeAttributeType";
        DateTimeAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DateTimeAttributeType;
    })(AttributeType);
    domainmodels_simple.DateTimeAttributeType = DateTimeAttributeType;
    var DecimalAttributeType = (function (_super) {
        __extends(DecimalAttributeType, _super);
        function DecimalAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new DecimalAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createDecimalAttributeType()'");
        }
        /*
         * Creates and returns a new DecimalAttributeType instance in the SDK and on the server.
         * The new DecimalAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        DecimalAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DecimalAttributeType, "type", false);
        };
        /*
         * Creates and returns a new DecimalAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DecimalAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, DecimalAttributeType);
        };
        DecimalAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DecimalAttributeType.typeName = "DomainModels_simple$DecimalAttributeType";
        DecimalAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return DecimalAttributeType;
    })(DecimalAttributeTypeBase);
    domainmodels_simple.DecimalAttributeType = DecimalAttributeType;
    /**
     * In version 6.0.1: introduced
     */
    var DomainModel = (function (_super) {
        __extends(DomainModel, _super);
        function DomainModel(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__name = new internal.PrimitiveProperty(DomainModel, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__documentation = new internal.PrimitiveProperty(DomainModel, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__entities = new internal.PartListProperty(DomainModel, this, "entities", []);
            this._containmentName = "domainModel";
        }
        Object.defineProperty(DomainModel.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomainModel.prototype, "entities", {
            get: function () { return this.__entities.get(); },
            set: function (newValue) { this.__entities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new DomainModel unit in the SDK and on the server.
         * Expects one argument, a Project in which this unit is contained.
         */
        DomainModel.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, DomainModel);
        };
        DomainModel.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        DomainModel.typeName = "DomainModels_simple$DomainModel";
        DomainModel.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.1",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true
                    }
                },
                "entities": {
                    "public": {
                        "currentValue": true
                    }
                }
            }
        }, internal.StructureType.ModelUnit);
        return DomainModel;
    })(internal.ModelUnit);
    domainmodels_simple.DomainModel = DomainModel;
    /**
     * In version 6.0.2: introduced, removed experimental
     * In version 6.0.1: added experimental
     * In version 6.0.0:
     */
    var Entity = (function (_super) {
        __extends(Entity, _super);
        function Entity(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__name = new internal.PrimitiveProperty(Entity, this, "name", "", internal.PrimitiveTypeEnum.String);
            this.__location = new internal.PrimitiveProperty(Entity, this, "location", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            this.__documentation = new internal.PrimitiveProperty(Entity, this, "documentation", "", internal.PrimitiveTypeEnum.String);
            this.__attributes = new internal.PartListProperty(Entity, this, "attributes", []);
            this.__attributes2 = new internal.PartListProperty(Entity, this, "attributes2", []);
            this.__superCool = new internal.PartProperty(Entity, this, "superCool", null, false);
            this.__newThing = new internal.PartProperty(Entity, this, "newThing", null, false);
            this.__nonUsedElement = new internal.PartProperty(Entity, this, "nonUsedElement", null, false);
            this.__experimentalElemInModel = new internal.PartProperty(Entity, this, "experimentalElemInModel", null, false);
            this.__experimentalElemNotInModel = new internal.PartProperty(Entity, this, "experimentalElemNotInModel", null, false);
            if (arguments.length < 4)
                throw new Error("new Entity() cannot be invoked directly, please use 'model.domainmodels_simple.createEntity()'");
        }
        Object.defineProperty(Entity.prototype, "name", {
            /**
             * In version 6.0.5: added public, added required
             * In version 6.0.2: removed public, removed required
             * In version 6.0.1: added public, added required
             */
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "attributes", {
            /**
             * In version 6.2.0: deleted
             * In version 6.0.4: deprecated
             * In version 6.0.1: introduced
             */
            get: function () { return this.__attributes.get(); },
            set: function (newValue) { this.__attributes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "attributes2", {
            /**
             * In version 6.0.4: introduced
             */
            get: function () { return this.__attributes2.get(); },
            set: function (newValue) { this.__attributes2.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "superCool", {
            get: function () { return this.__superCool.get(); },
            set: function (newValue) { this.__superCool.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "newThing", {
            /**
             * In version 6.0.4: introduced
             */
            get: function () { return this.__newThing.get(); },
            set: function (newValue) { this.__newThing.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "nonUsedElement", {
            /**
             * In version 6.0.5: introduced
             */
            get: function () { return this.__nonUsedElement.get(); },
            set: function (newValue) { this.__nonUsedElement.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "experimentalElemInModel", {
            /**
             * In version 6.0.4: introduced
             */
            get: function () { return this.__experimentalElemInModel.get(); },
            set: function (newValue) { this.__experimentalElemInModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "experimentalElemNotInModel", {
            /**
             * In version 6.0.4: introduced
             */
            get: function () { return this.__experimentalElemNotInModel.get(); },
            set: function (newValue) { this.__experimentalElemNotInModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new Entity instance in the SDK and on the server.
         * The new Entity will be automatically stored in the 'entities' property of the parent DomainModel element passed as argument.
         */
        Entity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Entity, "entities", true);
        };
        /*
         * Creates and returns a new Entity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Entity.create = function (model) {
            return internal.instancehelpers.createElement(model, Entity);
        };
        Entity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.name = "MyEntity";
        };
        Entity.typeName = "DomainModels_simple$Entity";
        Entity.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.2",
            "properties": {
                "name": {
                    "public": {
                        "currentValue": true,
                        "changedIn": ["6.0.5", "6.0.2", "6.0.1"]
                    }
                },
                "attributes": {
                    "introduced": "6.0.1",
                    "deprecated": "6.0.4",
                    "deprecationMessage": "Use Attribute 2 instead",
                    "deleted": "6.2.0",
                    "deletionMessage": "Attribute2 is superior",
                    "public": {
                        "currentValue": true
                    }
                },
                "attributes2": {
                    "introduced": "6.0.4",
                    "public": {
                        "currentValue": true
                    }
                },
                "newThing": {
                    "introduced": "6.0.4",
                    "public": {
                        "currentValue": true
                    }
                },
                "nonUsedElement": {
                    "introduced": "6.0.5"
                },
                "experimentalElemInModel": {
                    "introduced": "6.0.4"
                },
                "experimentalElemNotInModel": {
                    "introduced": "6.0.4"
                }
            },
            "public": {
                "currentValue": true
            },
            "experimental": {
                "currentValue": false,
                "changedIn": ["6.0.2", "6.0.1"]
            }
        }, internal.StructureType.Element);
        return Entity;
    })(internal.Element);
    domainmodels_simple.Entity = Entity;
    /**
     * In version 6.0.9: added experimental
     * In version 6.0.7: removed experimental
     * In version 6.0.6: added experimental
     * In version 6.0.4: introduced
     */
    var ExperimentalElement = (function (_super) {
        __extends(ExperimentalElement, _super);
        function ExperimentalElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new ExperimentalElement() cannot be invoked directly, please use 'model.domainmodels_simple.createExperimentalElement()'");
        }
        /*
         * Creates and returns a new ExperimentalElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExperimentalElement.create = function (model) {
            return internal.instancehelpers.createElement(model, ExperimentalElement);
        };
        ExperimentalElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        ExperimentalElement.typeName = "DomainModels_simple$ExperimentalElement";
        ExperimentalElement.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.4",
            "experimental": {
                "currentValue": true,
                "changedIn": ["6.0.9", "6.0.7", "6.0.6"]
            }
        }, internal.StructureType.Element);
        return ExperimentalElement;
    })(internal.Element);
    domainmodels_simple.ExperimentalElement = ExperimentalElement;
    var FloatAttributeType = (function (_super) {
        __extends(FloatAttributeType, _super);
        function FloatAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new FloatAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createFloatAttributeType()'");
        }
        /*
         * Creates and returns a new FloatAttributeType instance in the SDK and on the server.
         * The new FloatAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        FloatAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, FloatAttributeType, "type", false);
        };
        /*
         * Creates and returns a new FloatAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FloatAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, FloatAttributeType);
        };
        FloatAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        FloatAttributeType.typeName = "DomainModels_simple$FloatAttributeType";
        FloatAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return FloatAttributeType;
    })(FloatAttributeTypeBase);
    domainmodels_simple.FloatAttributeType = FloatAttributeType;
    var HashedStringAttributeType = (function (_super) {
        __extends(HashedStringAttributeType, _super);
        function HashedStringAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new HashedStringAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createHashedStringAttributeType()'");
        }
        /*
         * Creates and returns a new HashedStringAttributeType instance in the SDK and on the server.
         * The new HashedStringAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        HashedStringAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, HashedStringAttributeType, "type", false);
        };
        /*
         * Creates and returns a new HashedStringAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HashedStringAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, HashedStringAttributeType);
        };
        HashedStringAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        HashedStringAttributeType.typeName = "DomainModels_simple$HashedStringAttributeType";
        HashedStringAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return HashedStringAttributeType;
    })(AttributeType);
    domainmodels_simple.HashedStringAttributeType = HashedStringAttributeType;
    var IntegerAttributeType = (function (_super) {
        __extends(IntegerAttributeType, _super);
        function IntegerAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new IntegerAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createIntegerAttributeType()'");
        }
        /*
         * Creates and returns a new IntegerAttributeType instance in the SDK and on the server.
         * The new IntegerAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        IntegerAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, IntegerAttributeType, "type", false);
        };
        /*
         * Creates and returns a new IntegerAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        IntegerAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, IntegerAttributeType);
        };
        IntegerAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        IntegerAttributeType.typeName = "DomainModels_simple$IntegerAttributeType";
        IntegerAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return IntegerAttributeType;
    })(IntegerAttributeTypeBase);
    domainmodels_simple.IntegerAttributeType = IntegerAttributeType;
    var LongAttributeType = (function (_super) {
        __extends(LongAttributeType, _super);
        function LongAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new LongAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createLongAttributeType()'");
        }
        /*
         * Creates and returns a new LongAttributeType instance in the SDK and on the server.
         * The new LongAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        LongAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LongAttributeType, "type", false);
        };
        /*
         * Creates and returns a new LongAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LongAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, LongAttributeType);
        };
        LongAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        LongAttributeType.typeName = "DomainModels_simple$LongAttributeType";
        LongAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return LongAttributeType;
    })(IntegerAttributeTypeBase);
    domainmodels_simple.LongAttributeType = LongAttributeType;
    /**
     * In version 6.0.4: introduced
     */
    var NewElement = (function (_super) {
        __extends(NewElement, _super);
        function NewElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__myProp = new internal.PartProperty(NewElement, this, "myProp", null, true);
            this.__myNewProp = new internal.PrimitiveProperty(NewElement, this, "myNewProp", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4)
                throw new Error("new NewElement() cannot be invoked directly, please use 'model.domainmodels_simple.createNewElement()'");
        }
        Object.defineProperty(NewElement.prototype, "myProp", {
            /**
             * In version 6.0.9: added required
             * In version 6.0.7: removed required
             * In version 6.0.6: added required
             */
            get: function () { return this.__myProp.get(); },
            set: function (newValue) { this.__myProp.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewElement.prototype, "myNewProp", {
            /**
             * In version 6.0.9: added public
             * In version 6.0.7: removed public
             * In version 6.0.6: added public
             */
            get: function () { return this.__myNewProp.get(); },
            set: function (newValue) { this.__myNewProp.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new NewElement instance in the SDK and on the server.
         * The new NewElement will be automatically stored in the 'newThing' property of the parent Entity element passed as argument.
         */
        NewElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NewElement, "newThing", false);
        };
        /*
         * Creates and returns a new NewElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NewElement.create = function (model) {
            return internal.instancehelpers.createElement(model, NewElement);
        };
        NewElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.myProp = NewElement2.create(this.model);
        };
        NewElement.typeName = "DomainModels_simple$NewElement";
        NewElement.versionInfo = new exports.StructureVersionInfo({
            "introduced": "6.0.4",
            "properties": {
                "myProp": {
                    "required": {
                        "currentValue": true,
                        "changedIn": ["6.0.9", "6.0.7", "6.0.6"]
                    }
                },
                "myNewProp": {
                    "public": {
                        "currentValue": true,
                        "changedIn": ["6.0.9", "6.0.7", "6.0.6"]
                    }
                }
            },
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return NewElement;
    })(internal.Element);
    domainmodels_simple.NewElement = NewElement;
    var NewElement2 = (function (_super) {
        __extends(NewElement2, _super);
        function NewElement2(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new NewElement2() cannot be invoked directly, please use 'model.domainmodels_simple.createNewElement2()'");
        }
        /*
         * Creates and returns a new NewElement2 instance in the SDK and on the server.
         * The new NewElement2 will be automatically stored in the 'myProp' property of the parent NewElement element passed as argument.
         */
        NewElement2.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NewElement2, "myProp", false);
        };
        /*
         * Creates and returns a new NewElement2 instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NewElement2.create = function (model) {
            return internal.instancehelpers.createElement(model, NewElement2);
        };
        NewElement2.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        NewElement2.typeName = "DomainModels_simple$NewElement2";
        NewElement2.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return NewElement2;
    })(internal.Element);
    domainmodels_simple.NewElement2 = NewElement2;
    var Project = (function (_super) {
        __extends(Project, _super);
        function Project(model, typeName, id, isPartial, container) {
            _super.call(this, model, typeName, id, isPartial, container);
            this.__domainModel = new internal.StructuralChildProperty(Project, this, "domainModel", null);
            this._containmentName = "";
        }
        Object.defineProperty(Project.prototype, "domainModel", {
            get: function () { return this.__domainModel.get(); },
            set: function (newValue) { this.__domainModel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Project.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        Project.typeName = "DomainModels_simple$Project";
        Project.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.StructuralUnit);
        return Project;
    })(internal.StructuralUnit);
    domainmodels_simple.Project = Project;
    var StringAttributeType = (function (_super) {
        __extends(StringAttributeType, _super);
        function StringAttributeType(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            this.__length = new internal.PrimitiveProperty(StringAttributeType, this, "length", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4)
                throw new Error("new StringAttributeType() cannot be invoked directly, please use 'model.domainmodels_simple.createStringAttributeType()'");
        }
        Object.defineProperty(StringAttributeType.prototype, "length", {
            get: function () { return this.__length.get(); },
            set: function (newValue) { this.__length.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /*
         * Creates and returns a new StringAttributeType instance in the SDK and on the server.
         * The new StringAttributeType will be automatically stored in the 'type' property of the parent Attribute element passed as argument.
         */
        StringAttributeType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StringAttributeType, "type", false);
        };
        /*
         * Creates and returns a new StringAttributeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringAttributeType.create = function (model) {
            return internal.instancehelpers.createElement(model, StringAttributeType);
        };
        StringAttributeType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.length = 200;
        };
        StringAttributeType.typeName = "DomainModels_simple$StringAttributeType";
        StringAttributeType.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": true
            }
        }, internal.StructureType.Element);
        return StringAttributeType;
    })(AttributeType);
    domainmodels_simple.StringAttributeType = StringAttributeType;
    /**
     * In version 6.0.4: removed public, removed experimental
     * In version 6.0.1: added public, added experimental
     */
    var SuperCoolElement = (function (_super) {
        __extends(SuperCoolElement, _super);
        function SuperCoolElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new SuperCoolElement() cannot be invoked directly, please use 'model.domainmodels_simple.createSuperCoolElement()'");
        }
        /*
         * Creates and returns a new SuperCoolElement instance in the SDK and on the server.
         * The new SuperCoolElement will be automatically stored in the 'superCool' property of the parent Entity element passed as argument.
         */
        SuperCoolElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SuperCoolElement, "superCool", false);
        };
        /*
         * Creates and returns a new SuperCoolElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SuperCoolElement.create = function (model) {
            return internal.instancehelpers.createElement(model, SuperCoolElement);
        };
        SuperCoolElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        SuperCoolElement.typeName = "DomainModels_simple$SuperCoolElement";
        SuperCoolElement.versionInfo = new exports.StructureVersionInfo({
            "public": {
                "currentValue": false,
                "changedIn": ["6.0.4", "6.0.1"]
            },
            "experimental": {
                "currentValue": false,
                "changedIn": ["6.0.4", "6.0.1"]
            }
        }, internal.StructureType.Element);
        return SuperCoolElement;
    })(internal.Element);
    domainmodels_simple.SuperCoolElement = SuperCoolElement;
    var VeryNewElement = (function (_super) {
        __extends(VeryNewElement, _super);
        function VeryNewElement(model, typeName, id, isPartial, unit, container) {
            _super.call(this, model, typeName, id, isPartial, unit, container);
            if (arguments.length < 4)
                throw new Error("new VeryNewElement() cannot be invoked directly, please use 'model.domainmodels_simple.createVeryNewElement()'");
        }
        /*
         * Creates and returns a new VeryNewElement instance in the SDK and on the server.
         * The new VeryNewElement will be automatically stored in the 'nonUsedElement' property of the parent Entity element passed as argument.
         */
        VeryNewElement.createIn = function (container) {
            return internal.instancehelpers.createElement(container, VeryNewElement, "nonUsedElement", false);
        };
        /*
         * Creates and returns a new VeryNewElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VeryNewElement.create = function (model) {
            return internal.instancehelpers.createElement(model, VeryNewElement);
        };
        VeryNewElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        VeryNewElement.typeName = "DomainModels_simple$VeryNewElement";
        VeryNewElement.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
        return VeryNewElement;
    })(internal.Element);
    domainmodels_simple.VeryNewElement = VeryNewElement;
})(domainmodels_simple = exports.domainmodels_simple || (exports.domainmodels_simple = {}));
