/// <reference path="../../../test-typings.d.ts" />
import { IWorkingCopy, common, configuration, ModelUnit, IModelApiClient } from "mendixmodelsdk";
/**
 * A stub implementation of {@link IModelApiClient} which mimics a Model API where every working copy
 * is initialized using provided JSON, and deltas are simply recorded.
 */
export declare abstract class StubClient implements IModelApiClient {
    private config;
    private unitInterfaces;
    private units;
    private productVersion;
    deltas: any[];
    private models;
    constructor(config: configuration.ISdkConfig, unitInterfaces: any, units: {
        [unitId: string]: any;
    }, productVersion: string);
    createWorkingCopy(workingCopyInfo: configuration.ICreateWorkingCopyParameters, callback: common.ICallback<IWorkingCopy>, errorCallback: common.IErrorCallback): void;
    deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    loadWorkingCopyMetaData(workingCopyId: string, callback: common.ICallback<IWorkingCopy>, errorCallback: common.IErrorCallback): any;
    loadUnitInterfaces(workingCopyId: string, callback: common.ICallback<any[]>, errorCallback: common.IErrorCallback): any;
    grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback): any;
    exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    getFilePaths(workingCopyId: string, callback: common.ICallback<string[]>, errorCallback: common.IErrorCallback): any;
    getFile(workingCopyId: string, filePath: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    putFile(workingCopyId: string, inFilePath: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    deleteFile(workingCopyId: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): any;
    loadUnitById<T extends ModelUnit>(workingCopyId: string, unitId: string, callback: any): any;
    sendDeltas(workingCopyId: string, deltas: any[], onSuccess: common.ICallback<Object>, onError: common.IErrorCallback): any;
}
export declare class CompanyExpensesStubClient extends StubClient {
    static domainModelUnitId: string;
    static domainModelUnitId2: string;
    static domainModelUnitId3: string;
    constructor(config: configuration.ISdkConfig);
}
export declare class TestModelStubClient extends StubClient {
    static domainModelUnitId: string;
    constructor(config: configuration.ISdkConfig, version: string);
}
