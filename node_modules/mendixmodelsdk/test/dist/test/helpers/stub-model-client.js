/// <reference path="../test-typings.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var mendixmodelsdk_1 = require("mendixmodelsdk");
var file_helper_1 = require('./file-helper');
/**
 * A stub implementation of {@link IModelApiClient} which mimics a Model API where every working copy
 * is initialized using provided JSON, and deltas are simply recorded.
 */
var StubClient = (function () {
    function StubClient(config, unitInterfaces, units, productVersion) {
        this.config = config;
        this.unitInterfaces = unitInterfaces;
        this.units = units;
        this.productVersion = productVersion;
        this.deltas = [];
        this.models = {};
    }
    // TODO  type better
    StubClient.prototype.createWorkingCopy = function (workingCopyInfo, callback, errorCallback) {
        var _this = this;
        var model = new mendixmodelsdk_1.Model(this, errorCallback, this.config);
        var workingCopyId = mendixmodelsdk_1.utils.randomUuid();
        this.loadWorkingCopyMetaData(workingCopyId, function (info) {
            _this.models[workingCopyId] = model;
            callback(info);
        }, errorCallback);
    };
    StubClient.prototype.deleteWorkingCopy = function (workingCopyId, callback, errorCallback) {
        if (this.models[workingCopyId]) {
            delete this.models[workingCopyId];
            return void callback();
        }
        else {
            return void errorCallback("working copy not found: " + workingCopyId);
        }
    };
    StubClient.prototype.loadWorkingCopyMetaData = function (workingCopyId, callback, errorCallback) {
        return void callback({
            id: workingCopyId,
            metaData: {
                name: "Stub project",
                description: "Stub project for testing",
                avatarUrl: ""
            },
            members: [],
            mprFileName: "mpr.mpr",
            mprMetaData: {
                _ProductVersion: this.productVersion,
                _BuildVersion: "0",
                _SchemaHash: ""
            }
        });
    };
    StubClient.prototype.loadUnitInterfaces = function (workingCopyId, callback, errorCallback) {
        return void callback(this.unitInterfaces);
    };
    StubClient.prototype.grantAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.revokeAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.checkAccess = function (workingCopyId, memberOpenId, callback, errorCallback) {
        return void callback(true);
    };
    StubClient.prototype.exportMpk = function (workingCopyId, outFilePath, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.getFilePaths = function (workingCopyId, callback, errorCallback) {
        return void callback([]);
    };
    StubClient.prototype.getFile = function (workingCopyId, filePath, outFilePath, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.putFile = function (workingCopyId, inFilePath, filePath, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.deleteFile = function (workingCopyId, filePath, callback, errorCallback) {
        return void callback();
    };
    StubClient.prototype.loadUnitById = function (workingCopyId, unitId, callback) {
        var unit = this.units[unitId];
        if (unit)
            return void callback(unit);
        else
            throw new Error("Unknown unit id " + unitId);
    };
    StubClient.prototype.sendDeltas = function (workingCopyId, deltas, onSuccess, onError) {
        (_a = this.deltas).push.apply(_a, deltas);
        var results = [];
        for (var i = 0; i < deltas.length; i++) {
            results.push({});
        }
        return void onSuccess({ successResults: results, firstError: null });
        var _a;
    };
    return StubClient;
})();
exports.StubClient = StubClient;
var CompanyExpensesStubClient = (function (_super) {
    __extends(CompanyExpensesStubClient, _super);
    function CompanyExpensesStubClient(config) {
        _super.call(this, config, file_helper_1.readJson('company-expenses-interfaces-expected.json'), (_a = {},
            _a[CompanyExpensesStubClient.domainModelUnitId] = file_helper_1.readJson('company-expenses-domain-model-expected.json'),
            _a[CompanyExpensesStubClient.domainModelUnitId2] = {
                "$ID": "0844e404-5674-445c-b4d4-55089b2750b0",
                "$Type": "DomainModels$DomainModel",
                "containerId": "a9009087-36cd-41a0-aa8f-cc1520fb9564",
                "containmentName": "domainModel",
                "contents": {
                    "entities": [],
                    "associations": [],
                    "crossAssociations": []
                }
            },
            _a[CompanyExpensesStubClient.domainModelUnitId3] = {
                "$ID": "b55c4efc-0ba1-4e2f-a682-9cef7d26042b",
                "$Type": "DomainModels$DomainModel",
                "containerId": "82724765-dc37-4909-b410-7dc92c3ce74c",
                "containmentName": "domainModel",
                "contents": {
                    "entities": [],
                    "associations": [],
                    "crossAssociations": []
                }
            },
            _a
        ), "5.16.0");
        var _a;
    }
    CompanyExpensesStubClient.domainModelUnitId = "6ff9f92e-d8b1-4392-a0c8-dedb47bded2d";
    CompanyExpensesStubClient.domainModelUnitId2 = "0844e404-5674-445c-b4d4-55089b2750b0";
    CompanyExpensesStubClient.domainModelUnitId3 = "b55c4efc-0ba1-4e2f-a682-9cef7d26042b";
    return CompanyExpensesStubClient;
})(StubClient);
exports.CompanyExpensesStubClient = CompanyExpensesStubClient;
var TestModelStubClient = (function (_super) {
    __extends(TestModelStubClient, _super);
    function TestModelStubClient(config, version) {
        _super.call(this, config, file_helper_1.readJson('test-model-interfaces.json'), (_a = {},
            _a[TestModelStubClient.domainModelUnitId] = file_helper_1.readJson('test-domain-model.json'),
            _a
        ), version);
        var _a;
    }
    TestModelStubClient.domainModelUnitId = "01e537da-b654-4265-b3d1-c91cb630244e";
    return TestModelStubClient;
})(StubClient);
exports.TestModelStubClient = TestModelStubClient;
