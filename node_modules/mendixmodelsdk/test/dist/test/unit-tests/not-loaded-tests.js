/// <reference path="../test-typings.d.ts"/>
var sdk_client_helper_1 = require('../helpers/sdk-client-helper');
var chai_1 = require('chai');
describe('assert not loaded', function () {
    it('should create a domain model, folder and page without fetching parents first', function (done) {
        var client = sdk_client_helper_1.createSdkClient();
        client.openWorkingCopy("1", function (model) {
            var ERROR_MSG = 'not fully loaded';
            // not allowed, load() on unloaded document
            chai_1.assert.throws(function () { return model.allMicroflows()[0].load(); }, 'Microflows$Microflow');
            chai_1.assert.throws(function () { return model.allMicroflows()[0].load(); }, ERROR_MSG);
            // not allowed, access non public property on unloaded document
            chai_1.assert.throws(function () { return model.allMicroflows()[0]['objectCollection']; }, 'objectCollection');
            chai_1.assert.throws(function () { return model.allMicroflows()[0]['objectCollection']; }, 'Microflows$Microflow');
            chai_1.assert.throws(function () { return model.allMicroflows()[0]['objectCollection']; }, ERROR_MSG);
            // allowed; change structural unit
            model.allFolders()[0].name = 'testing';
            // not allowed, change model unit
            chai_1.assert.throws(function () { return model.allMicroflows()[0].name = 'testing'; }, "'name'");
            chai_1.assert.throws(function () { return model.allMicroflows()[0].name = 'testing'; }, "'Microflows$Microflow'");
            chai_1.assert.throws(function () { return model.allMicroflows()[0].name = 'testing'; }, ERROR_MSG);
            // not allowed, change inside model unit
            var dm = model.allDomainModels()[1];
            chai_1.assert.ok(dm.entities.length > 0);
            chai_1.assert.throws(function () { return dm.entities[0].name = 'testing'; }, "'name'");
            chai_1.assert.throws(function () { return dm.entities[0].name = 'testing'; }, "'DomainModels$Entity'");
            chai_1.assert.throws(function () { return dm.entities[0].name = 'testing'; }, ERROR_MSG);
            done();
        }, done);
    });
});
