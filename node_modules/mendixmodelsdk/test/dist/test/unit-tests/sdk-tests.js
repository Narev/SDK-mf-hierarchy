/// <reference path="../test-typings.d.ts"/>
var sdk_client_helper_1 = require('../helpers/sdk-client-helper');
var createWorkingCopyParams = {
    name: 'testName',
    description: 'description',
    avatarUrl: 'avatarUrl',
    template: '../model-api/test-data/NewApp.mpk'
};
describe('sdk must be able to', function () {
    it('read a project', function (done) {
        sdk_client_helper_1.createSdkClient().openWorkingCopy("1", function (project) {
            done();
        }, done);
    });
    it('read a project and then download it', function (done) {
        sdk_client_helper_1.createSdkClient().exportMpk("1", "temp_mpr.mpr", function () {
            done();
        }, done);
    });
    it('create a project as backend', function (done) {
        sdk_client_helper_1.createBackendSdkClient().createWorkingCopy(createWorkingCopyParams, function (project) {
            done();
        }, done);
    });
    it('create a project', function (done) {
        sdk_client_helper_1.createSdkClient().createWorkingCopy(createWorkingCopyParams, function (project) {
            done();
        }, done);
    });
    it('delete a just created project', function (done) {
        var client = sdk_client_helper_1.createBackendSdkClient();
        client.createWorkingCopy(createWorkingCopyParams, function (project) {
            client.deleteWorkingCopy(project.id, function () {
                done();
            }, done);
        }, done);
    });
    it('throw an error when you try to delete a project without backend params', function (done) {
        try {
            sdk_client_helper_1.createSdkClient().deleteWorkingCopy("1", function () {
                done("should not be able to delete a project without backend params");
            }, function (error) {
                done();
            });
        }
        catch (e) {
            done();
        }
    });
    // doesn't actually grant a user anything, just checks if the calls don't throw errors
    it('grant access to a user', function (done) {
        sdk_client_helper_1.createBackendSdkClient().grantAccess("1", "qwe", function () {
            done();
        }, done);
    });
    // doesn't actually grant a user anything, just checks if the calls don't throw errors
    it('throw an error when you try to grant access to a project without backend params', function (done) {
        try {
            sdk_client_helper_1.createSdkClient().grantAccess("1", "qwe", function () {
                done("should not be able to grant access to a project without backend params");
            }, function (error) {
                done();
            });
        }
        catch (e) {
            done();
        }
    });
    // doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
    it('revoke access to a project for a user', function (done) {
        sdk_client_helper_1.createBackendSdkClient().revokeAccess("1", "qwe", function () {
            done();
        }, done);
    });
    // doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
    it('throw an error when you try to revoke access to a project without backend params', function (done) {
        try {
            sdk_client_helper_1.createSdkClient().revokeAccess("1", "qwe", function () {
                done("should not be able to revoke access to a project without backend params");
            }, function (error) {
                done();
            });
        }
        catch (e) {
            done();
        }
    });
    // doesn't actually check anything, just checks if the calls don't throw errors
    it('check access to a project for a user', function (done) {
        sdk_client_helper_1.createBackendSdkClient().checkAccess("1", "qwe", function (hasAccess) {
            done();
        }, done);
    });
    // doesn't actually check anything, just checks if the calls don't throw errors
    it('throw an error when you try to check access to a project without backend params', function (done) {
        try {
            sdk_client_helper_1.createSdkClient().checkAccess("1", "qwe", function (hasAccess) {
                done("should not be able to check access to a project without backend params");
            }, function (error) {
                done();
            });
        }
        catch (e) {
            done();
        }
    });
});
