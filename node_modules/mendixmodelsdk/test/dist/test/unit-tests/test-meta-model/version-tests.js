/// <reference path="../../test-typings.d.ts"/>
var test_index_1 = require('../../test-index');
var version = require('../../../src/sdk/internal/version-checks');
var domainmodels_simple_1 = require("../../gen/domainmodels_simple");
var stub_model_client_1 = require('../../helpers/stub-model-client');
var chai_1 = require('chai');
var detection_helper_1 = require("../../helpers/detection-helper");
var toV = version.Version.parse;
function createSdkClient(version) {
    return test_index_1.TestModel.createSdkClient({
        client: new stub_model_client_1.TestModelStubClient({}, version)
    });
}
function withEntity(mxVersion, done, doFunc) {
    createSdkClient(mxVersion).openWorkingCopy("1", function (model) {
        var domainModel = model.allDomainModels()[0];
        var entity = domainModel.entities[0];
        doFunc(entity, domainModel, model);
    }, done);
}
;
function withEntityLoaded(mxVersion, done, doFunc) {
    createSdkClient(mxVersion).openWorkingCopy("1", function (model) {
        model.allDomainModels()[0].load(function (domainModel) {
            var entity = domainModel.entities[0];
            doFunc(entity, domainModel, model);
        });
    }, done);
}
;
describe('Versioning in test meta model', function () {
    it('should work for availability of structures', function () {
        var attributeAvailability = domainmodels_simple_1.domainmodels_simple.Attribute.versionInfo.availability;
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("6.0.0")), false);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("6.0.1")), true);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("6.0.3")), true);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("6.0.4")), true);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("6.2.0")), false);
        chai_1.assert.equal(attributeAvailability.isAvailableIn(toV("13.5.5")), false);
        chai_1.assert.equal(attributeAvailability.isDeprecatedIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributeAvailability.isDeprecatedIn(toV("6.0.3")), false);
        chai_1.assert.equal(attributeAvailability.isDeprecatedIn(toV("6.0.4")), true);
        chai_1.assert.equal(attributeAvailability.isDeprecatedIn(toV("6.2.0")), false);
        chai_1.assert.equal(attributeAvailability.isDeprecatedIn(toV("13.1.2")), false);
        chai_1.assert.equal(attributeAvailability.isRemovedIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributeAvailability.isRemovedIn(toV("6.0.3")), false);
        chai_1.assert.equal(attributeAvailability.isRemovedIn(toV("6.0.4")), false);
        chai_1.assert.equal(attributeAvailability.isRemovedIn(toV("6.2.0")), true);
        chai_1.assert.equal(attributeAvailability.isRemovedIn(toV("13.0.6")), true);
    });
    it('should work for availability of properties', function () {
        var attributesPropAvailability = domainmodels_simple_1.domainmodels_simple.Entity.versionInfo.properties["attributes"].availability;
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("6.0.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("6.0.1")), true);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("6.0.3")), true);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("6.0.4")), true);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("6.2.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isAvailableIn(toV("13.5.5")), false);
        chai_1.assert.equal(attributesPropAvailability.isDeprecatedIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isDeprecatedIn(toV("6.0.3")), false);
        chai_1.assert.equal(attributesPropAvailability.isDeprecatedIn(toV("6.0.4")), true);
        chai_1.assert.equal(attributesPropAvailability.isDeprecatedIn(toV("6.2.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isDeprecatedIn(toV("13.1.2")), false);
        chai_1.assert.equal(attributesPropAvailability.isRemovedIn(toV("5.4.0")), false);
        chai_1.assert.equal(attributesPropAvailability.isRemovedIn(toV("6.0.3")), false);
        chai_1.assert.equal(attributesPropAvailability.isRemovedIn(toV("6.0.4")), false);
        chai_1.assert.equal(attributesPropAvailability.isRemovedIn(toV("6.2.0")), true);
        chai_1.assert.equal(attributesPropAvailability.isRemovedIn(toV("13.0.6")), true);
    });
    it('should work for modifiers of structures', function () {
        var superCoolElemVersionInfo = domainmodels_simple_1.domainmodels_simple.SuperCoolElement.versionInfo;
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.latestValue, false);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("6.0.0")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("6.0.1")), true);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("6.0.2")), true);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("6.0.4")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isPublic.isEnabledIn(toV("13.4.4")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.latestValue, false);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("6.0.0")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("6.0.1")), true);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("6.0.2")), true);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("6.0.4")), false);
        chai_1.assert.equal(superCoolElemVersionInfo.isExperimental.isEnabledIn(toV("13.4.4")), false);
    });
    it('should work for modifiers of properties', function () {
        var namePropertyVersionInfo = domainmodels_simple_1.domainmodels_simple.Entity.versionInfo.properties["name"];
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.latestValue, true);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("1.0.0")), false);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("6.0.0")), false);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("6.0.1")), true);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("6.0.2")), false);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("6.0.3")), false);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("6.0.5")), true);
        chai_1.assert.equal(namePropertyVersionInfo.isPublic.isEnabledIn(toV("13.0.5")), true);
        var typePropertyVersionInfo = domainmodels_simple_1.domainmodels_simple.Attribute.versionInfo.properties["type"];
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.latestValue, true);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("1.0.0")), false);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("6.0.0")), false);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("6.0.1")), true);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("6.0.2")), false);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("6.0.3")), false);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("6.0.5")), true);
        chai_1.assert.equal(typePropertyVersionInfo.isRequired.isEnabledIn(toV("13.0.5")), true);
    });
    function checkPublicProperty(done, forMxVersion, shouldThrow) {
        withEntity(forMxVersion, done, function (entity, domainModel, model) {
            function accessPublicProperty() {
                entity.newThing.myNewProp;
            }
            if (shouldThrow) {
                chai_1.assert.throws(accessPublicProperty, "not fully loaded");
            }
            else {
                chai_1.assert.doesNotThrow(accessPublicProperty);
            }
        });
    }
    it('should detect publicness of properties and structures', function (done) {
        checkPublicProperty(done, "6.0.5", true);
        checkPublicProperty(done, "6.0.6", false);
        checkPublicProperty(done, "6.0.7", true);
        checkPublicProperty(done, "6.0.8", true);
        checkPublicProperty(done, "6.0.9", false);
        done();
    });
    function checkRequiredProperty(done, forMxVersion, shouldThrow) {
        withEntityLoaded(forMxVersion, done, function (entity, domainModel, model) {
            function setPropToNull() {
                entity.newThing.myProp = null;
            }
            if (shouldThrow) {
                chai_1.assert.throws(setPropToNull, "Cannot unset required part property");
            }
            else {
                chai_1.assert.doesNotThrow(setPropToNull);
            }
        });
    }
    it('should detect requiredness of properties', function (done) {
        checkRequiredProperty(done, "6.0.5", false);
        checkRequiredProperty(done, "6.0.6", true);
        checkRequiredProperty(done, "6.0.7", false);
        checkRequiredProperty(done, "6.0.8", false);
        checkRequiredProperty(done, "6.0.9", true);
        done();
    });
    function checkExperimentalProperty(done, forMxVersion) {
        withEntityLoaded(forMxVersion, done, function (entity) {
            function accessExperimentalProperty() {
                entity.experimentalElemInModel;
            }
            detection_helper_1.withWarnFunc(function (warning) {
                done(new Error("Logged warning, but shouldn't have: " + warning));
            }, accessExperimentalProperty);
        });
    }
    // experimentalness is in MxCore only available for Elements at the moment, not for properties
    it('should detect experimentalness on get', function (done) {
        checkExperimentalProperty(done, "6.0.5");
        checkExperimentalProperty(done, "6.0.6");
        checkExperimentalProperty(done, "6.0.7");
        checkExperimentalProperty(done, "6.0.8");
        checkExperimentalProperty(done, "6.0.9");
        done();
    });
    function checkExperimentalCreate(done, forMxVersion, shouldWarn) {
        withEntityLoaded(forMxVersion, done, function (entity, domainModel, model) {
            function createExperimenalElement() {
                var expElem = domainmodels_simple_1.domainmodels_simple.ExperimentalElement.create(model);
                entity.experimentalElemNotInModel = expElem;
            }
            if (shouldWarn) {
                detection_helper_1.withWarnFunc(function (warning) {
                    chai_1.assert.equal(warning, "Type 'DomainModels_simple$ExperimentalElement' is experimental in Mendix version " + forMxVersion + " and should be used with care.");
                }, createExperimenalElement);
            }
            else {
                detection_helper_1.withWarnFunc(function (warning) {
                    done(new Error("Logged warning, but shouldn't have: " + warning));
                }, createExperimenalElement);
            }
        });
    }
    it('should detect experimentalness on creation', function (done) {
        checkExperimentalCreate(done, "6.0.5", false);
        checkExperimentalCreate(done, "6.0.6", true);
        checkExperimentalCreate(done, "6.0.7", false);
        checkExperimentalCreate(done, "6.0.8", false);
        checkExperimentalCreate(done, "6.0.9", true);
        checkExperimentalCreate(done, "6.1.0", true);
        done();
    });
    it('should detect non-introducedness on open of wc', function (done) {
        chai_1.assert.throws(function () {
            withEntity("5.0.0", done, function () {
                throw new Error("Should not be able to read a model with a property that does not exist yet in that Mendix version");
            });
        }, "Type 'DomainModels_simple$Attribute' is not yet available in Mendix version 5.0.0. It was introduced in Mendix version 6.0.1");
        done();
    });
    it('should detect introducedness on open of wc', function (done) {
        chai_1.assert.doesNotThrow(function () {
            withEntity("6.0.4", done, function () { });
        });
        done();
    });
    it('should detect non-introducedness on open of wc', function (done) {
        chai_1.assert.throws(function () {
            withEntity("6.0.0", done, function () { });
        }); // don't specify error-message, since the first missing item will throw an error, which can change over time
        done();
    });
    it('should detect introducedness on creation', function (done) {
        withEntityLoaded("6.0.4", done, function (entity, domainModel, model) {
            chai_1.assert.doesNotThrow(function () {
                domainmodels_simple_1.domainmodels_simple.Attribute2.createIn(entity);
            });
            done();
        });
    });
    it('should detect non-introducedness on creation', function (done) {
        withEntityLoaded("6.0.4", done, function (entity, domainModel, model) {
            var message = "Property 'nonUsedElement' of type 'DomainModels_simple$Entity' is not yet available in Mendix version 6.0.4. It was introduced in Mendix version 6.0.5";
            chai_1.assert.throws(function () {
                entity.nonUsedElement = domainmodels_simple_1.domainmodels_simple.VeryNewElement.create(model);
            }, message);
            chai_1.assert.throws(function () {
                domainmodels_simple_1.domainmodels_simple.VeryNewElement.createIn(entity);
            }, message);
            done();
        });
    });
    it('should detect deprecation on get', function (done) {
        withEntity("6.0.4", done, function (entity, domainModel, model) {
            detection_helper_1.withWarnFunc(function (warning) {
                //console.log("warn1: " + message);
                chai_1.assert.equal(warning, "Property 'attributes' of type 'DomainModels_simple$Entity' is deprecated in Mendix version 6.0.4 (deprecated since Mendix version 6.0.4) and should no longer be instantiated: Use Attribute 2 instead");
                done();
            }, function () {
                entity.attributes; // should trigger console.warn
            });
        });
    });
    it('should detect deprecation on creation', function (done) {
        withEntityLoaded("6.0.4", done, function (entity, domainModel, model) {
            var isDone = false;
            detection_helper_1.withWarnFunc(function (warning) {
                //console.log("warn2: " + warning);
                if (!isDone) {
                    chai_1.assert.equal(warning, "Type 'DomainModels_simple$Attribute' is deprecated in Mendix version 6.0.4 (deprecated since Mendix version 6.0.4) and should no longer be instantiated: Use Attribute2 instead");
                    isDone = true;
                    done();
                }
            }, function () {
                domainmodels_simple_1.domainmodels_simple.Attribute.createIn(entity); // should trigger console.warn
            });
        });
    });
    it('should not print same deprecation warning twice', function (done) {
        withEntityLoaded("6.0.4", done, function (entity, domainModel, model) {
            var warnings = [];
            detection_helper_1.withWarnFunc(function (warning) {
                warnings.push(warning);
            }, function () {
                for (var i = 0; i < 10; i++) {
                    domainmodels_simple_1.domainmodels_simple.Attribute.createIn(entity); // should trigger console.warn
                }
                chai_1.assert.equal(warnings.length, 2); // got warning on both type and attributes?
                chai_1.assert.deepEqual(warnings, [
                    "Type 'DomainModels_simple$Attribute' is deprecated in Mendix version 6.0.4 (deprecated since Mendix version 6.0.4) and should no longer be instantiated: Use Attribute2 instead",
                    "Property 'attributes' of type 'DomainModels_simple$Entity' is deprecated in Mendix version 6.0.4 (deprecated since Mendix version 6.0.4) and should no longer be instantiated: Use Attribute 2 instead"
                ]);
                done();
            });
        });
    });
    it('should detect deletion', function (done) {
        chai_1.assert.throws(function () {
            withEntity("6.2.0", done, function () {
                throw new Error("Should not be able to read a model with a property that no longer exists in that Mendix version");
            });
        }, "Type 'DomainModels_simple$Attribute' can no longer be instantiated in Mendix version 6.2.0 (removed since Mendix version 6.2.0): Attribute2 is superior.");
        chai_1.assert.throws(function () {
            withEntity("16.0.5", done, function () {
                throw new Error("Should not be able to read a model with a property that no longer exists in that Mendix version");
            });
        }, "Type 'DomainModels_simple$Attribute' can no longer be instantiated in Mendix version 16.0.5 (removed since Mendix version 6.2.0): Attribute2 is superior.");
        done();
    });
});
