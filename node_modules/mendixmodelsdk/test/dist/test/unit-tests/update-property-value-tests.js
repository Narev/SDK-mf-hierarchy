/// <reference path="../test-typings.d.ts"/>
var mendixmodelsdk_1 = require("mendixmodelsdk");
var sdk_client_helper_1 = require('../helpers/sdk-client-helper');
var small_domain_model_helper_1 = require('../helpers/small-domain-model-helper');
var chai_1 = require('chai');
describe('update property values', function () {
    var client = sdk_client_helper_1.createSdkClient();
    function createSmallPage(module) {
        var page = mendixmodelsdk_1.pages.Page.createIn(module);
        var model = module.model;
        var widget = mendixmodelsdk_1.customwidgets.CustomWidget.create(model);
        var widgetType = widget.type = mendixmodelsdk_1.customwidgets.CustomWidgetType.create(model);
        var widgetObjectType = widgetType.objectType = mendixmodelsdk_1.customwidgets.WidgetObjectType.create(model);
        var widgetPropertyType = mendixmodelsdk_1.customwidgets.WidgetPropertyType.create(model);
        widgetObjectType.propertyTypes.push(widgetPropertyType);
        var valueType = widgetPropertyType.valueType = mendixmodelsdk_1.customwidgets.WidgetValueType.create(model);
        var argument = mendixmodelsdk_1.pages.LayoutCallArgument.create(model);
        argument.widget = widget;
        page.layoutCall.arguments.push(argument);
        return {
            page: page,
            valueType: valueType
        };
    }
    it('should create a custom widget property with enum properties', function (done) {
        client.openWorkingCopy("1", function (model) {
            var _a = createSmallPage(model.allModules()[0]), page = _a.page, valueType = _a.valueType;
            valueType.attributeTypes.push(mendixmodelsdk_1.customwidgets.CustomWidgetAttributeType.Boolean, mendixmodelsdk_1.customwidgets.CustomWidgetAttributeType.String);
            model.closeConnection(function () {
                // Verify the deltas created during the process
                var deltas = model['_client'].deltas.slice();
                chai_1.assert.deepEqual(deltas.slice(-2), [
                    {
                        "unitId": page.id,
                        "elementId": valueType.id,
                        "deltaType": "UPDATE_PROPERTY_VALUE",
                        "propertyName": "attributeTypes",
                        "mutator": {
                            "insertionIndex": 0,
                            "value": "Boolean",
                            "mutatorType": "ADD"
                        }
                    },
                    {
                        "unitId": page.id,
                        "elementId": valueType.id,
                        "deltaType": "UPDATE_PROPERTY_VALUE",
                        "propertyName": "attributeTypes",
                        "mutator": {
                            "insertionIndex": 1,
                            "value": "String",
                            "mutatorType": "ADD"
                        }
                    }
                ]);
                done();
            });
        }, done);
    });
    it('should not be possible to add a null value to a partlist', function (done) {
        var client = sdk_client_helper_1.createSdkClient();
        client.openWorkingCopy("1", function (model) {
            var module = mendixmodelsdk_1.projects.Module.createIn(model.root);
            var domainModel = mendixmodelsdk_1.domainmodels.DomainModel.createIn(module);
            chai_1.assert.throw(function () {
                domainModel.entities.push(null);
            }, "Null values cannot be added to property");
            done();
        }, done);
    });
    it('should not be possible to add the same object to a partlist twice', function (done) {
        var client = sdk_client_helper_1.createSdkClient();
        client.openWorkingCopy("1", function (model) {
            var module = mendixmodelsdk_1.projects.Module.createIn(model.root);
            var domainModel = mendixmodelsdk_1.domainmodels.DomainModel.createIn(module);
            var entities = mendixmodelsdk_1.domainmodels.Entity.createIn(domainModel);
            chai_1.assert.throw(function () {
                domainModel.entities.push(entities);
            }, "was added more than once");
            done();
        }, done);
    });
    it("should not allow unsetting non-nillable properties", function (done) {
        client.openWorkingCopy("1", function (model) {
            var domainModel = small_domain_model_helper_1.createSmallDomainModel(model.root);
            chai_1.assert.throw(function () {
                var attribute = domainModel.entities[0].attributes[0];
                attribute.type = null;
            }, "Cannot unset required part property");
            chai_1.assert.throw(function () {
                var association = domainModel.associations[0];
                association.parent = null;
            }, "Cannot unset property");
            chai_1.assert.throw(function () {
                var crossAssociation = domainModel.crossAssociations[0];
                crossAssociation.child = null;
            }, "Cannot unset required property");
            chai_1.assert.throw(function () {
                var association = domainModel.associations[0];
                association.deleteBehavior.parentDeleteBehavior = null;
            }, "Cannot set parentDeleteBehavior to null");
            chai_1.assert.throw(function () {
                var association = domainModel.associations[0];
                association.name = null;
            }, "Cannot set name to null");
            model.closeConnection(done, done);
        }, done);
    });
    it("should not allow pushing null to a listy by-name reference", function (done) {
        client.openWorkingCopy("1", function (model) {
            var domainModel = small_domain_model_helper_1.createSmallDomainModel(model.root);
            var accessRule = mendixmodelsdk_1.domainmodels.AccessRule.create(model);
            domainModel.entities[0].accessRules.push(accessRule);
            chai_1.assert.throw(function () {
                accessRule.moduleRoles.push(null);
            }, "Cannot push null to moduleRoles");
            model.closeConnection(done, done);
        }, done);
    });
    it('should not allow pushing null to a listy enumeration property', function (done) {
        client.openWorkingCopy("1", function (model) {
            var _a = createSmallPage(model.allModules()[0]), page = _a.page, valueType = _a.valueType;
            chai_1.assert.throw(function () {
                valueType.attributeTypes.push(null);
            }, "Cannot push null to attributeTypes");
            model.closeConnection(done, done);
        }, done);
    });
    /*
     * This tests non-nillability of PrimitiveListProperty implicitly as EnumListProperty extends that.
     */
});
