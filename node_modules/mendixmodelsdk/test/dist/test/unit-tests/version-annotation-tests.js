/// <reference path="../test-typings.d.ts"/>
var chai_1 = require('chai');
var version = require('../../src/sdk/internal/version-checks');
var toV = version.Version.parse;
describe('version checks', function () {
    it('should compare versions correctly', function () {
        var v = new version.Version(1, 2, 3);
        chai_1.assert.equal(v.isAfter(toV("0.2.9")), true);
        chai_1.assert.equal(v.isAfter(toV("0.0.0")), true);
        chai_1.assert.equal(v.isAfter(toV("1.1.4")), true);
        chai_1.assert.equal(v.isAfter(toV("1.2.2")), true);
        chai_1.assert.equal(v.isAfter(toV("1.2.3")), false);
        chai_1.assert.equal(v.isAfter(toV("1.2.4")), false);
        chai_1.assert.equal(v.isAfter(toV("1.4.0")), false);
        chai_1.assert.equal(v.isAfter(toV("7.0.0")), false);
        chai_1.assert.equal(v.isAfterOrEqual(toV("1.2.4")), false);
        chai_1.assert.equal(v.isAfterOrEqual(toV("1.2.3")), true);
        chai_1.assert.equal(v.isAfterOrEqual(toV("1.2.2")), true);
        chai_1.assert.equal(v.isBefore(toV("1.2.3")), false);
        chai_1.assert.equal(v.isBefore(toV("7.0.0")), true);
        chai_1.assert.equal(v.isBefore(toV("1.2.3")), false);
        chai_1.assert.equal(v.isBefore(toV("1.2.2")), false);
        chai_1.assert.equal(v.isBefore(toV("0.8.9")), false);
        chai_1.assert.equal(v.isBeforeOrEqual(toV("1.2.4")), true);
        chai_1.assert.equal(v.isBeforeOrEqual(toV("1.2.3")), true);
        chai_1.assert.equal(v.isBeforeOrEqual(toV("1.2.2")), false);
    });
    it("should handle feature lifecycles correctly", function () {
        var unversioned = new version.LifeCycle(null);
        chai_1.assert.equal(unversioned.isAvailableIn(toV("1.2.3")), true);
        chai_1.assert.equal(unversioned.isDeprecatedIn(toV("1.2.3")), false);
        chai_1.assert.equal(unversioned.isRemovedIn(toV("1.2.3")), false);
        var unversionedButRemoved = new version.LifeCycle({ deleted: "2.0.0" });
        chai_1.assert.equal(unversionedButRemoved.isAvailableIn(toV("1.2.3")), true);
        chai_1.assert.equal(unversionedButRemoved.isDeprecatedIn(toV("1.2.3")), false);
        chai_1.assert.equal(unversionedButRemoved.isRemovedIn(toV("1.2.3")), false);
        chai_1.assert.equal(unversionedButRemoved.isAvailableIn(toV("2.0.0")), false);
        chai_1.assert.equal(unversionedButRemoved.isDeprecatedIn(toV("2.0.0")), false);
        chai_1.assert.equal(unversionedButRemoved.isRemovedIn(toV("2.0.0")), true);
        chai_1.assert.equal(unversionedButRemoved.isAvailableIn(toV("3.0.0")), false);
        chai_1.assert.equal(unversionedButRemoved.isDeprecatedIn(toV("3.0.0")), false);
        chai_1.assert.equal(unversionedButRemoved.isRemovedIn(toV("3.0.0")), true);
        var unversionedButDeprecated = new version.LifeCycle({ deprecated: "2.0.0" });
        chai_1.assert.equal(unversionedButDeprecated.isAvailableIn(toV("1.2.3")), true);
        chai_1.assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("1.2.3")), false);
        chai_1.assert.equal(unversionedButDeprecated.isRemovedIn(toV("1.2.3")), false);
        chai_1.assert.equal(unversionedButDeprecated.isAvailableIn(toV("2.0.0")), true);
        chai_1.assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("2.0.0")), true);
        chai_1.assert.equal(unversionedButDeprecated.isRemovedIn(toV("2.0.0")), false);
        chai_1.assert.equal(unversionedButDeprecated.isAvailableIn(toV("3.0.0")), true);
        chai_1.assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("3.0.0")), true);
        chai_1.assert.equal(unversionedButDeprecated.isRemovedIn(toV("3.0.0")), false);
        var addedLater = new version.LifeCycle({ introduced: "2.0.0" });
        chai_1.assert.equal(addedLater.isAvailableIn(toV("1.2.3")), false);
        chai_1.assert.equal(addedLater.isDeprecatedIn(toV("1.2.3")), false);
        chai_1.assert.equal(addedLater.isRemovedIn(toV("1.2.3")), false);
        chai_1.assert.equal(addedLater.isAvailableIn(toV("2.0.0")), true);
        chai_1.assert.equal(addedLater.isDeprecatedIn(toV("2.0.0")), false);
        chai_1.assert.equal(addedLater.isRemovedIn(toV("2.0.0")), false);
        chai_1.assert.equal(addedLater.isAvailableIn(toV("3.0.0")), true);
        chai_1.assert.equal(addedLater.isDeprecatedIn(toV("3.0.0")), false);
        chai_1.assert.equal(addedLater.isRemovedIn(toV("3.0.0")), false);
        var fullVersioned = new version.LifeCycle({ introduced: "1.0.0", deprecated: "2.0.0", deleted: "3.0.0" });
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("0.0.5")), false);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("0.0.5")), false);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("0.0.5")), false);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("1.0.0")), true);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("1.0.0")), false);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("1.0.0")), false);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("1.5.0")), true);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("1.5.0")), false);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("1.5.0")), false);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("2.0.0")), true);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("2.0.0")), true);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("2.0.0")), false);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("2.5.0")), true);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("2.5.0")), true);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("2.5.0")), false);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("3.0.0")), false);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("3.0.0")), false);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("3.0.0")), true);
        chai_1.assert.equal(fullVersioned.isAvailableIn(toV("3.5.0")), false);
        chai_1.assert.equal(fullVersioned.isDeprecatedIn(toV("3.5.0")), false);
        chai_1.assert.equal(fullVersioned.isRemovedIn(toV("3.5.0")), true);
    });
    it("should report lifecycle state correctly", function () {
        var fullVersioned = new version.LifeCycle({ introduced: "1.0.0", deprecated: "2.0.0", deleted: "3.0.0" });
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("0.0.5")), version.LifeCycleState.UNAVAILABLE);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("1.0.0")), version.LifeCycleState.AVAILABLE);
        chai_1.assert.equal(fullVersioned.getCurrentState(version.determineMetaModelVersion("1.0.0-rc1")), version.LifeCycleState.AVAILABLE);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("1.4.5")), version.LifeCycleState.AVAILABLE);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("2.0.0")), version.LifeCycleState.DEPRECATED);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("2.4.0")), version.LifeCycleState.DEPRECATED);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("3.0.0")), version.LifeCycleState.REMOVED);
        chai_1.assert.equal(fullVersioned.getCurrentState(version.determineMetaModelVersion("3.0-beta")), version.LifeCycleState.REMOVED);
        chai_1.assert.equal(fullVersioned.getCurrentState(toV("3.5.0")), version.LifeCycleState.REMOVED);
        chai_1.assert.throw(function () {
            fullVersioned.reportVersionIssues(toV("0.5.0"), "test", true);
        }, "is not yet available in Mendix version 0.5.0");
        chai_1.assert.equal(fullVersioned.reportVersionIssues(toV("1.0.0"), "test", true), false); // all ok
        chai_1.assert.equal(fullVersioned.reportVersionIssues(toV("2.0.0"), "test", true), true); //warning
        chai_1.assert.throw(function () {
            fullVersioned.reportVersionIssues(toV("3.0.0"), "test", true);
        }, "can no longer be instantiated in Mendix version 3.0.0");
    });
    it("should handle modifiers lifecycles correctly", function () {
        // test annotations pre conditions
        chai_1.assert.throws(function () {
            new version.ModifierValueHistory({ currentValue: true, changedIn: ["1.0.0", "1.0.0"] }, false);
        }, "The list of version changes is not ordered correctly");
        chai_1.assert.throws(function () {
            new version.ModifierValueHistory({ currentValue: true, changedIn: ["1.0.0", "2.0.0"] }, false);
        }, "The list of version changes is not ordered correctly");
        // test fallbacks
        chai_1.assert.equal(new version.ModifierValueHistory(null, false).isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(new version.ModifierValueHistory(null, true).isEnabledIn(toV("0.0.0")), true);
        var unchangedModifier = new version.ModifierValueHistory({ currentValue: true }, false);
        chai_1.assert.equal(unchangedModifier.isEnabledIn(toV("0.0.0")), true);
        var unchangedModifier2 = new version.ModifierValueHistory({ currentValue: false }, true);
        chai_1.assert.equal(unchangedModifier2.isEnabledIn(toV("0.0.0")), false);
        var changingModifier = new version.ModifierValueHistory({ currentValue: false, changedIn: [
                "3.0.0",
                "2.0.0",
                "1.0.0"
            ] }, false);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("3.5.0")), false);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("3.0.0")), false);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("2.5.0")), true);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("2.0.0")), true);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("1.5.0")), false);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("1.0.0")), false);
        chai_1.assert.equal(changingModifier.isEnabledIn(toV("0.5.0")), true);
        var changingModifier2 = new version.ModifierValueHistory({ currentValue: true, changedIn: [
                "3.0.0",
                "2.0.0",
                "1.0.0",
                "0.0.2",
            ] }, true);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("3.5.0")), true);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("3.0.0")), true);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("2.5.0")), false);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("2.0.0")), false);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("1.5.0")), true);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("1.0.0")), true);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("0.5.0")), false);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("0.0.2")), false);
        chai_1.assert.equal(changingModifier2.isEnabledIn(toV("0.0.1")), true);
    });
    it("should determine meta model version correctly", function () {
        chai_1.assert.equal(version.determineMetaModelVersion("1.2.3").toString(), "1.2.3");
        chai_1.assert.equal(version.determineMetaModelVersion("1.2").toString(), "1.2.0");
        chai_1.assert.equal(version.determineMetaModelVersion("1").toString(), "1.0.0");
        chai_1.assert.equal(version.determineMetaModelVersion("1.2.3.beta").toString(), "1.2.3");
        chai_1.assert.equal(version.determineMetaModelVersion("1.2.3-beta56").toString(), "1.2.3");
        chai_1.assert.equal(version.determineMetaModelVersion("1.2.beta").toString(), "1.2.0");
        chai_1.assert.equal(version.determineMetaModelVersion("1.2-beta56").toString(), "1.2.0");
    });
    it("should test structure version info objects", function () {
        var x = new version.StructureVersionInfo({
            properties: {
                prop1: {}
            }
        }, version.StructureType.Element);
        chai_1.assert.equal(x.isExperimental.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x.isPublic.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x.getPropertyVersionInfo("prop1").isRequired.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x.getPropertyVersionInfo("undeclaredProp").isPublic.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x.getPropertyVersionInfo("undeclaredProp").isRequired.isEnabledIn(toV("0.0.0")), false);
        var x2 = new version.StructureVersionInfo({
            properties: {
                prop1: {}
            }
        }, version.StructureType.StructuralUnit);
        chai_1.assert.equal(x2.isExperimental.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x2.isPublic.isEnabledIn(toV("0.0.0")), true);
        chai_1.assert.equal(x2.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), true);
        chai_1.assert.equal(x2.getPropertyVersionInfo("prop1").isRequired.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x2.getPropertyVersionInfo("undeclaredProp").isPublic.isEnabledIn(toV("0.0.0")), true);
        chai_1.assert.equal(x2.getPropertyVersionInfo("undeclaredProp").isRequired.isEnabledIn(toV("0.0.0")), false);
        var x4 = new version.StructureVersionInfo({
            properties: {
                prop1: {}
            }
        }, version.StructureType.ModelUnit);
        chai_1.assert.equal(x4.isExperimental.isEnabledIn(toV("0.0.0")), false);
        chai_1.assert.equal(x4.isPublic.isEnabledIn(toV("0.0.0")), true);
        chai_1.assert.equal(x4.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), false);
        var x3 = new version.StructureVersionInfo({
            public: {
                currentValue: false,
                changedIn: ["2.0.0"]
            },
            experimental: {
                currentValue: true
            },
            deprecated: "2.0.0",
            properties: {
                prop1: {
                    introduced: "1.0.0"
                }
            }
        }, version.StructureType.Element);
        chai_1.assert.equal(x3.isPublic.isEnabledIn(toV("1.0.0")), true);
        chai_1.assert.equal(x3.isPublic.isEnabledIn(toV("2.0.0")), false);
        chai_1.assert.equal(x3.isExperimental.isEnabledIn(toV("2.0.0")), true);
        chai_1.assert.equal(x3.availability.isDeprecatedIn(toV("1.0.0")), false);
        chai_1.assert.equal(x3.availability.isDeprecatedIn(toV("2.0.0")), true);
        chai_1.assert.equal(x3.getPropertyVersionInfo("prop1").availability.isAvailableIn(toV("0.0.0")), false);
        chai_1.assert.equal(x3.getPropertyVersionInfo("prop1").availability.isAvailableIn(toV("1.0.0")), true);
    });
});
