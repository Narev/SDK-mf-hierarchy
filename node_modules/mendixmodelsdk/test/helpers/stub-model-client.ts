/// <reference path="../test-typings.d.ts"/>

import {IWorkingCopy, common, utils, configuration, Model, ModelUnit, IModelApiClient} from "mendixmodelsdk";
import {readJson} from './file-helper';

/**
 * A stub implementation of {@link IModelApiClient} which mimics a Model API where every working copy
 * is initialized using provided JSON, and deltas are simply recorded.
 */
export abstract class StubClient implements IModelApiClient {

	deltas:any[] = [];

	private models:{ [workingCopyId:string]:Model } = {};

	constructor(private config:configuration.ISdkConfig, private unitInterfaces:any, private units:{ [unitId:string]:any }, private productVersion:string) {}
		// TODO  type better

	createWorkingCopy(workingCopyInfo:configuration.ICreateWorkingCopyParameters, callback:common.ICallback<IWorkingCopy>, errorCallback:common.IErrorCallback) {
		const model = new Model(this, errorCallback, this.config);
		const workingCopyId = utils.randomUuid();
		this.loadWorkingCopyMetaData(workingCopyId, info => {
			this.models[workingCopyId] = model;
			callback(info);
		}, errorCallback);
	}

	deleteWorkingCopy(workingCopyId:string, callback:common.IVoidCallback, errorCallback:common.IErrorCallback) {
		if (this.models[workingCopyId]) {
			delete this.models[workingCopyId];
			return void callback();
		} else {
			return void errorCallback("working copy not found: " + workingCopyId);
		}
	}

	loadWorkingCopyMetaData(workingCopyId:string, callback:common.ICallback<IWorkingCopy>, errorCallback:common.IErrorCallback) {
		return void callback(<IWorkingCopy> {
			id: workingCopyId,
			metaData: {
				name: "Stub project",
				description: "Stub project for testing",
				avatarUrl: ""
			},
			members: [],
			mprFileName: "mpr.mpr",
			mprMetaData: {
				_ProductVersion: this.productVersion,
				_BuildVersion: "0",
				_SchemaHash: ""
			}
		});
	}

	loadUnitInterfaces(workingCopyId:string, callback:common.ICallback<any[]>, errorCallback:common.IErrorCallback) {
		return void callback(this.unitInterfaces);
	}

	grantAccess(workingCopyId:string, memberOpenId:string, callback:common.IVoidCallback, errorCallback:common.IErrorCallback) {
		return void callback();
	}

    revokeAccess(workingCopyId:string, memberOpenId:string, callback:common.IVoidCallback, errorCallback:common.IErrorCallback) {
		return void callback();
	}

    checkAccess(workingCopyId:string, memberOpenId:string, callback:common.ICallback<boolean>, errorCallback:common.IErrorCallback) {
		return void callback(true);
	}

    exportMpk(workingCopyId:string, outFilePath:string, callback:common.IVoidCallback, errorCallback:common.IErrorCallback) {
		return void callback();
	}
	
	getFilePaths(workingCopyId: string, callback: common.ICallback<string[]>, errorCallback: common.IErrorCallback) {
		return void callback([]);
	}

	getFile(workingCopyId: string, filePath: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}
	
	putFile(workingCopyId: string, inFilePath: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}
	
	deleteFile(workingCopyId: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	loadUnitById<T extends ModelUnit>(workingCopyId:string, unitId:string, callback) {
		const unit = this.units[unitId];
		if (unit)
			return void callback(unit);
		else
			throw new Error(`Unknown unit id ${unitId}`);
	}

	sendDeltas(workingCopyId:string, deltas:any[], onSuccess:common.ICallback<Object>, onError:common.IErrorCallback) {
		this.deltas.push(...deltas);
		const results = [];
		for (let i = 0; i < deltas.length; i++) {
			results.push({});
		}
		return void onSuccess({ successResults: results, firstError: null });
	}

}


export class CompanyExpensesStubClient extends StubClient {

	public static domainModelUnitId = "6ff9f92e-d8b1-4392-a0c8-dedb47bded2d";
	public static domainModelUnitId2 = "0844e404-5674-445c-b4d4-55089b2750b0";
	public static domainModelUnitId3 = "b55c4efc-0ba1-4e2f-a682-9cef7d26042b";

	constructor(config:configuration.ISdkConfig) {
		super(config, readJson('company-expenses-interfaces-expected.json'), {
			[CompanyExpensesStubClient.domainModelUnitId]: readJson('company-expenses-domain-model-expected.json'),
			[CompanyExpensesStubClient.domainModelUnitId2]: {
				"$ID": "0844e404-5674-445c-b4d4-55089b2750b0",
				"$Type": "DomainModels$DomainModel",
				"containerId": "a9009087-36cd-41a0-aa8f-cc1520fb9564",
				"containmentName": "domainModel",
				"contents": {
					"entities": [],
					"associations": [],
					"crossAssociations": []
				}
			},
			[CompanyExpensesStubClient.domainModelUnitId3]: {
				"$ID": "b55c4efc-0ba1-4e2f-a682-9cef7d26042b",
				"$Type": "DomainModels$DomainModel",
				"containerId": "82724765-dc37-4909-b410-7dc92c3ce74c",
				"containmentName": "domainModel",
				"contents": {
					"entities": [],
					"associations": [],
					"crossAssociations": []
				}
			},
		}, "5.16.0");
	}

}


export class TestModelStubClient extends StubClient {

	public static domainModelUnitId = "01e537da-b654-4265-b3d1-c91cb630244e";

	constructor(config:configuration.ISdkConfig, version:string) {
		super(config, readJson('test-model-interfaces.json'), {
			[TestModelStubClient.domainModelUnitId]: readJson('test-domain-model.json')
		}, version);
	}

}

