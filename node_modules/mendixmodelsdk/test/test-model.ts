import * as internal from  '../src/sdk/internal';
import * as classes from './gen/all-model-classes';
import {common} from '../src/common';
import {configuration} from '../src/sdk/config';
import * as base from './gen/base-model';
import {ModelSdkClientImpl} from '../src/model-sdk-client';

export type IModel = base.IModel;

/**
 * Implementation of {@link IModel}.
 */
export class TestModel extends base.BaseModel implements IModel {

	public static createSdkClient(connectionConfig:configuration.ISdkConfig) {
		return new ModelSdkClientImpl<IModel, TestModel>(connectionConfig, TestModel);
	}

	/**
	 * Returns the structural unit of type "Projects$Project" which is the project's root,
	 * cast to the appropriate type.
	 */
	public get root():classes.domainmodels_simple.IProject {
		if (this._unitsByType["Projects$Project"].length !== 1)
			throw new Error("Illegal State: project root data not available");
		return <classes.domainmodels_simple.IProject> this._unitsByType["Projects$Project"][0];
	}

	private allModelClasses:any;
	_allModelClasses() {
		if (!this.allModelClasses) {
			this.allModelClasses = require('./gen/all-model-classes');
		}
		return this.allModelClasses;
	}

}

export type TestModelSdkClient = ModelSdkClientImpl<IModel, TestModel>;

