/// <reference path="../test-typings.d.ts"/>

import {domainmodels, configuration, Model} from "mendixmodelsdk";
import {createSdkClient, createBackendSdkClient} from '../helpers/sdk-client-helper';


const createWorkingCopyParams:configuration.ICreateWorkingCopyParameters = {
	name: 'testName',
	description: 'description',
	avatarUrl: 'avatarUrl',
	template: '../model-api/test-data/NewApp.mpk'
};

describe('sdk must be able to', () => {

	it('read a project', (done) => {
		createSdkClient().openWorkingCopy("1", (project:Model) => {
			done();
		}, done);
	});
	
	it('read a project and then download it', (done) => {
		createSdkClient().exportMpk("1", "temp_mpr.mpr", () => {
			done();
		}, done);
	});
	
	it('create a project as backend', (done) => {
		createBackendSdkClient().createWorkingCopy(createWorkingCopyParams, (project:Model) => {
			done();
		}, done);
	});
	
	it('create a project', (done) => {
		createSdkClient().createWorkingCopy(createWorkingCopyParams, (project:Model) => {
			done();
		}, done);
	});
	
	it('delete a just created project', (done) => {
		var client = createBackendSdkClient()
		client.createWorkingCopy(createWorkingCopyParams, (project:Model) => {
			client.deleteWorkingCopy(project.id, () => {
				done();
			}, done);
		}, done);
	});

	it('throw an error when you try to delete a project without backend params', (done) => {
		try {
			createSdkClient().deleteWorkingCopy("1", () => {
				done("should not be able to delete a project without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});
	
	// doesn't actually grant a user anything, just checks if the calls don't throw errors
	it('grant access to a user', (done) => {
		createBackendSdkClient().grantAccess("1", "qwe", () => {
			done();
		}, done);
	});
	
	// doesn't actually grant a user anything, just checks if the calls don't throw errors
	it('throw an error when you try to grant access to a project without backend params', (done) => {
		try {
			createSdkClient().grantAccess("1", "qwe", () => {
				done("should not be able to grant access to a project without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});
	
	// doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
	it('revoke access to a project for a user', (done) => {
		createBackendSdkClient().revokeAccess("1", "qwe", () => {
			done();				
		}, done);
	});
	
	// doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
	it('throw an error when you try to revoke access to a project without backend params', (done) => {
		try {
			createSdkClient().revokeAccess("1", "qwe", () => {
				done("should not be able to revoke access to a project without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});
	
	// doesn't actually check anything, just checks if the calls don't throw errors
	it('check access to a project for a user', (done) => {
		createBackendSdkClient().checkAccess("1", "qwe", (hasAccess:boolean) => {
			done();				
		}, done);
	});
	
	// doesn't actually check anything, just checks if the calls don't throw errors
	it('throw an error when you try to check access to a project without backend params', (done) => {
		try {
			createSdkClient().checkAccess("1", "qwe", (hasAccess:boolean) => {
				done("should not be able to check access to a project without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});

});
