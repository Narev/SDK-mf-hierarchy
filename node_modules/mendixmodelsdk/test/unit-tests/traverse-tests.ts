/// <reference path="../test-typings.d.ts"/>

import {domainmodels, projects, pages, texts, IModel, Model} from "mendixmodelsdk";
import {StubClient} from '../helpers/stub-model-client';
import {createSdkClient} from '../helpers/sdk-client-helper';
import {writeJson} from '../helpers/file-helper';
import {assert} from 'chai';


describe('traverse', () => {

    it('only works for loaded documents', done => {
        const client = createSdkClient();
        client.openWorkingCopy("1", model => {
            // not allowed, change inside model unit
            const dm = model.allDomainModels()[1];
            assert.ok(dm.entities.length > 0);
            assert.throws(() => dm.entities[0].traverse(() => {}), 'not fully loaded');
            assert.throws(() => dm.entities[0].traverse(() => {}), "'DomainModels$Entity'");
            
            done();
		}, done);
	});
    
    it('should traverse all elements', done => {
        const client = createSdkClient();
        client.openWorkingCopy("1", model => {
            const dm = model.allDomainModels()[1];
            assert.ok(dm.entities.length > 0);
            dm.load(dm => {
                var elements = [];
                dm.entities[0].traverse(structure => elements.push(structure.typeName, structure['name'] || null));
                assert.deepEqual(elements, [
                    "DomainModels$Entity", "ExpenseType",
                    "DomainModels$NoGeneralization", null,
                    "DomainModels$Attribute", "Name",
                    "DomainModels$StringAttributeType", null,
                    "DomainModels$StoredValue", null,
                    "DomainModels$AccessRule", null,
                    "DomainModels$MemberAccess", null,
                    "DomainModels$AccessRule", null,
                    "DomainModels$MemberAccess", null
                ]);
                done();
            });
		}, done);
	});
});
